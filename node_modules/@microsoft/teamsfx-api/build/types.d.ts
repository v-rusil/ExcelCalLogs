import { Platform, Stage, VsCodeEnv } from "./constants";
import { TokenProvider } from "./utils/login";
import { Context } from "./v2/types";
import { AppManifestProvider } from "./v3/plugins";
import { EnvInfoV3 } from "./v3/types";
export declare type Json = Record<string, any>;
export declare type ConfigValue = any;
export declare type PluginIdentity = string;
export declare type PluginConfig = ConfigMap;
export declare type ReadonlyPluginConfig = ReadonlyMap<string, ConfigValue>;
export declare type SolutionConfig = Map<PluginIdentity, PluginConfig>;
export declare type ReadonlySolutionConfig = ReadonlyMap<PluginIdentity, ReadonlyPluginConfig>;
/**
 * Definition of option item in single selection or multiple selection
 */
export interface OptionItem {
    /**
     * unique identifier of the option item in the option list
     */
    id: string;
    /**
     * display name
     */
    label: string;
    /**
     * short description
     */
    description?: string;
    /**
     * detailed description
     */
    detail?: string;
    /**
     * customized user data, which is not displayed
     */
    data?: unknown;
    /**
     * CLI display name. CLI will use `cliName` as display name, and use `id` instead if `cliName` is undefined.
     */
    cliName?: string;
    /**
     * group name. If it's set, separator will be rendered on UI between groups.
     */
    groupName?: string;
    /**
     * Actions that can be made within the item.
     * @param An array of actions
     * @param `icon` is the icon id of the action item
     * @param `tooltip` is the hint of the action item
     * @param `command` is the command name that will be executed when current action triggered
     */
    buttons?: {
        iconPath: string;
        tooltip: string;
        command: string;
    }[];
}
export declare class ConfigMap extends Map<string, ConfigValue> {
    getString(k: string, defaultValue?: string): string | undefined;
    getBoolean(k: string, defaultValue?: boolean): boolean | undefined;
    getNumber(k: string, defaultValue?: number): number | undefined;
    getStringArray(k: string, defaultValue?: string[]): string[] | undefined;
    getNumberArray(k: string, defaultValue?: number[]): number[] | undefined;
    getBooleanArray(k: string, defaultValue?: boolean[]): boolean[] | undefined;
    getOptionItem(k: string, defaultValue?: OptionItem): OptionItem | undefined;
    getOptionItemArray(k: string, defaultValue?: OptionItem[]): OptionItem[] | undefined;
    toJSON(): Json;
    static fromJSON(obj?: Json): ConfigMap | undefined;
    constructor(entries?: readonly (readonly [string, ConfigValue])[] | null);
}
export declare function mergeConfigMap(lhs?: ConfigMap, rhs?: ConfigMap): ConfigMap | undefined;
export declare type Void = {};
export declare const Void: {};
export declare type ResourceTemplate = Record<string, ConfigValue>;
export declare type ResourceTemplates = {
    [k: string]: ResourceTemplate | undefined;
};
export declare type ResourceConfig = ResourceTemplate;
export declare type ResourceConfigs = ResourceTemplates;
export declare type ReadonlyResourceConfig = Readonly<ResourceConfig>;
export declare type ReadonlyResourceConfigs = Readonly<{
    [k: string]: ReadonlyResourceConfig | undefined;
}>;
/**
 * environment meta data
 */
export interface EnvMeta {
    name: string;
    local: boolean;
    sideloading: boolean;
}
/**
 * project static settings
 */
export interface ProjectSettings {
    appName?: string;
    version?: string;
    projectId: string;
    programmingLanguage?: string;
    defaultFunctionName?: string;
    solutionSettings?: SolutionSettings;
    isFromSample?: boolean;
    isM365?: boolean;
    /**
     * pluginSettings is used for plugin settings irrelevant to environments
     */
    pluginSettings?: Json;
}
/**
 * solution settings
 */
export interface SolutionSettings extends Json {
    name: string;
    /**
     * solution settings schema version
     */
    version?: string;
}
export interface AzureSolutionSettings extends SolutionSettings {
    hostType: string;
    capabilities: string[];
    azureResources: string[];
    activeResourcePlugins: string[];
}
/**
 * local debug settings
 */
export interface LocalSettings {
    teamsApp?: ConfigMap;
    auth?: ConfigMap;
    frontend?: ConfigMap;
    backend?: ConfigMap;
    bot?: ConfigMap;
}
/**
 * project dynamic states
 */
export interface ProjectStates {
    solution: Record<string, ConfigValue>;
    resources: {
        [k: string]: Record<string, ConfigValue>;
    };
}
export interface Inputs extends Json {
    projectPath?: string;
    targetEnvName?: string;
    sourceEnvName?: string;
    targetResourceGroupName?: string;
    targetResourceLocationName?: string;
    targetSubscriptionId?: string;
    platform: Platform;
    stage?: Stage;
    vscodeEnv?: VsCodeEnv;
    ignoreConfigPersist?: boolean;
    ignoreEnvInfo?: boolean;
    env?: string;
    projectId?: string;
    existingResources?: string[];
    locale?: string;
    isM365?: boolean;
    taskOrientedTemplateNaming?: boolean;
    inProductDoc?: boolean;
    teamsAppFromTdp?: any;
}
export interface ProjectConfig {
    settings?: ProjectSettings;
    config?: Json;
}
export interface ProjectConfigV3 {
    projectSettings: ProjectSettings;
    envInfos: {
        [key: string]: EnvInfoV3;
    };
}
export interface Component extends Json {
    name: string;
    hosting?: string;
    code?: string;
    deployType?: "folder" | "zip";
    language?: string;
    folder?: string;
    artifactFolder?: string;
    build?: boolean;
    provision?: boolean;
    deploy?: boolean;
    connections?: string[];
    sso?: boolean;
}
export interface ProjectSettingsV3 extends ProjectSettings {
    components: Component[];
}
export interface ContextV3 extends Context {
    manifestProvider: AppManifestProvider;
    projectSetting: ProjectSettingsV3;
    envInfo?: EnvInfoV3;
    tokenProvider?: TokenProvider;
    projectPath?: string;
    templateVariables?: {
        [key: string]: string;
    };
}
export interface ResourceContextV3 extends ContextV3 {
    envInfo: EnvInfoV3;
    tokenProvider: TokenProvider;
}
export declare type MaybePromise<T> = T | Promise<T>;
/**
 * simplified tooling settings for v3
 */
export interface Settings {
    version: string;
    trackingId: string;
}
//# sourceMappingURL=types.d.ts.map