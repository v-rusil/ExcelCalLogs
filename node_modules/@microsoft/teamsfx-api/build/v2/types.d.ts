import { UserInteraction } from "../qm/ui";
import { Inputs, Json, ProjectSettings } from "../types";
import { CryptoProvider, LogProvider, TelemetryReporter, PermissionRequestProvider, ExpServiceProvider } from "../utils";
import { EnvInfo } from "../context";
import { FxError } from "../error";
export declare type PluginName = string;
export interface Context {
    userInteraction: UserInteraction;
    logProvider: LogProvider;
    telemetryReporter: TelemetryReporter;
    cryptoProvider: CryptoProvider;
    projectSetting: ProjectSettings;
    permissionRequestProvider?: PermissionRequestProvider;
    expServiceProvider?: ExpServiceProvider;
}
export interface LocalSettings extends Json {
    teamsApp: Record<string, string>;
    auth?: Record<string, string>;
    frontend?: Record<string, string>;
    backend?: Record<string, string>;
    bot?: Record<string, string>;
}
export declare type LocalSetting = {
    key: keyof LocalSettings;
    value: Record<string, string>;
};
export declare type SolutionInputs = {
    resourceNameSuffix: string;
    resourceGroupName: string;
    location: string;
    teamsAppTenantId: string;
    subscriptionId: string;
    tenantId: string;
    remoteTeamsAppId?: string;
    provisionSucceeded?: boolean;
};
export declare type InputsWithProjectPath = Inputs & {
    projectPath: string;
};
export declare type ProvisionInputs = InputsWithProjectPath & SolutionInputs;
export declare type DeploymentInputs = InputsWithProjectPath & SolutionInputs;
export declare class FxSuccess<T> {
    kind: "success";
    output: T;
    constructor(output: T);
}
export declare class FxPartialSuccess<T, Error = FxError> {
    kind: "partialSuccess";
    output: T;
    error: Error;
    constructor(output: T, error: Error);
}
export declare class FxFailure<Error = FxError> {
    kind: "failure";
    error: Error;
    constructor(error: Error);
}
export declare type FxResult<T, Error = FxError> = FxSuccess<T> | FxPartialSuccess<T, Error> | FxFailure<Error>;
export declare type EnvInfoV2 = Omit<EnvInfo, "state" | "config"> & {
    state: Json;
} & {
    config: Json;
};
export declare type DeepReadonly<T> = {
    readonly [P in keyof T]: DeepReadonly<T[P]>;
};
//# sourceMappingURL=types.d.ts.map