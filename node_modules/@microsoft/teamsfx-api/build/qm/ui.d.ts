import { Result } from "neverthrow";
import { LocalFunc } from ".";
import { FxError } from "../error";
import { OnSelectionChangeFunc, StaticOptions } from "../qm/question";
import { Inputs, OptionItem } from "../types";
import { Colors } from "./../utils/log";
/**
 * A base structure of user interaction (UI) configuration
 */
export interface UIConfig<T> {
    /**
     * name is the identifier of the UI
     */
    name: string;
    /**
     * human readable meaningful display name of the UI
     */
    title: string;
    /**
     * placeholder in the UI
     */
    placeholder?: string;
    /**
     * prompt text providing some ask or explanation to the user
     */
    prompt?: string;
    /**
     * `step` and `totalSteps` are used to describe the progress in question flow
     * `step` is the sequence number of current question
     */
    step?: number;
    /**
     * `totalStep` is the number of questions totally
     */
    totalSteps?: number;
    /**
     * default input value
     */
    default?: T;
    /**
     * A function that will be called to validate input and to give a hint to the user.
     *
     * @param input The current value of the input to be validated.
     * @return A human-readable string which is presented as diagnostic message.
     * Return `undefined` when 'value' is valid.
     */
    validation?: (input: T) => string | undefined | Promise<string | undefined>;
    /**
     * Actions that can be made within the question.
     * @param An array of actions
     * @param `icon` is the icon id of the action item
     * @param `tooltip` is the hint of the action item
     * @param `command` is the command name that will be executed when current action triggered
     */
    buttons?: {
        icon: string;
        tooltip: string;
        command: string;
    }[];
}
/**
 * single selection UI config
 */
export interface SingleSelectConfig extends UIConfig<string> {
    /**
     * option array
     */
    options: StaticOptions;
    /**
     * This config only works for option items with `OptionItem[]` type. If `returnObject` is true, the answer value is an `OptionItem` object; otherwise, the answer value is the `id` string of the `OptionItem`.
     * In case of option items with `string[]` type, whether `returnObject` is true or false, the returned answer value is always a string.
     */
    returnObject?: boolean;
}
/**
 * multiple selection UI config
 */
export interface MultiSelectConfig extends UIConfig<string[]> {
    /**
     * option array
     */
    options: StaticOptions;
    /**
     * This config only works for option items with `OptionItem[]` type. If `returnObject` is true, the answer value is an array of `OptionItem` objects; otherwise, the answer value is an array of `id` strings.
     * In case of option items with `string[]` type, whether `returnObject` is true or false, the returned answer value is always a string array.
     */
    returnObject?: boolean;
    /**
     * a callback function which is triggered when the selected values change, which can change the final selected values.
     * @param currentSelectedIds current selected option ids
     * @param previousSelectedIds previous selected option ids
     * @returns the final selected option ids
     */
    onDidChangeSelection?: OnSelectionChangeFunc;
}
/**
 * text input UI config
 */
export interface InputTextConfig extends UIConfig<string> {
    /**
     * If the input value should be hidden. Defaults to false.
     */
    password?: boolean;
}
/**
 * single file selector config
 */
export declare type SelectFileConfig = UIConfig<string> & {
    /**
     * A set of file filters that are used by the dialog. Each entry is a human-readable label,
     * like "TypeScript", and an array of extensions, e.g.
     * ```ts
     * {
     *     'Images': ['png', 'jpg']
     *     'TypeScript': ['ts', 'tsx']
     * }
     * ```
     */
    filters?: {
        [name: string]: string[];
    };
    /**
     * Possible files that will be listed for users to select.
     * The id cannot be "default" or "browse" as they are reserved for default and browse options.
     */
    possibleFiles?: {
        id: string;
        label: string;
        description?: string;
    }[];
};
/**
 * multiple files selector config
 */
export declare type SelectFilesConfig = UIConfig<string[]> & {
    /**
     * A set of file filters that are used by the dialog. Each entry is a human-readable label,
     * like "TypeScript", and an array of extensions, e.g.
     * ```ts
     * {
     *     'Images': ['png', 'jpg']
     *     'TypeScript': ['ts', 'tsx']
     * }
     * ```
     */
    filters?: {
        [name: string]: string[];
    };
};
/**
 * folder selector config
 */
export declare type SelectFolderConfig = UIConfig<string>;
/**
 * func execution config
 */
export interface ExecuteFuncConfig extends UIConfig<string> {
    func: LocalFunc<any>;
    inputs: Inputs;
}
/**
 * a wrapper of user input result
 */
export interface InputResult<T> {
    /**
     * `success`: the returned answer value is successfully collected when user click predefined confirm button/key, user will continue to answer the next question if available
     * `skip`: the answer value is automatically selected when `skipSingleOption` is true for single/multiple selection list, user will continue to answer the next question if available
     * `back`: the returned answer is undefined because user click the go-back button/key and will go back to re-answer the previous question in the question flow
     */
    type: "success" | "skip" | "back";
    /**
     * answer value
     */
    result?: T;
}
export declare type SingleSelectResult = InputResult<string | OptionItem>;
export declare type MultiSelectResult = InputResult<StaticOptions>;
export declare type InputTextResult = InputResult<string>;
export declare type SelectFileResult = InputResult<string>;
export declare type SelectFilesResult = InputResult<string[]>;
export declare type SelectFolderResult = InputResult<string>;
/**
 * Definition of a runnable task
 */
export interface RunnableTask<T> {
    /**
     * task name
     */
    name?: string;
    /**
     * current progress
     */
    current?: number;
    /**
     * total progress
     */
    readonly total?: number;
    /**
     * status message
     */
    message?: string;
    /**
     * a function that realy implements the running of the task
     * @param args args
     */
    run(...args: any): Promise<Result<T, FxError>>;
    /**
     * a function that implements the cancelling of the task
     */
    cancel?(): void;
    /**
     * a state that indicate whether the task is cancelled or not
     */
    isCanceled?: boolean;
}
/**
 * task running configuration
 */
export interface TaskConfig {
    /**
     * whether task can be cancelled or not
     */
    cancellable?: boolean;
    /**
     * whether to show the numeric progress of the task
     */
    showProgress?: boolean;
}
/**
 * task group configuration
 */
export interface TaskGroupConfig {
    /**
     * if true, the tasks in the group are running in parallel
     * if false, the tasks are running in sequence.
     */
    sequential?: boolean;
    /**
     * whether to terminate all tasks if some task is failed or canceled
     */
    fastFail?: boolean;
}
/**
 * Definition of user interaction, which is platform independent
 */
export interface UserInteraction {
    /**
     * Shows a single selection list
     * @param config single selection config
     * @returns A promise that resolves to the single select result wrapper or FxError
     * @throws FxError
     */
    selectOption: (config: SingleSelectConfig) => Promise<Result<SingleSelectResult, FxError>>;
    /**
     * Shows a multiple selection list
     * @param config multiple selection config
     * @returns A promise that resolves to the multiple select result wrapper or FxError
     * @throws FxError
     */
    selectOptions: (config: MultiSelectConfig) => Promise<Result<MultiSelectResult, FxError>>;
    /**
     * Opens an input box to ask the user for input.
     * @param config text input config
     * @returns A promise that resolves to the text input result wrapper or FxError
     * @throws FxError
     */
    inputText: (config: InputTextConfig) => Promise<Result<InputTextResult, FxError>>;
    /**
     * Shows a file open dialog to the user which allows to select a single file
     * @param config file selector config
     * @returns A promise that resolves to the file selector result wrapper or FxError
     * @throws FxError
     */
    selectFile: (config: SelectFileConfig) => Promise<Result<SelectFileResult, FxError>>;
    /**
     * Shows a file open dialog to the user which allows to select multiple files
     * @param config multiple files selector config
     * @returns A promise that resolves to the multiple files selector result wrapper or FxError
     * @throws FxError
     */
    selectFiles: (config: SelectFilesConfig) => Promise<Result<SelectFilesResult, FxError>>;
    /**
     * Shows a file open dialog to the user which allows to select a folder
     * @param config folder selector config
     * @returns A promise that resolves to the folder selector result wrapper or FxError
     * @throws FxError
     */
    selectFolder: (config: SelectFolderConfig) => Promise<Result<SelectFolderResult, FxError>>;
    /**
     * Opens a link externally in the browser.
     * @param link The uri that should be opened.
     * @returns A promise indicating if open was successful.
     */
    openUrl(link: string): Promise<Result<boolean, FxError>>;
    /**
     * Show an information/warning/error message to users. Optionally provide an array of items which will be presented as clickable buttons.
     * @param level message level
     * @param message The message to show.
     * @param items A set of items that will be rendered as actions in the message.
     * @returns A promise that resolves to the selected item or `undefined` when being dismissed.
     */
    showMessage(level: "info" | "warn" | "error", message: string, modal: boolean, ...items: string[]): Promise<Result<string | undefined, FxError>>;
    /**
     * Show an information/warning/error message with different colors to users, which only works for CLI.
     * @param level message level
     * @param message The message with color to show. The color only works for CLI.
     * @param items A set of items that will be rendered as actions in the message.
     * @returns A promise that resolves to the selected item or `undefined` when being dismissed.
     */
    showMessage(level: "info" | "warn" | "error", message: Array<{
        content: string;
        color: Colors;
    }>, modal: boolean, ...items: string[]): Promise<Result<string | undefined, FxError>>;
    /**
     * Create a new progress bar with the specified title and the number of steps. It will
     * return a progress handler and you can use this handler to control the detail message
     * of it.
     * ${currentStep} will increase from 0 to ${totalSteps}.
     * @param title the title of this progress bar.
     * @param totalSteps the number of steps.
     * @returns the handler of a progress bar
     */
    createProgressBar: (title: string, totalSteps: number) => IProgressHandler;
    /**
     * A function to run a task with progress bar. (CLI and VS Code has different UI experience for progress bar)
     * @param task a runnable task with progress definition
     * @param config task running configuration
     * @param args args for task run() API
     * @returns A promise that resolves the wrapper of task running result or FxError
     */
    runWithProgress<T>(task: RunnableTask<T>, config: TaskConfig, ...args: any): Promise<Result<T, FxError>>;
    /**
     * Reload window to update user interface. (Only works for VS Code)
     * @returns A promise indicating if reload is successful.
     */
    reload?(): Promise<Result<boolean, FxError>>;
    /**
     * Execute a function. User interface can decide what the UX is.
     * @param config execute function configurations
     */
    executeFunction?(config: ExecuteFuncConfig): any | Promise<any>;
    /**
     * Opens a file.
     * @param filePath The path of the file that should be opened.
     * @returns A promise indicating if open was successful.
     */
    openFile?(filePath: string): Promise<Result<boolean, FxError>>;
}
export interface IProgressHandler {
    /**
     * Start this progress bar. After calling it, the progress bar will be seen to users with
     * ${currentStep} = 0 and ${detail} = detail.
     * @param detail the detail message of the next work.
     */
    start: (detail?: string) => Promise<void>;
    /**
     * Update the progress bar's message. After calling it, the progress bar will be seen to
     * users with ${currentStep}++ and ${detail} = detail.
     * This func must be called after calling start().
     * @param detail the detail message of the next work.
     */
    next: (detail?: string) => Promise<void>;
    /**
     * End the progress bar and tell if success. After calling it, the progress bar will disappear. This handler
     * can be reused after calling end().
     */
    end: (success: boolean) => Promise<void>;
}
/**
 * An implementation of task group that will define the progress when all tasks are running
 */
export declare class GroupOfTasks<T> implements RunnableTask<Result<T, FxError>[]> {
    name?: string;
    current: number;
    readonly total: number;
    isCanceled: boolean;
    tasks: RunnableTask<T>[];
    config?: TaskGroupConfig;
    message?: string;
    constructor(tasks: RunnableTask<T>[], config?: TaskGroupConfig);
    run(...args: any): Promise<Result<Result<T, FxError>[], FxError>>;
    cancel(): void;
}
//# sourceMappingURL=ui.d.ts.map