"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scaffoldFromTemplates = exports.removeTemplateExtReplaceFn = exports.genTemplateRenderReplaceFn = exports.defaultActionSeq = exports.unzipAction = exports.fetchTemplateZipFromLocalAction = exports.fetchTemplatesZipFromUrlAction = exports.fetchTemplatesUrlWithTagAction = exports.fetchTemplateZipFromSourceCodeAction = exports.ScaffoldActionName = void 0;
const tslib_1 = require("tslib");
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const folder_1 = require("../../folder");
const constants_1 = require("../constants");
const telemetry_1 = require("../telemetry");
const templatesUtils_1 = require("./templatesUtils");
const defaultTryLimits = 1;
const defaultTimeoutInMs = 30000;
const missKeyErrorInfo = (key) => `Missing ${key} in template action.`;
var ScaffoldActionName;
(function (ScaffoldActionName) {
    ScaffoldActionName["FetchTemplateZipFromSourceCode"] = "FetchTemplateZipFromSourceCode";
    ScaffoldActionName["FetchTemplatesUrlWithTag"] = "FetchTemplatesUrlWithTag";
    ScaffoldActionName["FetchTemplatesZipFromUrl"] = "FetchTemplatesZipFromUrl";
    ScaffoldActionName["FetchTemplateZipFromLocal"] = "FetchTemplateZipFromLocal";
    ScaffoldActionName["Unzip"] = "Unzip";
})(ScaffoldActionName = exports.ScaffoldActionName || (exports.ScaffoldActionName = {}));
// * This action is only for debug purpose
exports.fetchTemplateZipFromSourceCodeAction = {
    name: ScaffoldActionName.FetchTemplateZipFromSourceCode,
    run: async (context) => {
        const isDebugMode = () => {
            const DebugTemplateFlag = process.env[constants_1.FeatureFlagName.DebugTemplate];
            return (DebugTemplateFlag === null || DebugTemplateFlag === void 0 ? void 0 : DebugTemplateFlag.toLowerCase()) === "true" && process.env.NODE_ENV === "development";
        };
        if (!isDebugMode()) {
            return;
        }
        if (context.zip) {
            return;
        }
        if (!context.group) {
            throw new Error(missKeyErrorInfo("group"));
        }
        if (!context.lang) {
            throw new Error(missKeyErrorInfo("lang"));
        }
        if (!context.scenario) {
            throw new Error(missKeyErrorInfo("scenario"));
        }
        //! This path only works in debug mode
        const templateSourceCodePath = path_1.default.resolve(__dirname, "../../../../../", "templates", context.group, context.lang, context.scenario);
        const zip = new adm_zip_1.default();
        zip.addLocalFolder(templateSourceCodePath);
        context.zip = zip;
    },
};
exports.fetchTemplatesUrlWithTagAction = {
    name: ScaffoldActionName.FetchTemplatesUrlWithTag,
    run: async (context) => {
        var _a, _b;
        if (context.zipUrl || context.zip) {
            return;
        }
        if (!context.group) {
            throw new Error(missKeyErrorInfo("group"));
        }
        if (!context.lang) {
            throw new Error(missKeyErrorInfo("lang"));
        }
        if (!context.scenario) {
            throw new Error(missKeyErrorInfo("scenario"));
        }
        const tryLimits = (_a = context.tryLimits) !== null && _a !== void 0 ? _a : defaultTryLimits;
        const timeoutInMs = (_b = context.timeoutInMs) !== null && _b !== void 0 ? _b : defaultTimeoutInMs;
        context.zipUrl = await templatesUtils_1.fetchTemplateUrl(context.group, context.lang, context.scenario, tryLimits, timeoutInMs);
    },
};
exports.fetchTemplatesZipFromUrlAction = {
    name: ScaffoldActionName.FetchTemplatesZipFromUrl,
    run: async (context) => {
        var _a, _b;
        if (context.zip || !context.zipUrl) {
            return;
        }
        const tryLimits = (_a = context.tryLimits) !== null && _a !== void 0 ? _a : defaultTryLimits;
        const timeoutInMs = (_b = context.timeoutInMs) !== null && _b !== void 0 ? _b : defaultTimeoutInMs;
        context.zip = await templatesUtils_1.fetchZipFromUrl(context.zipUrl, tryLimits, timeoutInMs);
    },
};
exports.fetchTemplateZipFromLocalAction = {
    name: ScaffoldActionName.FetchTemplateZipFromLocal,
    run: async (context) => {
        if (context.zip) {
            return;
        }
        context.fallback = true;
        if (!context.group) {
            throw new Error(missKeyErrorInfo("group"));
        }
        if (!context.lang) {
            throw new Error(missKeyErrorInfo("lang"));
        }
        if (!context.scenario) {
            throw new Error(missKeyErrorInfo("scenario"));
        }
        if (!context.templatesFolderPath) {
            context.templatesFolderPath = path_1.default.join(folder_1.getTemplatesFolder(), "fallback");
        }
        const fileName = [context.group, context.lang, context.scenario, "zip"].join(".");
        const zipPath = path_1.default.join(context.templatesFolderPath, fileName);
        const data = await fs_extra_1.default.readFile(zipPath);
        context.zip = new adm_zip_1.default(data);
    },
};
exports.unzipAction = {
    name: ScaffoldActionName.Unzip,
    run: async (context) => {
        if (!context.dst) {
            throw new Error(missKeyErrorInfo("dst"));
        }
        if (!context.zip) {
            throw new Error(missKeyErrorInfo("zip"));
        }
        await templatesUtils_1.unzip(context.zip, context.dst, context.fileNameReplaceFn, context.fileDataReplaceFn);
    },
};
exports.defaultActionSeq = [
    exports.fetchTemplateZipFromSourceCodeAction,
    exports.fetchTemplatesUrlWithTagAction,
    exports.fetchTemplatesZipFromUrlAction,
    exports.fetchTemplateZipFromLocalAction,
    exports.unzipAction,
];
function genTemplateRenderReplaceFn(variable) {
    return (name, data) => templatesUtils_1.renderTemplateContent(name, data, variable);
}
exports.genTemplateRenderReplaceFn = genTemplateRenderReplaceFn;
function removeTemplateExtReplaceFn(name, data) {
    return name.replace(/\.tpl/, "");
}
exports.removeTemplateExtReplaceFn = removeTemplateExtReplaceFn;
async function scaffoldFromTemplates(context, actions = exports.defaultActionSeq) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    // To track code templates usage.
    telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ScaffoldFromTemplatesStart, {
        [telemetry_1.TelemetryProperty.TemplateGroup]: (_a = context.group) !== null && _a !== void 0 ? _a : "",
        [telemetry_1.TelemetryProperty.TemplateLanguage]: (_b = context.lang) !== null && _b !== void 0 ? _b : "",
        [telemetry_1.TelemetryProperty.TemplateScenario]: (_c = context.scenario) !== null && _c !== void 0 ? _c : "",
    });
    for (const action of actions) {
        try {
            await ((_d = context.onActionStart) === null || _d === void 0 ? void 0 : _d.call(context, action, context));
            await action.run(context);
            await ((_e = context.onActionEnd) === null || _e === void 0 ? void 0 : _e.call(context, action, context));
        }
        catch (e) {
            if (!context.onActionError) {
                throw e;
            }
            await context.onActionError(action, context, e);
        }
    }
    telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, telemetry_1.TelemetryEvent.ScaffoldFromTemplates, {
        [telemetry_1.TelemetryProperty.TemplateGroup]: (_f = context.group) !== null && _f !== void 0 ? _f : "",
        [telemetry_1.TelemetryProperty.TemplateLanguage]: (_g = context.lang) !== null && _g !== void 0 ? _g : "",
        [telemetry_1.TelemetryProperty.TemplateScenario]: (_h = context.scenario) !== null && _h !== void 0 ? _h : "",
        [telemetry_1.TelemetryProperty.TemplateFallback]: context.fallback ? "true" : "false", // Track fallback cases.
    });
}
exports.scaffoldFromTemplates = scaffoldFromTemplates;
//# sourceMappingURL=templatesActions.js.map