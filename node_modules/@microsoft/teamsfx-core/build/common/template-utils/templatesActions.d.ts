/// <reference types="node" />
import AdmZip from "adm-zip";
export interface ScaffoldContext {
    group?: string;
    lang?: string;
    scenario?: string;
    dst?: string;
    zip?: AdmZip;
    zipUrl?: string;
    tryLimits?: number;
    timeoutInMs?: number;
    templatesFolderPath?: string;
    fallback?: boolean;
    fileNameReplaceFn?: (name: string, data: Buffer) => string;
    fileDataReplaceFn?: (name: string, data: Buffer) => string | Buffer;
    onActionStart?: (action: ScaffoldAction, context: ScaffoldContext) => Promise<void>;
    onActionEnd?: (action: ScaffoldAction, context: ScaffoldContext) => Promise<void>;
    onActionError?: (action: ScaffoldAction, context: ScaffoldContext, error: Error) => Promise<void>;
}
export interface ScaffoldAction {
    name: string;
    run: (context: ScaffoldContext) => Promise<void>;
}
export declare enum ScaffoldActionName {
    FetchTemplateZipFromSourceCode = "FetchTemplateZipFromSourceCode",
    FetchTemplatesUrlWithTag = "FetchTemplatesUrlWithTag",
    FetchTemplatesZipFromUrl = "FetchTemplatesZipFromUrl",
    FetchTemplateZipFromLocal = "FetchTemplateZipFromLocal",
    Unzip = "Unzip"
}
export declare const fetchTemplateZipFromSourceCodeAction: ScaffoldAction;
export declare const fetchTemplatesUrlWithTagAction: ScaffoldAction;
export declare const fetchTemplatesZipFromUrlAction: ScaffoldAction;
export declare const fetchTemplateZipFromLocalAction: ScaffoldAction;
export declare const unzipAction: ScaffoldAction;
export declare const defaultActionSeq: ScaffoldAction[];
export declare function genTemplateRenderReplaceFn(variable: {
    [key: string]: string;
}): (name: string, data: Buffer) => string | Buffer;
export declare function removeTemplateExtReplaceFn(name: string, data: Buffer): string;
export declare function scaffoldFromTemplates(context: ScaffoldContext, actions?: ScaffoldAction[]): Promise<void>;
//# sourceMappingURL=templatesActions.d.ts.map