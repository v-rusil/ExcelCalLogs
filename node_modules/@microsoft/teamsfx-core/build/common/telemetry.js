"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTelemetryErrorEvent = exports.sendTelemetryEvent = exports.ProjectMigratorGuideStatus = exports.ProjectMigratorStatus = exports.CustomizeSubscriptionType = exports.CustomizeResourceGroupType = exports.Component = exports.TelemetryErrorType = exports.TelemetrySuccess = exports.TelemetryEvent = exports.TelemetryProperty = exports.TelemetryReporterInstance = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
class TelemetryReporterInstance {
}
exports.TelemetryReporterInstance = TelemetryReporterInstance;
var TelemetryProperty;
(function (TelemetryProperty) {
    TelemetryProperty["TriggerFrom"] = "trigger-from";
    TelemetryProperty["Component"] = "component";
    TelemetryProperty["Components"] = "components";
    TelemetryProperty["Feature"] = "feature";
    TelemetryProperty["Hosting"] = "hosting";
    TelemetryProperty["AppId"] = "appid";
    TelemetryProperty["Success"] = "success";
    TelemetryProperty["ErrorType"] = "error-type";
    TelemetryProperty["ErrorCode"] = "error-code";
    TelemetryProperty["ErrorMessage"] = "error-message";
    TelemetryProperty["SampleAppName"] = "sample-app-name";
    TelemetryProperty["ProjectId"] = "project-id";
    TelemetryProperty["NewProjectId"] = "new-project-id";
    TelemetryProperty["CorrelationId"] = "correlation-id";
    TelemetryProperty["Env"] = "env";
    TelemetryProperty["CustomizeResourceGroupType"] = "customize-resource-group-type";
    TelemetryProperty["EnvConfig"] = "env-config";
    TelemetryProperty["Status"] = "status";
    TelemetryProperty["HostType"] = "hostType";
    TelemetryProperty["AzureResources"] = "azure-resources";
    TelemetryProperty["Capabilities"] = "capabilities";
    TelemetryProperty["ActivePlugins"] = "active-plugins";
    TelemetryProperty["IsSideloadingAllowed"] = "is-sideloading-allowed";
    TelemetryProperty["NeedMigrateAadManifest"] = "need-migrate-aad-manifest";
    TelemetryProperty["CheckSideloadingStatusCode"] = "status-code";
    TelemetryProperty["CheckSideloadingMethod"] = "method";
    TelemetryProperty["CheckSideloadingUrl"] = "url";
    TelemetryProperty["TemplateGroup"] = "template-group";
    TelemetryProperty["TemplateLanguage"] = "template-language";
    TelemetryProperty["TemplateScenario"] = "template-scenario";
    TelemetryProperty["TemplateFallback"] = "template-fallback";
    TelemetryProperty["TemplateName"] = "template-name";
    TelemetryProperty["SampleName"] = "sample-name";
    TelemetryProperty["Fallback"] = "fallback";
    TelemetryProperty["HasSwitchedSubscription"] = "has-switched-subscription";
    TelemetryProperty["HasSwitchedM365Tenant"] = "has-switched-m365";
    TelemetryProperty["CustomizeSubscriptionType"] = "customize-subscription-type";
    TelemetryProperty["IsFromTdp"] = "is-from-developer-portal";
    TelemetryProperty["ToolkitVersion"] = "toolkit-version";
})(TelemetryProperty = exports.TelemetryProperty || (exports.TelemetryProperty = {}));
var TelemetryEvent;
(function (TelemetryEvent) {
    TelemetryEvent["Scaffold"] = "scaffold";
    TelemetryEvent["GenerateBicep"] = "generate-arm-templates";
    TelemetryEvent["LocalDebug"] = "local-debug";
    TelemetryEvent["PostLocalDebug"] = "post-local-debug";
    TelemetryEvent["Provision"] = "provision";
    TelemetryEvent["PostProvision"] = "post-provision";
    TelemetryEvent["PreDeploy"] = "pre-deploy";
    TelemetryEvent["Deploy"] = "deploy";
    TelemetryEvent["DownloadSampleStart"] = "download-sample-start";
    TelemetryEvent["DownloadSample"] = "download-sample";
    TelemetryEvent["CreateProject"] = "create";
    TelemetryEvent["AddFeature"] = "add-feature";
    TelemetryEvent["ProjectUpgrade"] = "project-upgrade";
    TelemetryEvent["ProjectUpgradeStart"] = "project-upgrade-start";
    TelemetryEvent["ReadJson"] = "read-json";
    TelemetryEvent["DecryptUserdata"] = "decrypt-userdata";
    TelemetryEvent["CheckResourceGroupStart"] = "check-resource-group-start";
    TelemetryEvent["CheckResourceGroup"] = "check-resource-group";
    TelemetryEvent["CheckSubscriptionStart"] = "check-subscription-start";
    TelemetryEvent["CheckSubscription"] = "check-subscription";
    TelemetryEvent["CheckSideloading"] = "check-sideloading";
    TelemetryEvent["EnvConfig"] = "env-config";
    TelemetryEvent["DisplayToolingUpdateNotification"] = "display-tooling-update-notification";
    TelemetryEvent["ProjectMigratorNotificationStart"] = "project-migrator-notification-start";
    TelemetryEvent["ProjectMigratorNotification"] = "project-migrator-notification";
    TelemetryEvent["ProjectMigratorMigrateStart"] = "project-migrator-migrate-start";
    TelemetryEvent["ProjectMigratorMigrate"] = "project-migrator-migrate";
    TelemetryEvent["ProjectMigratorMigrateStartV3"] = "project-migrator-migrateV3-start";
    TelemetryEvent["ProjectMigratorMigrateV3"] = "project-migrator-migrateV3";
    TelemetryEvent["ProjectMigratorMigrateArmStart"] = "project-migrator-migrate-arm-start";
    TelemetryEvent["ProjectMigratorMigrateArm"] = "project-migrator-migrate-arm";
    TelemetryEvent["ProjectMigratorMigrateMultiEnvStart"] = "project-migrator-migrate-multi-env-start";
    TelemetryEvent["ProjectMigratorMigrateMultiEnv"] = "project-migrator-migrate-multi-env";
    TelemetryEvent["ProjectMigratorGuideStart"] = "project-migrator-guide-start";
    TelemetryEvent["ProjectMigratorGuide"] = "project-migrator-guide";
    TelemetryEvent["ProjectMigratorPrecheckFailed"] = "project-migrator-pre-check-failed";
    TelemetryEvent["ProjectMigratorError"] = "project-migrator-error";
    TelemetryEvent["ProjectMigratorV3Error"] = "project-migrator-error";
    TelemetryEvent["ProjectAadManifestMigrationError"] = "project-aad-manifest-migration-error";
    TelemetryEvent["ProjectAadManifestMigrationStart"] = "project-aad-manifest-migration-start";
    TelemetryEvent["ProjectAadManifestMigration"] = "project-aad-manifest-migration";
    TelemetryEvent["ProjectAadManifestMigrationAddAADTemplateStart"] = "project-aad-manifest-migration-add-aad-template-start";
    TelemetryEvent["ProjectAadManifestMigrationAddAADTemplate"] = "project-aad-manifest-migration-add-aad-template";
    TelemetryEvent["ProjectAadManifestMigrationBackupStart"] = "project-aad-manifest-migration-backup-start";
    TelemetryEvent["ProjectAadManifestMigrationBackup"] = "project-aad-manifest-migration-backup";
    TelemetryEvent["ProjectConsolidateNotificationStart"] = "project-consolidate-notification-start";
    TelemetryEvent["ProjectConsolidateNotification"] = "project-consolidate-notification";
    TelemetryEvent["ProjectConsolidateUpgradeStart"] = "project-consolidate-upgrade-start";
    TelemetryEvent["ProjectConsolidateUpgrade"] = "project-consolidate-upgrade";
    TelemetryEvent["ProjectConsolidateAddLocalEnvStart"] = "project-consolidate-add-local-env-start";
    TelemetryEvent["ProjectConsolidateAddLocalEnv"] = "project-consolidate-add-local-env";
    TelemetryEvent["ProjectConsolidateAddSPFXManifestStart"] = "project-consolidate-add-spfx-manifest-start";
    TelemetryEvent["ProjectConsolidateAddSPFXManifest"] = "project-consolidate-add-spfx-manifest";
    TelemetryEvent["ProjectConsolidateCopyAzureManifestStart"] = "project-consolidate-copy-azure-manifest-start";
    TelemetryEvent["ProjectConsolidateCopyAzureManifest"] = "project-consolidate-copy-azure-manifest";
    TelemetryEvent["ProjectConsolidateAddAzureManifestStart"] = "project-consolidate-add-azure-manifest-start";
    TelemetryEvent["ProjectConsolidateAddAzureManifest"] = "project-consolidate-add-azure-manifest";
    TelemetryEvent["ProjectConsolidateBackupConfigStart"] = "project-consolidate-backup-config-start";
    TelemetryEvent["ProjectConsolidateBackupConfig"] = "project-consolidate-backup-config";
    TelemetryEvent["ProjectConsolidateGuideStart"] = "project-Consolidate-guide-start";
    TelemetryEvent["ProjectConsolidateGuide"] = "project-consolidate-guide";
    TelemetryEvent["ProjectConsolidateError"] = "project-consolidate-error";
    TelemetryEvent["ProjectConsolidateCheckManifestError"] = "project-consolidate-check-manifest-error";
    TelemetryEvent["DetectPortStart"] = "detect-port-start";
    TelemetryEvent["DetectPort"] = "detect-port";
    TelemetryEvent["FillProjectId"] = "fill-project-id";
    TelemetryEvent["ScaffoldFromTemplatesStart"] = "scaffold-from-templates-start";
    TelemetryEvent["ScaffoldFromTemplates"] = "scaffold-from-templates";
    TelemetryEvent["GenerateTemplate"] = "generate-template";
    TelemetryEvent["GenerateSample"] = "generate-sample";
    TelemetryEvent["ConfirmProvision"] = "confirm-provision";
    TelemetryEvent["CheckLocalDebugTenant"] = "check-local-debug-tenant";
    TelemetryEvent["DebugSetUpSSO"] = "debug-set-up-sso";
    TelemetryEvent["DeploymentInfoNotFound"] = "deployment-info-not-found";
    TelemetryEvent["InstallScriptNotFound"] = "install-script-not-found";
    TelemetryEvent["SkipDeploy"] = "skip-deploy";
    TelemetryEvent["PublishInDeveloperPortal"] = "publish-in-developer-portal";
})(TelemetryEvent = exports.TelemetryEvent || (exports.TelemetryEvent = {}));
var TelemetrySuccess;
(function (TelemetrySuccess) {
    TelemetrySuccess["Yes"] = "yes";
    TelemetrySuccess["No"] = "no";
})(TelemetrySuccess = exports.TelemetrySuccess || (exports.TelemetrySuccess = {}));
var TelemetryErrorType;
(function (TelemetryErrorType) {
    TelemetryErrorType["UserError"] = "user";
    TelemetryErrorType["SystemError"] = "system";
})(TelemetryErrorType = exports.TelemetryErrorType || (exports.TelemetryErrorType = {}));
var Component;
(function (Component) {
    Component["vsc"] = "extension";
    Component["cli"] = "cli";
    Component["vs"] = "vs";
    Component["core"] = "core";
    Component["solution"] = "solution";
})(Component = exports.Component || (exports.Component = {}));
var CustomizeResourceGroupType;
(function (CustomizeResourceGroupType) {
    CustomizeResourceGroupType["CommandLine"] = "command-line";
    CustomizeResourceGroupType["EnvConfig"] = "env-config";
    CustomizeResourceGroupType["EnvState"] = "env-state";
    CustomizeResourceGroupType["InteractiveCreateDefault"] = "interactive-create-default";
    CustomizeResourceGroupType["InteractiveCreateCustomized"] = "interactive-create-customized";
    CustomizeResourceGroupType["InteractiveUseExisting"] = "interactive-use-existing";
    CustomizeResourceGroupType["FallbackDefault"] = "fallback-default";
})(CustomizeResourceGroupType = exports.CustomizeResourceGroupType || (exports.CustomizeResourceGroupType = {}));
var CustomizeSubscriptionType;
(function (CustomizeSubscriptionType) {
    CustomizeSubscriptionType["CommandLine"] = "command-line";
    CustomizeSubscriptionType["EnvConfig"] = "env-config";
    CustomizeSubscriptionType["EnvState"] = "env-state";
    CustomizeSubscriptionType["Default"] = "default";
})(CustomizeSubscriptionType = exports.CustomizeSubscriptionType || (exports.CustomizeSubscriptionType = {}));
var ProjectMigratorStatus;
(function (ProjectMigratorStatus) {
    ProjectMigratorStatus["OK"] = "ok";
    ProjectMigratorStatus["Cancel"] = "cancel";
})(ProjectMigratorStatus = exports.ProjectMigratorStatus || (exports.ProjectMigratorStatus = {}));
var ProjectMigratorGuideStatus;
(function (ProjectMigratorGuideStatus) {
    ProjectMigratorGuideStatus["Reload"] = "reload";
    ProjectMigratorGuideStatus["LearnMore"] = "learn-more";
    ProjectMigratorGuideStatus["Cancel"] = "cancel";
})(ProjectMigratorGuideStatus = exports.ProjectMigratorGuideStatus || (exports.ProjectMigratorGuideStatus = {}));
function sendTelemetryEvent(component, eventName, properties, measurements) {
    var _a;
    if (!properties) {
        properties = {};
    }
    properties[TelemetryProperty.Component] = component;
    (_a = TelemetryReporterInstance.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
}
exports.sendTelemetryEvent = sendTelemetryEvent;
function sendTelemetryErrorEvent(component, eventName, fxError, properties) {
    var _a;
    if (!properties) {
        properties = {};
    }
    properties[TelemetryProperty.Component] = component;
    properties[TelemetryProperty.Success] = TelemetrySuccess.No;
    if (fxError instanceof teamsfx_api_1.UserError) {
        properties[TelemetryProperty.ErrorType] = TelemetryErrorType.UserError;
    }
    else {
        properties[TelemetryProperty.ErrorType] = TelemetryErrorType.SystemError;
    }
    properties[TelemetryProperty.ErrorCode] = `${fxError.source}.${fxError.name}`;
    properties[TelemetryProperty.ErrorMessage] = `${fxError.message}${fxError.stack ? "\nstack:\n" + fxError.stack : ""}`;
    (_a = TelemetryReporterInstance.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, properties, {});
}
exports.sendTelemetryErrorEvent = sendTelemetryErrorEvent;
//# sourceMappingURL=telemetry.js.map