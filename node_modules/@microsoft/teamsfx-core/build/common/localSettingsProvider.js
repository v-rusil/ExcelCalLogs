// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalSettingsProvider = exports.localSettingsFileName = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localSettingsConstants_1 = require("./localSettingsConstants");
exports.localSettingsFileName = "localSettings.json";
const crypto = "crypto";
class LocalSettingsProvider {
    constructor(workspaceFolder) {
        this.localSettingsFilePath = `${workspaceFolder}/.${teamsfx_api_1.ConfigFolderName}/${teamsfx_api_1.InputConfigsFolderName}/${exports.localSettingsFileName}`;
    }
    init(includeFrontend, includeBackend, includeBotOrMessageExtension, includeSimpleAuth = false, includeAAD = true) {
        // initialize Teams app related config for local debug.
        const teamsAppLocalConfig = new teamsfx_api_1.ConfigMap();
        teamsAppLocalConfig.set(localSettingsConstants_1.LocalSettingsTeamsAppKeys.TenantId, "");
        teamsAppLocalConfig.set(localSettingsConstants_1.LocalSettingsTeamsAppKeys.TeamsAppId, "");
        const localSettings = {
            teamsApp: teamsAppLocalConfig,
        };
        if (includeAAD) {
            localSettings.auth = this.initAuth(includeSimpleAuth);
        }
        // initialize frontend and simple auth local settings.
        if (includeFrontend) {
            localSettings.frontend = this.initFrontend();
        }
        // initialize backend local settings.
        if (includeBackend) {
            localSettings.backend = this.initBackend();
        }
        // initialize bot local settings.
        if (includeBotOrMessageExtension) {
            localSettings.bot = this.initBot();
        }
        return localSettings;
    }
    initV2(includeFrontend, includeBackend, includeBotOrMessageExtension, includeSimpleAuth = false, includeAAD = true) {
        const localSettings = {
            teamsApp: {
                [localSettingsConstants_1.LocalSettingsTeamsAppKeys.TenantId]: "",
                [localSettingsConstants_1.LocalSettingsTeamsAppKeys.TeamsAppId]: "",
            },
        };
        if (includeAAD) {
            localSettings.auth = this.initAuth(includeSimpleAuth).toJSON();
        }
        // initialize frontend and simple auth local settings.
        if (includeFrontend) {
            localSettings.frontend = this.initFrontend().toJSON();
        }
        // initialize backend local settings.
        if (includeBackend) {
            localSettings.backend = this.initBackend().toJSON();
        }
        // initialize bot local settings.
        if (includeBotOrMessageExtension) {
            localSettings.bot = this.initBot().toJSON();
        }
        return localSettings;
    }
    incrementalInitV2(localSettingsJson, addBackaned, addBot, addFrontend, addAad = true, addSimpleAuth = false) {
        const localSettings = this.convertToLocalSettings(localSettingsJson);
        if (!localSettings.backend && addBackaned) {
            localSettings.backend = this.initBackend();
        }
        if (!localSettings.bot && addBot) {
            localSettings.bot = this.initBot();
        }
        if (!localSettings.frontend && addFrontend) {
            localSettings.frontend = this.initFrontend();
        }
        if (!localSettings.auth && addAad) {
            localSettings.auth = this.initAuth(addSimpleAuth);
        }
        return this.convertToLocalSettingsJson(localSettings);
    }
    async load(cryptoProvider) {
        if (await fs.pathExists(this.localSettingsFilePath)) {
            const localSettingsJson = await fs.readJson(this.localSettingsFilePath);
            const localSettings = {
                teamsApp: teamsfx_api_1.ConfigMap.fromJSON(localSettingsJson.teamsApp),
                auth: teamsfx_api_1.ConfigMap.fromJSON(localSettingsJson.auth),
                frontend: teamsfx_api_1.ConfigMap.fromJSON(localSettingsJson.frontend),
                backend: teamsfx_api_1.ConfigMap.fromJSON(localSettingsJson.backend),
                bot: teamsfx_api_1.ConfigMap.fromJSON(localSettingsJson.bot),
            };
            if (localSettings && cryptoProvider) {
                this.decryptLocalSettings(localSettings, cryptoProvider);
            }
            return localSettings;
        }
        else {
            return undefined;
        }
    }
    async loadV2(cryptoProvider, includeAAD) {
        if (await fs.pathExists(this.localSettingsFilePath)) {
            const localSettingsJson = await fs.readJson(this.localSettingsFilePath);
            if (localSettingsJson && cryptoProvider) {
                const localSettings = this.convertToLocalSettings(localSettingsJson);
                this.decryptLocalSettings(localSettings, cryptoProvider);
                // TODO: Add auth part when scaffolding
                // This part will add auth in localSettings when AAD plugin exists
                // Will remove these when auth can be added through command
                if (includeAAD && !localSettings.auth) {
                    localSettings.auth = new teamsfx_api_1.ConfigMap();
                }
                return this.convertToLocalSettingsJson(localSettings);
            }
            return localSettingsJson;
        }
        else {
            return undefined;
        }
    }
    decryptLocalSettings(localSettings, cryptoProvider) {
        if (localSettings.auth) {
            if (localSettings.auth.get(localSettingsConstants_1.LocalSettingsEncryptKeys.ClientSecret) &&
                localSettings.auth.get(localSettingsConstants_1.LocalSettingsEncryptKeys.ClientSecret).startsWith(crypto)) {
                const decryptedResult = cryptoProvider.decrypt(localSettings.auth.get(localSettingsConstants_1.LocalSettingsEncryptKeys.ClientSecret));
                if (decryptedResult.isOk()) {
                    localSettings.auth.set(localSettingsConstants_1.LocalSettingsEncryptKeys.ClientSecret, decryptedResult.value);
                }
            }
            if (localSettings.auth.get(localSettingsConstants_1.LocalSettingsEncryptKeys.SimpleAuthEnvironmentVariableParams) &&
                localSettings.auth
                    .get(localSettingsConstants_1.LocalSettingsEncryptKeys.SimpleAuthEnvironmentVariableParams)
                    .startsWith(crypto)) {
                const decryptedResult = cryptoProvider.decrypt(localSettings.auth.get(localSettingsConstants_1.LocalSettingsEncryptKeys.SimpleAuthEnvironmentVariableParams));
                if (decryptedResult.isOk()) {
                    localSettings.auth.set(localSettingsConstants_1.LocalSettingsEncryptKeys.SimpleAuthEnvironmentVariableParams, decryptedResult.value);
                }
            }
        }
        if (localSettings.bot) {
            if (localSettings.bot.get(localSettingsConstants_1.LocalSettingsEncryptKeys.BotPassword) &&
                localSettings.bot.get(localSettingsConstants_1.LocalSettingsEncryptKeys.BotPassword).startsWith(crypto)) {
                const decryptedResult = cryptoProvider.decrypt(localSettings.bot.get(localSettingsConstants_1.LocalSettingsEncryptKeys.BotPassword));
                if (decryptedResult.isOk()) {
                    localSettings.bot.set(localSettingsConstants_1.LocalSettingsEncryptKeys.BotPassword, decryptedResult.value);
                }
            }
        }
    }
    async save(localSettings, cryptoProvider) {
        await fs.createFile(this.localSettingsFilePath);
        if (cryptoProvider) {
            if (localSettings.auth) {
                if (localSettings.auth.get(localSettingsConstants_1.LocalSettingsEncryptKeys.ClientSecret)) {
                    const encryptedSecret = cryptoProvider.encrypt(localSettings.auth.get(localSettingsConstants_1.LocalSettingsEncryptKeys.ClientSecret));
                    if (encryptedSecret.isOk()) {
                        localSettings.auth.set(localSettingsConstants_1.LocalSettingsEncryptKeys.ClientSecret, encryptedSecret.value);
                    }
                }
                if (localSettings.auth.get(localSettingsConstants_1.LocalSettingsEncryptKeys.SimpleAuthEnvironmentVariableParams)) {
                    const encryptedSecret = cryptoProvider.encrypt(localSettings.auth.get(localSettingsConstants_1.LocalSettingsEncryptKeys.SimpleAuthEnvironmentVariableParams));
                    if (encryptedSecret.isOk()) {
                        localSettings.auth.set(localSettingsConstants_1.LocalSettingsEncryptKeys.SimpleAuthEnvironmentVariableParams, encryptedSecret.value);
                    }
                }
            }
            if (localSettings.bot && localSettings.bot.get(localSettingsConstants_1.LocalSettingsEncryptKeys.BotPassword)) {
                const encryptedSecret = cryptoProvider.encrypt(localSettings.bot.get(localSettingsConstants_1.LocalSettingsEncryptKeys.BotPassword));
                if (encryptedSecret.isOk()) {
                    localSettings.bot.set(localSettingsConstants_1.LocalSettingsEncryptKeys.BotPassword, encryptedSecret.value);
                }
            }
        }
        await fs.writeFile(this.localSettingsFilePath, JSON.stringify(localSettings, null, 4));
    }
    async saveJson(localSettingsJson, cryptoProvider) {
        const localSettings = this.convertToLocalSettings(localSettingsJson);
        await this.save(localSettings, cryptoProvider);
        return this.convertToLocalSettingsJson(localSettings);
    }
    convertToLocalSettings(localSettingsJson) {
        const localSettings = {
            teamsApp: teamsfx_api_1.ConfigMap.fromJSON(localSettingsJson.teamsApp),
            auth: teamsfx_api_1.ConfigMap.fromJSON(localSettingsJson.auth),
            frontend: teamsfx_api_1.ConfigMap.fromJSON(localSettingsJson.frontend),
            backend: teamsfx_api_1.ConfigMap.fromJSON(localSettingsJson.backend),
            bot: teamsfx_api_1.ConfigMap.fromJSON(localSettingsJson.bot),
        };
        return localSettings;
    }
    convertToLocalSettingsJson(localSettings) {
        var _a, _b;
        const localSettingsJson = {
            teamsApp: (_a = localSettings.teamsApp) === null || _a === void 0 ? void 0 : _a.toJSON(),
        };
        if (localSettings.auth) {
            localSettingsJson["auth"] = (_b = localSettings.auth) === null || _b === void 0 ? void 0 : _b.toJSON();
        }
        if (localSettings.frontend) {
            localSettingsJson["frontend"] = localSettings.frontend.toJSON();
        }
        if (localSettings.backend) {
            localSettingsJson["backend"] = localSettings.backend.toJSON();
        }
        if (localSettings.bot) {
            localSettingsJson["bot"] = localSettings.bot.toJSON();
        }
        return localSettingsJson;
    }
    initAuth(includeSimpleAuth = false) {
        // simple auth is only required by frontend
        const authLocalConfig = new teamsfx_api_1.ConfigMap();
        const keys = Object.values(localSettingsConstants_1.LocalSettingsAuthKeys);
        for (const key of keys) {
            authLocalConfig.set(key, "");
        }
        // If simple auth is activated, add simple auth related configs.
        if (includeSimpleAuth) {
            const simpleAuthKeys = Object.values(localSettingsConstants_1.LocalSettingsSimpleAuthKeys);
            for (const key of simpleAuthKeys) {
                authLocalConfig.set(key, "");
            }
        }
        return authLocalConfig;
    }
    initFrontend() {
        const frontendLocalConfig = new teamsfx_api_1.ConfigMap();
        frontendLocalConfig.set(localSettingsConstants_1.LocalSettingsFrontendKeys.Browser, "none");
        frontendLocalConfig.set(localSettingsConstants_1.LocalSettingsFrontendKeys.Https, true);
        frontendLocalConfig.set(localSettingsConstants_1.LocalSettingsFrontendKeys.SslCertFile, "");
        frontendLocalConfig.set(localSettingsConstants_1.LocalSettingsFrontendKeys.SslKeyFile, "");
        frontendLocalConfig.set(localSettingsConstants_1.LocalSettingsFrontendKeys.TabDomain, "");
        frontendLocalConfig.set(localSettingsConstants_1.LocalSettingsFrontendKeys.TabEndpoint, "");
        frontendLocalConfig.set(localSettingsConstants_1.LocalSettingsFrontendKeys.TabIndexPath, "");
        return frontendLocalConfig;
    }
    initBackend() {
        const backendLocalConfig = new teamsfx_api_1.ConfigMap();
        const keys = Object.values(localSettingsConstants_1.LocalSettingsBackendKeys);
        for (const key of keys) {
            backendLocalConfig.set(key, "");
        }
        return backendLocalConfig;
    }
    initBot() {
        const botLocalConfig = new teamsfx_api_1.ConfigMap();
        const keys = Object.values(localSettingsConstants_1.LocalSettingsBotKeys);
        for (const key of keys) {
            botLocalConfig.set(key, "");
        }
        return botLocalConfig;
    }
}
exports.LocalSettingsProvider = LocalSettingsProvider;
//# sourceMappingURL=localSettingsProvider.js.map