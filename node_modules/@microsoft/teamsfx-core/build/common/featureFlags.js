"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOfficeAddinEnabled = exports.isTDPIntegrationEnabled = exports.isSPFxMultiTabEnabled = exports.isCLIDotNetEnabled = exports.isPreviewFeaturesEnabled = exports.isBotNotificationEnabled = exports.initializePreviewFeatureFlags = exports.isFeatureFlagEnabled = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const constants_1 = require("./constants");
const tools_1 = require("./tools");
// Determine whether feature flag is enabled based on environment variable setting
function isFeatureFlagEnabled(featureFlagName, defaultValue = false) {
    const flag = process.env[featureFlagName];
    if (flag === undefined) {
        return defaultValue; // allows consumer to set a default value when environment variable not set
    }
    else {
        return flag === "1" || flag.toLowerCase() === "true"; // can enable feature flag by set environment variable value to "1" or "true"
    }
}
exports.isFeatureFlagEnabled = isFeatureFlagEnabled;
/**
 * Update all preview feature flags.
 */
function initializePreviewFeatureFlags() {
    if (isPreviewFeaturesEnabled()) {
        process.env[constants_1.FeatureFlagName.BotNotification] = "true";
        process.env[constants_1.FeatureFlagName.M365App] = "true";
        process.env[constants_1.FeatureFlagName.AadManifest] = "true";
        process.env[constants_1.FeatureFlagName.ApiConnect] = "true";
        process.env[constants_1.FeatureFlagName.DeployManifest] = "true";
    }
}
exports.initializePreviewFeatureFlags = initializePreviewFeatureFlags;
function isBotNotificationEnabled() {
    return isFeatureFlagEnabled(constants_1.FeatureFlagName.BotNotification, false);
}
exports.isBotNotificationEnabled = isBotNotificationEnabled;
function isPreviewFeaturesEnabled() {
    return true;
}
exports.isPreviewFeaturesEnabled = isPreviewFeaturesEnabled;
function isCLIDotNetEnabled() {
    return isFeatureFlagEnabled(constants_1.FeatureFlagName.CLIDotNet, false);
}
exports.isCLIDotNetEnabled = isCLIDotNetEnabled;
function isSPFxMultiTabEnabled() {
    return true;
}
exports.isSPFxMultiTabEnabled = isSPFxMultiTabEnabled;
function isTDPIntegrationEnabled() {
    return tools_1.isV3Enabled();
}
exports.isTDPIntegrationEnabled = isTDPIntegrationEnabled;
function isOfficeAddinEnabled() {
    return isFeatureFlagEnabled(constants_1.FeatureFlagName.OfficeAddin, false);
}
exports.isOfficeAddinEnabled = isOfficeAddinEnabled;
//# sourceMappingURL=featureFlags.js.map