export declare type InnerError = HttpError | Error | unknown;
export declare type HttpError = {
    response: {
        status?: number;
        data?: {
            errorMessage?: string;
            error?: {
                code?: string;
                message?: string;
            };
        };
    };
};
export declare class CommonHostingError extends Error {
    name: string;
    details: [string, string];
    suggestions: string[];
    innerError?: InnerError;
    constructor(name: string, details: [string, string], innerError?: InnerError, suggestions?: string[]);
    genMessage(): string;
    genDisplayMessage(): string;
}
export declare class PreconditionError extends CommonHostingError {
    constructor(message: [string, string], suggestions: string[]);
}
export declare class MessageEndpointUpdatingError extends CommonHostingError {
    constructor(endpoint: string, innerError?: InnerError);
}
export declare class ProvisionError extends CommonHostingError {
    constructor(resource: string, innerError?: InnerError);
}
export declare class ListPublishingCredentialsError extends CommonHostingError {
    constructor(innerError?: InnerError);
}
export declare class ZipDeployError extends CommonHostingError {
    constructor(innerError?: InnerError);
}
export declare class DeployStatusError extends CommonHostingError {
    constructor(innerError?: InnerError);
}
export declare class DeployTimeoutError extends CommonHostingError {
    constructor();
}
export declare class RestartWebAppError extends CommonHostingError {
    constructor(innerError?: InnerError);
}
//# sourceMappingURL=hostingError.d.ts.map