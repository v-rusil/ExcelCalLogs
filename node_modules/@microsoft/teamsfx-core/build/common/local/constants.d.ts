export declare class FolderName {
    static readonly Frontend = "tabs";
    static readonly Bot = "bot";
    static readonly Function = "api";
    static readonly SPFx = "SPFx";
    static readonly VideoFilter = "app";
}
export declare const baseNpmInstallCommand = "npm install";
export declare const defaultNpmInstallArg = "--no-audit";
export declare const npmInstallCommand: string;
export declare const LocalEnvAuthKeys: Readonly<{
    ClientId: string;
    ClientSecret: string;
    IdentifierUri: string;
    AadMetadataAddress: string;
    OauthAuthority: string;
    TabEndpoint: string;
    AllowedAppIds: string;
    Urls: string;
    ServicePath: string;
}>;
export declare const LocalEnvBackendKeys: Readonly<{
    WebJobsStorage: string;
    FuncWorkerRuntime: string;
    AuthorityHost: string;
    TenantId: string;
    ClientId: string;
    ClientSecret: string;
    SqlEndpoint: string;
    SqlDbName: string;
    SqlUserName: string;
    SqlPassword: string;
    IdentityId: string;
    ApiEndpoint: string;
    ApplicationIdUri: string;
    AllowedAppIds: string;
}>;
export declare const LocalEnvBotKeys: Readonly<{
    BotId: string;
    BotPassword: string;
    ClientId: string;
    ClientSecret: string;
    TenantID: string;
    OauthAuthority: string;
    LoginEndpoint: string;
    SqlEndpoint: string;
    SqlDbName: string;
    SqlUserName: string;
    SqlPassword: string;
    IdentityId: string;
    ApiEndpoint: string;
    ApplicationIdUri: string;
}>;
export declare const LocalEnvCertKeys: Readonly<{
    SslCrtFile: string;
    SslKeyFile: string;
}>;
export declare const LocalEnvFrontendKeys: Readonly<{
    Browser: string;
    Https: string;
    Port: string;
    TeamsFxEndpoint: string;
    LoginUrl: string;
    FuncEndpoint: string;
    FuncName: string;
    ClientId: string;
}>;
export declare class LocalDebugCertificate {
    static readonly CertFileName: string;
    static readonly KeyFileName: string;
    static readonly FriendlyName: string;
}
export declare const BotHostTypeName = "host-type";
export declare const BotHostTypes: Readonly<{
    AppService: string;
    AzureFunctions: string;
}>;
export declare const BotCapabilities = "capabilities";
export declare const TaskCommand: Readonly<{
    checkPrerequisites: string;
    npmInstall: string;
    startLocalTunnel: string;
    setUpTab: string;
    setUpBot: string;
    setUpSSO: string;
    prepareManifest: string;
    provision: string;
    deploy: string;
}>;
export declare const TaskOverallLabel: Readonly<{
    NextDefault: string;
    NextM365: string;
    NextSPFx: string;
    TransparentDefault: string;
    TransparentM365: string;
}>;
export declare const TaskLabel: Readonly<{
    PrerequisiteCheck: string;
    InstallNpmPackages: string;
    StartLocalTunnel: string;
    SetUpTab: string;
    SetUpBot: string;
    SetUpSSO: string;
    PrepareManifest: string;
    InstallAzureFuncBindingExt: string;
    StartServices: string;
    StartFrontend: string;
    StartBackend: string;
    WatchBackend: string;
    WatchBot: string;
    StartBot: string;
    StartAzuriteEmulator: string;
    InstallAppInTeams: string;
    GulpTrustDevCert: string;
    GulpServe: string;
}>;
export declare const TaskDefaultValue: Readonly<{
    checkPrerequisites: {
        ports: {
            tabService: number;
            backendService: number;
            backendDebug: number;
            botService: number;
            botDebug: number;
            spfxService: number;
        };
    };
    npmInstall: {
        npmInstallArgs: string[];
    };
    startLocalTunnel: {
        ngrokArgs: string;
    };
    setUpTab: {
        baseUrl: string;
    };
    setUpBot: {
        botMessagingEndpoint: string;
    };
}>;
export declare const Prerequisite: Readonly<{
    nodejs: string;
    m365Account: string;
    devCert: string;
    func: string;
    ngrok: string;
    dotnet: string;
    portOccupancy: string;
    vxTestApp: string;
}>;
//# sourceMappingURL=constants.d.ts.map