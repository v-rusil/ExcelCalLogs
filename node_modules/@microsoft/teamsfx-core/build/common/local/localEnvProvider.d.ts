export interface LocalEnvs {
    teamsfxLocalEnvs: {
        [key: string]: string;
    };
    customizedLocalEnvs: {
        [name: string]: string;
    };
}
export declare const EnvKeysFrontend: Readonly<{
    Browser: string;
    Https: string;
    Port: string;
    SslCrtFile: string;
    SslKeyFile: string;
    TeamsFxEndpoint: string;
    LoginUrl: string;
    FuncEndpoint: string;
    FuncName: string;
    ClientId: string;
}>;
export declare const EnvKeysBackend: Readonly<{
    WebJobsStorage: string;
    FuncWorkerRuntime: string;
    AuthorityHost: string;
    TenantId: string;
    ClientId: string;
    ClientSecret: string;
    ApiEndpoint: string;
    ApplicationIdUri: string;
    AllowedAppIds: string;
}>;
export declare const EnvKeysBackendCustom: Readonly<{
    SqlEndpoint: string;
    SqlDbName: string;
    SqlUserName: string;
    SqlPassword: string;
}>;
export declare const EnvKeysBot: Readonly<{
    BotId: string;
    BotPassword: string;
    ClientId: string;
    ClientSecret: string;
    TenantID: string;
    OauthAuthority: string;
    LoginEndpoint: string;
    ApiEndpoint: string;
    ApplicationIdUri: string;
}>;
export declare const EnvKeysBotCustom: Readonly<{
    SqlEndpoint: string;
    SqlDbName: string;
    SqlUserName: string;
    SqlPassword: string;
}>;
export declare class LocalEnvProvider {
    static readonly LocalEnvFileName: string;
    private readonly projectRoot;
    constructor(workspaceFolder: string);
    loadFrontendLocalEnvs(includeBackend: boolean, includeAuth: boolean): Promise<LocalEnvs>;
    loadBackendLocalEnvs(): Promise<LocalEnvs>;
    loadBotLocalEnvs(): Promise<LocalEnvs>;
    saveLocalEnvs(frontendEnvs: LocalEnvs | undefined, backendEnvs: LocalEnvs | undefined, botEnvs: LocalEnvs | undefined): Promise<void>;
    initFrontendLocalEnvs(includeBackend: boolean, includeAuth: boolean): LocalEnvs;
    initBackendLocalEnvs(): LocalEnvs;
    initBotLocalEnvs(): LocalEnvs;
    private loadLocalEnvFile;
    private saveLocalEnvFile;
}
//# sourceMappingURL=localEnvProvider.d.ts.map