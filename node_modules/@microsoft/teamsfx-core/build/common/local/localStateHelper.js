// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToLocalEnvs = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const os = tslib_1.__importStar(require("os"));
const constants_1 = require("../constants");
const localStateConstants_1 = require("../localStateConstants");
const tools_1 = require("../tools");
const constants_2 = require("./constants");
const localEnvProvider_1 = require("./localEnvProvider");
const projectSettingsHelper_1 = require("./projectSettingsHelper");
function getAuthServiceFolder() {
    return `${os.homedir()}/.${teamsfx_api_1.ConfigFolderName}/localauth`;
}
function appendEnvWithPrefix(source, target, prefix) {
    for (const key of Object.keys(source)) {
        const prefixKey = `${prefix}${key}`;
        if (target[prefixKey] === undefined || target[prefixKey] === "") {
            // only append and do not override
            target[prefixKey] = source[key];
        }
    }
}
// Note: this may be called before `localDebug` lifecycle, so do not throw if any value is missing
// TODO: mark this as obsolete after supporting new start command.
async function convertToLocalEnvs(projectPath, projectSettings, envInfo, logger) {
    const localState = envInfo === null || envInfo === void 0 ? void 0 : envInfo.state;
    const localConfig = envInfo === null || envInfo === void 0 ? void 0 : envInfo.config;
    const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(projectSettings);
    const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(projectSettings);
    const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSettings);
    const includeAAD = projectSettingsHelper_1.ProjectSettingsHelper.includeAAD(projectSettings);
    const includeSimpleAuth = projectSettingsHelper_1.ProjectSettingsHelper.includeSimpleAuth(projectSettings);
    // prepare config maps
    const authConfigs = teamsfx_api_1.ConfigMap.fromJSON(localState === null || localState === void 0 ? void 0 : localState[constants_1.ResourcePlugins.Aad]);
    const backendConfigs = teamsfx_api_1.ConfigMap.fromJSON(localState === null || localState === void 0 ? void 0 : localState[constants_1.ResourcePlugins.Function]);
    const botConfigs = teamsfx_api_1.ConfigMap.fromJSON(localState === null || localState === void 0 ? void 0 : localState[constants_1.ResourcePlugins.Bot]);
    const frontendConfigs = teamsfx_api_1.ConfigMap.fromJSON(localState === null || localState === void 0 ? void 0 : localState[constants_1.ResourcePlugins.FrontendHosting]);
    const appStudioConfigs = teamsfx_api_1.ConfigMap.fromJSON(localState === null || localState === void 0 ? void 0 : localState[constants_1.ResourcePlugins.AppStudio]);
    const simpleAuthConfigs = teamsfx_api_1.ConfigMap.fromJSON(localState === null || localState === void 0 ? void 0 : localState[constants_1.ResourcePlugins.SimpleAuth]);
    // get config for local debug
    const clientId = authConfigs === null || authConfigs === void 0 ? void 0 : authConfigs.get(localStateConstants_1.LocalStateAuthKeys.ClientId);
    const clientSecret = authConfigs === null || authConfigs === void 0 ? void 0 : authConfigs.get(localStateConstants_1.LocalStateAuthKeys.ClientSecret);
    const applicationIdUri = authConfigs === null || authConfigs === void 0 ? void 0 : authConfigs.get(localStateConstants_1.LocalStateAuthKeys.ApplicationIdUris);
    const teamsAppTenantId = authConfigs === null || authConfigs === void 0 ? void 0 : authConfigs.get(localStateConstants_1.LocalStateAuthKeys.TenantId);
    const localAuthEndpoint = simpleAuthConfigs === null || simpleAuthConfigs === void 0 ? void 0 : simpleAuthConfigs.get(localStateConstants_1.LocalStateSimpleAuthKeys.Endpoint);
    const localTabEndpoint = frontendConfigs === null || frontendConfigs === void 0 ? void 0 : frontendConfigs.get(localStateConstants_1.LocalStateFrontendKeys.Endpoint);
    const localFuncEndpoint = backendConfigs === null || backendConfigs === void 0 ? void 0 : backendConfigs.get(localStateConstants_1.LocalStateBackendKeys.FunctionEndpoint);
    const localEnvs = {};
    if (includeFrontend) {
        localEnvs[constants_2.LocalEnvFrontendKeys.Browser] = frontendConfigs === null || frontendConfigs === void 0 ? void 0 : frontendConfigs.get(localStateConstants_1.LocalStateFrontendKeys.Browser);
        if (localEnvs[constants_2.LocalEnvFrontendKeys.Browser] === undefined) {
            localEnvs[constants_2.LocalEnvFrontendKeys.Browser] = "none";
        }
        localEnvs[constants_2.LocalEnvFrontendKeys.Https] = frontendConfigs === null || frontendConfigs === void 0 ? void 0 : frontendConfigs.get(localStateConstants_1.LocalStateFrontendKeys.Https);
        if (localEnvs[constants_2.LocalEnvFrontendKeys.Https] === undefined) {
            localEnvs[constants_2.LocalEnvFrontendKeys.Https] = "true";
        }
        localEnvs[constants_2.LocalEnvFrontendKeys.Port] = "53000";
        if (includeAAD) {
            // frontend local envs
            localEnvs[constants_2.LocalEnvFrontendKeys.LoginUrl] = `${localTabEndpoint}/auth-start.html`;
            localEnvs[constants_2.LocalEnvFrontendKeys.ClientId] = clientId;
        }
        if (includeSimpleAuth) {
            // frontend local envs
            localEnvs[constants_2.LocalEnvFrontendKeys.TeamsFxEndpoint] = localAuthEndpoint;
            // auth local envs (auth is only required by frontend)
            localEnvs[constants_2.LocalEnvAuthKeys.Urls] = localAuthEndpoint;
            localEnvs[constants_2.LocalEnvAuthKeys.ClientId] = clientId;
            localEnvs[constants_2.LocalEnvAuthKeys.ClientSecret] = clientSecret;
            localEnvs[constants_2.LocalEnvAuthKeys.IdentifierUri] = applicationIdUri;
            localEnvs[constants_2.LocalEnvAuthKeys.AadMetadataAddress] = `https://login.microsoftonline.com/${teamsAppTenantId}/v2.0/.well-known/openid-configuration`;
            localEnvs[constants_2.LocalEnvAuthKeys.OauthAuthority] = `https://login.microsoftonline.com/${teamsAppTenantId}`;
            localEnvs[constants_2.LocalEnvAuthKeys.TabEndpoint] = localTabEndpoint;
            localEnvs[constants_2.LocalEnvAuthKeys.AllowedAppIds] = tools_1.getAllowedAppIds().join(";");
            localEnvs[constants_2.LocalEnvAuthKeys.ServicePath] = getAuthServiceFolder();
        }
        if (includeBackend) {
            localEnvs[constants_2.LocalEnvFrontendKeys.FuncEndpoint] = localFuncEndpoint;
            localEnvs[constants_2.LocalEnvFrontendKeys.FuncName] = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.defaultFunctionName;
            localEnvs[constants_2.LocalEnvBackendKeys.FuncWorkerRuntime] = "node";
            // function local envs
            localEnvs[constants_2.LocalEnvBackendKeys.ClientId] = clientId;
            localEnvs[constants_2.LocalEnvBackendKeys.ClientSecret] = clientSecret;
            localEnvs[constants_2.LocalEnvBackendKeys.AuthorityHost] = "https://login.microsoftonline.com";
            localEnvs[constants_2.LocalEnvBackendKeys.TenantId] = teamsAppTenantId;
            localEnvs[constants_2.LocalEnvBackendKeys.ApiEndpoint] = localFuncEndpoint;
            localEnvs[constants_2.LocalEnvBackendKeys.ApplicationIdUri] = applicationIdUri;
            localEnvs[constants_2.LocalEnvBackendKeys.AllowedAppIds] = tools_1.getAllowedAppIds().join(";");
        }
        if (frontendConfigs &&
            frontendConfigs.get(localStateConstants_1.LocalStateFrontendKeys.SslCertFile) &&
            frontendConfigs.get(localStateConstants_1.LocalStateFrontendKeys.SslKeyFile)) {
            localEnvs[constants_2.LocalEnvCertKeys.SslCrtFile] = frontendConfigs.get(localStateConstants_1.LocalStateFrontendKeys.SslCertFile);
            localEnvs[constants_2.LocalEnvCertKeys.SslKeyFile] = frontendConfigs.get(localStateConstants_1.LocalStateFrontendKeys.SslKeyFile);
        }
        if ((localConfig === null || localConfig === void 0 ? void 0 : localConfig.frontend) &&
            localConfig.frontend.sslCertFile &&
            localConfig.frontend.sslKeyFile) {
            localEnvs[constants_2.LocalEnvCertKeys.SslCrtFile] = localConfig.frontend.sslCertFile;
            localEnvs[constants_2.LocalEnvCertKeys.SslKeyFile] = localConfig.frontend.sslKeyFile;
        }
    }
    if (includeBot) {
        // bot local env
        localEnvs[constants_2.LocalEnvBotKeys.BotId] = botConfigs === null || botConfigs === void 0 ? void 0 : botConfigs.get(localStateConstants_1.LocalStateBotKeys.BotId);
        localEnvs[constants_2.LocalEnvBotKeys.BotPassword] = botConfigs === null || botConfigs === void 0 ? void 0 : botConfigs.get(localStateConstants_1.LocalStateBotKeys.BotPassword);
        localEnvs[constants_2.LocalEnvBotKeys.ClientId] = clientId;
        localEnvs[constants_2.LocalEnvBotKeys.ClientSecret] = clientSecret;
        localEnvs[constants_2.LocalEnvBotKeys.TenantID] = teamsAppTenantId;
        localEnvs[constants_2.LocalEnvBotKeys.OauthAuthority] = "https://login.microsoftonline.com";
        localEnvs[constants_2.LocalEnvBotKeys.LoginEndpoint] = `${botConfigs === null || botConfigs === void 0 ? void 0 : botConfigs.get(localStateConstants_1.LocalStateBotKeys.BotEndpoint)}/auth-start.html`;
        localEnvs[constants_2.LocalEnvBotKeys.ApplicationIdUri] = applicationIdUri;
        if (includeBackend) {
            localEnvs[constants_2.LocalEnvBackendKeys.ApiEndpoint] = localFuncEndpoint;
        }
    }
    // TODO: This is to load .env.teamsfx.local for each component. Remove this after fully supporting custom local debug.
    try {
        const localEnvProvider = new localEnvProvider_1.LocalEnvProvider(projectPath);
        if (includeFrontend) {
            const customEnvs = (await localEnvProvider.loadFrontendLocalEnvs(includeBackend, includeAAD))
                .customizedLocalEnvs;
            appendEnvWithPrefix(customEnvs, localEnvs, "FRONTEND_");
        }
        if (includeBackend) {
            const customEnvs = (await localEnvProvider.loadBackendLocalEnvs()).customizedLocalEnvs;
            appendEnvWithPrefix(customEnvs, localEnvs, "BACKEND_");
        }
        if (includeBot) {
            const customEnvs = (await localEnvProvider.loadBotLocalEnvs()).customizedLocalEnvs;
            appendEnvWithPrefix(customEnvs, localEnvs, "BOT_");
        }
    }
    catch (error) {
        logger === null || logger === void 0 ? void 0 : logger.error(`Cannot load .env.teamsfx.local. ${error}`);
    }
    return localEnvs;
}
exports.convertToLocalEnvs = convertToLocalEnvs;
//# sourceMappingURL=localStateHelper.js.map