import { Json, LogProvider, ProjectSettings, TelemetryReporter, UserInteraction, v2 } from "@microsoft/teamsfx-api";
import { NpmInstallLogInfo } from "./npmLogHelper";
import { DepsType } from "../deps-checker/depsChecker";
import { LocalCertificate } from "./localCertificateManager";
import { LocalEnvProvider } from "../../component/debugHandler/localEnvProvider";
export declare class LocalEnvManager {
    private readonly logger;
    private readonly telemetry;
    private readonly ui;
    constructor(logger?: LogProvider, telemetry?: TelemetryReporter, ui?: UserInteraction);
    getActiveDependencies(projectSettings: ProjectSettings): Promise<DepsType[]>;
    getLocalDebugEnvs(projectPath: string, projectSettings: ProjectSettings, localSettings: Json | undefined, envInfo?: v2.EnvInfoV2): Promise<Record<string, string>>;
    getNpmInstallLogInfo(): Promise<NpmInstallLogInfo | undefined>;
    getPortsFromProject(projectPath: string, projectSettings: ProjectSettings): Promise<number[]>;
    getPortsInUse(ports: number[]): Promise<number[]>;
    getNgrokTunnelFromApi(webServiceUrl: string): Promise<{
        src: string;
        dist: string;
    } | undefined>;
    getLocalSettings(projectPath: string, cryptoOption?: {
        projectId: string;
    }): Promise<Json | undefined>;
    getLocalEnvInfo(projectPath: string, cryptoOption: {
        projectId: string;
    }): Promise<v2.EnvInfoV2 | undefined>;
    getProjectSettings(projectPath: string): Promise<ProjectSettings>;
    resolveLocalCertificate(workspacePath: string, trustDevCert: boolean, localEnvProvider?: LocalEnvProvider): Promise<LocalCertificate>;
    getTaskJson(projectPath: string): Promise<any>;
    private retry;
}
//# sourceMappingURL=localEnvManager.d.ts.map