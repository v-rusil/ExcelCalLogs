// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalEnvProvider = exports.EnvKeysBotCustom = exports.EnvKeysBot = exports.EnvKeysBackendCustom = exports.EnvKeysBackend = exports.EnvKeysFrontend = void 0;
const tslib_1 = require("tslib");
const dotenv = tslib_1.__importStar(require("dotenv"));
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const os = tslib_1.__importStar(require("os"));
const constants_1 = require("./constants");
exports.EnvKeysFrontend = Object.freeze({
    Browser: "BROWSER",
    Https: "HTTPS",
    Port: "PORT",
    SslCrtFile: "SSL_CRT_FILE",
    SslKeyFile: "SSL_KEY_FILE",
    TeamsFxEndpoint: "REACT_APP_TEAMSFX_ENDPOINT",
    LoginUrl: "REACT_APP_START_LOGIN_PAGE_URL",
    FuncEndpoint: "REACT_APP_FUNC_ENDPOINT",
    FuncName: "REACT_APP_FUNC_NAME",
    ClientId: "REACT_APP_CLIENT_ID",
});
exports.EnvKeysBackend = Object.freeze({
    WebJobsStorage: "AzureWebJobsStorage",
    FuncWorkerRuntime: "FUNCTIONS_WORKER_RUNTIME",
    AuthorityHost: "M365_AUTHORITY_HOST",
    TenantId: "M365_TENANT_ID",
    ClientId: "M365_CLIENT_ID",
    ClientSecret: "M365_CLIENT_SECRET",
    ApiEndpoint: "API_ENDPOINT",
    ApplicationIdUri: "M365_APPLICATION_ID_URI",
    AllowedAppIds: "ALLOWED_APP_IDS",
});
exports.EnvKeysBackendCustom = Object.freeze({
    SqlEndpoint: "SQL_ENDPOINT",
    SqlDbName: "SQL_DATABASE_NAME",
    SqlUserName: "SQL_USER_NAME",
    SqlPassword: "SQL_PASSWORD",
});
exports.EnvKeysBot = Object.freeze({
    BotId: "BOT_ID",
    BotPassword: "BOT_PASSWORD",
    ClientId: "M365_CLIENT_ID",
    ClientSecret: "M365_CLIENT_SECRET",
    TenantID: "M365_TENANT_ID",
    OauthAuthority: "M365_AUTHORITY_HOST",
    LoginEndpoint: "INITIATE_LOGIN_ENDPOINT",
    ApiEndpoint: "API_ENDPOINT",
    ApplicationIdUri: "M365_APPLICATION_ID_URI",
});
exports.EnvKeysBotCustom = Object.freeze({
    SqlEndpoint: "SQL_ENDPOINT",
    SqlDbName: "SQL_DATABASE_NAME",
    SqlUserName: "SQL_USER_NAME",
    SqlPassword: "SQL_PASSWORD",
});
// Manage local envs for multi-env project. For legacy supported one, see `localEnv.ts`.
class LocalEnvProvider {
    constructor(workspaceFolder) {
        this.projectRoot = workspaceFolder;
    }
    async loadFrontendLocalEnvs(includeBackend, includeAuth) {
        const envs = await this.loadLocalEnvFile(path.join(this.projectRoot, constants_1.FolderName.Frontend, LocalEnvProvider.LocalEnvFileName), Object.values(exports.EnvKeysFrontend));
        return envs !== null && envs !== void 0 ? envs : this.initFrontendLocalEnvs(includeBackend, includeAuth);
    }
    async loadBackendLocalEnvs() {
        const envs = await this.loadLocalEnvFile(path.join(this.projectRoot, constants_1.FolderName.Function, LocalEnvProvider.LocalEnvFileName), Object.values(exports.EnvKeysBackend));
        return envs !== null && envs !== void 0 ? envs : this.initBackendLocalEnvs();
    }
    async loadBotLocalEnvs() {
        const envs = await this.loadLocalEnvFile(path.join(this.projectRoot, constants_1.FolderName.Bot, LocalEnvProvider.LocalEnvFileName), Object.values(exports.EnvKeysBot));
        return envs !== null && envs !== void 0 ? envs : this.initBotLocalEnvs();
    }
    async saveLocalEnvs(frontendEnvs, backendEnvs, botEnvs) {
        if (frontendEnvs !== undefined) {
            await this.saveLocalEnvFile(path.join(this.projectRoot, constants_1.FolderName.Frontend), frontendEnvs);
        }
        if (backendEnvs !== undefined) {
            await this.saveLocalEnvFile(path.join(this.projectRoot, constants_1.FolderName.Function), backendEnvs);
        }
        if (botEnvs !== undefined) {
            await this.saveLocalEnvFile(path.join(this.projectRoot, constants_1.FolderName.Bot), botEnvs);
        }
    }
    initFrontendLocalEnvs(includeBackend, includeAuth) {
        const result = {
            teamsfxLocalEnvs: {},
            customizedLocalEnvs: {},
        };
        result.teamsfxLocalEnvs[exports.EnvKeysFrontend.Browser] = "none";
        result.teamsfxLocalEnvs[exports.EnvKeysFrontend.Https] = "true";
        result.teamsfxLocalEnvs[exports.EnvKeysFrontend.Port] = "53000";
        if (includeAuth) {
            result.teamsfxLocalEnvs[exports.EnvKeysFrontend.TeamsFxEndpoint] = "";
            result.teamsfxLocalEnvs[exports.EnvKeysFrontend.LoginUrl] = "";
            result.teamsfxLocalEnvs[exports.EnvKeysFrontend.ClientId] = "";
        }
        if (includeBackend) {
            result.teamsfxLocalEnvs[exports.EnvKeysFrontend.FuncEndpoint] = "";
            result.teamsfxLocalEnvs[exports.EnvKeysFrontend.FuncName] = "";
        }
        return result;
    }
    initBackendLocalEnvs() {
        const result = {
            teamsfxLocalEnvs: {},
            customizedLocalEnvs: {},
        };
        result.teamsfxLocalEnvs[exports.EnvKeysBackend.WebJobsStorage] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBackend.FuncWorkerRuntime] = "node";
        result.teamsfxLocalEnvs[exports.EnvKeysBackend.AuthorityHost] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBackend.TenantId] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBackend.ClientId] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBackend.ClientSecret] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBackend.ApiEndpoint] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBackend.ApplicationIdUri] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBackend.AllowedAppIds] = "";
        result.customizedLocalEnvs[exports.EnvKeysBackendCustom.SqlEndpoint] = "";
        result.customizedLocalEnvs[exports.EnvKeysBackendCustom.SqlDbName] = "";
        result.customizedLocalEnvs[exports.EnvKeysBackendCustom.SqlUserName] = "";
        result.customizedLocalEnvs[exports.EnvKeysBackendCustom.SqlPassword] = "";
        return result;
    }
    initBotLocalEnvs() {
        const result = {
            teamsfxLocalEnvs: {},
            customizedLocalEnvs: {},
        };
        result.teamsfxLocalEnvs[exports.EnvKeysBot.BotId] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBot.BotPassword] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBot.ClientId] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBot.ClientSecret] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBot.TenantID] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBot.OauthAuthority] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBot.LoginEndpoint] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBot.ApiEndpoint] = "";
        result.teamsfxLocalEnvs[exports.EnvKeysBot.ApplicationIdUri] = "";
        result.customizedLocalEnvs[exports.EnvKeysBotCustom.SqlEndpoint] = "";
        result.customizedLocalEnvs[exports.EnvKeysBotCustom.SqlDbName] = "";
        result.customizedLocalEnvs[exports.EnvKeysBotCustom.SqlUserName] = "";
        result.customizedLocalEnvs[exports.EnvKeysBotCustom.SqlPassword] = "";
        return result;
    }
    async loadLocalEnvFile(path, teamsfxKeys) {
        if (await fs.pathExists(path)) {
            const envs = dotenv.parse(await fs.readFile(path));
            const result = {
                teamsfxLocalEnvs: {},
                customizedLocalEnvs: {},
            };
            const entries = Object.entries(envs);
            for (const [key, value] of entries) {
                if (teamsfxKeys.includes(key)) {
                    result.teamsfxLocalEnvs[key] = value;
                }
                else {
                    result.customizedLocalEnvs[key] = value;
                }
            }
            return result;
        }
        else {
            return undefined;
        }
    }
    async saveLocalEnvFile(folder, envs) {
        await fs.ensureDir(folder);
        const envPath = path.join(folder, LocalEnvProvider.LocalEnvFileName);
        await fs.createFile(envPath);
        await fs.writeFile(envPath, `# TeamsFx will overwrite the following variable values when running debug${os.EOL}`);
        const teamsfxEntries = Object.entries(envs.teamsfxLocalEnvs);
        for (const [key, value] of teamsfxEntries) {
            await fs.appendFile(envPath, `${key}=${value}${os.EOL}`);
        }
        await fs.appendFile(envPath, `${os.EOL}# Following variables can be customized or you can add your owns${os.EOL}# FOO=BAR${os.EOL}`);
        const customizedEntries = Object.entries(envs.customizedLocalEnvs);
        for (const [key, value] of customizedEntries) {
            await fs.appendFile(envPath, `${key}=${value}${os.EOL}`);
        }
    }
}
exports.LocalEnvProvider = LocalEnvProvider;
LocalEnvProvider.LocalEnvFileName = ".env.teamsfx.local";
//# sourceMappingURL=localEnvProvider.js.map