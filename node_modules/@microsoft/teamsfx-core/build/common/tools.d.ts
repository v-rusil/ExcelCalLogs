/// <reference types="node" />
import { AzureAccountProvider, ConfigMap, FxError, Json, Result, SubscriptionInfo, UserInteraction, ProjectSettings, AzureSolutionSettings, v2, Void, Inputs, M365TokenProvider } from "@microsoft/teamsfx-api";
import { ExecOptions } from "child_process";
export declare const Executor: {
    execCommandAsync(command: string, options?: ExecOptions | undefined): Promise<{
        stdout: string | Buffer;
        stderr: string | Buffer;
    }>;
};
export declare function npmInstall(path: string): Promise<void>;
export declare function ensureUniqueFolder(folderPath: string): Promise<string>;
/**
 * Convert a `Map` to a Json recursively.
 * @param {Map} map to convert.
 * @returns {Json} converted Json.
 */
export declare function mapToJson(map?: Map<any, any>): Json;
/**
 * Convert an `Object` to a Map recursively
 * @param {Json} Json to convert.
 * @returns {Map} converted Json.
 */
export declare function objectToMap(o: Json): Map<any, any>;
/**
 * @param {Json} Json to convert.
 * @returns {Map} converted Json.
 */
export declare function objectToConfigMap(o?: Json): ConfigMap;
export declare const CryptoDataMatchers: Set<string>;
export declare const AzurePortalUrl = "https://portal.azure.com";
/**
 * Only data related to secrets need encryption.
 * @param key - the key name of data in user data file
 * @returns whether it needs encryption
 */
export declare function dataNeedEncryption(key: string): boolean;
export declare function separateSecretData(configJson: Json): Record<string, string>;
export declare function convertDotenvToEmbeddedJson(dict: Record<string, string>): Json;
export declare function replaceTemplateWithUserData(template: string, userData: Record<string, string>): string;
export declare function serializeDict(dict: Record<string, string>): string;
export declare const deepCopy: <T>(target: T) => T;
export declare function isUserCancelError(error: Error): boolean;
export declare function isCheckAccountError(error: Error): boolean;
export declare function askSubscription(azureAccountProvider: AzureAccountProvider, ui: UserInteraction, activeSubscriptionId?: string): Promise<Result<SubscriptionInfo, FxError>>;
export declare function getResourceGroupInPortal(subscriptionId?: string, tenantId?: string, resourceGroupName?: string): string | undefined;
export declare function isBicepEnvCheckerEnabled(): boolean;
export declare function isExistingTabAppEnabled(): boolean;
export declare function isAadManifestEnabled(): boolean;
export declare function isDeployManifestEnabled(): boolean;
export declare function isM365AppEnabled(): boolean;
export declare function isApiConnectEnabled(): boolean;
export declare function isV3Enabled(): boolean;
export declare function isMigrationV3Enabled(): boolean;
export declare function isVideoFilterEnabled(): boolean;
export declare function isAADEnabled(solutionSettings: AzureSolutionSettings | undefined): boolean;
export declare function canAddSso(projectSettings: ProjectSettings, returnError?: boolean): boolean | Result<Void, FxError>;
export declare function canAddApiConnection(solutionSettings?: AzureSolutionSettings): boolean;
export declare function canAddCICDWorkflows(inputs: Inputs, ctx: v2.Context): Promise<boolean>;
export declare function isYoCheckerEnabled(): boolean;
export declare function isGeneratorCheckerEnabled(): boolean;
export declare function getAppSPFxVersion(root: string): Promise<string | undefined>;
export declare function generateBicepFromFile(templateFilePath: string, context: any): Promise<string>;
export declare function compileHandlebarsTemplateString(templateString: string, context: any): string;
export declare function getAppDirectory(projectRoot: string): Promise<string>;
export declare function getStorageAccountNameFromResourceId(resourceId: string): string;
export declare function getSiteNameFromResourceId(resourceId: string): string;
export declare function getResourceGroupNameFromResourceId(resourceId: string): string;
export declare function getSubscriptionIdFromResourceId(resourceId: string): string;
export declare function parseFromResourceId(pattern: RegExp, resourceId: string): string;
export declare function waitSeconds(second: number): Promise<void>;
export declare function getUuid(): string;
export declare function isSPFxProject(projectSettings?: ProjectSettings): boolean;
export declare function isVideoFilterProject(projectPath: string): Promise<Result<boolean, FxError>>;
export declare function getHashedEnv(envName: string): string;
export declare function IsSimpleAuthEnabled(projectSettings: ProjectSettings | undefined): boolean;
/** Redact user content in "obj";
 *
 * DFS "obj" and "jsonSchema" together to redact the following things:
 * - properties that is not defined in jsonSchema
 * - the value of properties that is defined in jsonSchema, but the keys will remain
 *
 * Example:
 * Input:
 * ```
 *  obj = {
 *    "name": "some name",
 *    "user defined property": {
 *      "key1": "value1"
 *    }
 *  }
 *  jsonSchema = {
 *    "type": "object",
 *    "properties": {
 *      "name": { "type": "string" }
 *    }
 *  }
 * ```
 * Output:
 * ```
 *  {"name": null}
 * ```
 **/
export declare function redactObject(obj: unknown, jsonSchema: unknown, maxRecursionDepth?: number): unknown;
export declare function getAllowedAppIds(): string[];
export declare function getAllowedAppMaps(): Record<string, string>;
export declare function getSideloadingStatus(token: string): Promise<boolean | undefined>;
export declare function createV2Context(projectSettings: ProjectSettings): v2.Context;
export declare function undefinedName(objs: any[], names: string[]): string | undefined;
export declare function getPropertyByPath(obj: any, path: string, defaultValue?: string): any;
export declare const AppStudioScopes: string[];
export declare const AuthSvcScopes: string[];
export declare const GraphScopes: string[];
export declare const GraphReadUserScopes: string[];
export declare const SPFxScopes: (tenant: string) => string[];
export declare const AzureScopes: string[];
export declare function getSPFxTenant(graphToken: string): Promise<string>;
export declare function getSPFxToken(m365TokenProvider: M365TokenProvider): Promise<string | undefined>;
/**
 * Get and set regin for App Studio client
 * @param m365TokenProvider
 */
export declare function setRegion(authSvcToken: string): Promise<void>;
export declare function ConvertTokenToJson(token: string): Record<string, unknown>;
export declare function getFixedCommonProjectSettings(rootPath: string | undefined): {
    projectId: any;
    isFromSample?: undefined;
    programmingLanguage?: undefined;
    hostType?: undefined;
    isM365?: undefined;
} | {
    projectId: any;
    isFromSample: any;
    programmingLanguage: any;
    hostType: any;
    isM365: any;
} | undefined;
//# sourceMappingURL=tools.d.ts.map