"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Messages = void 0;
const localizeUtils_1 = require("../../localizeUtils");
exports.Messages = {
    // learnMoreButtonText: getLocalizedString("depChecker.learnMoreButtonText"),
    defaultErrorMessage: () => [
        localizeUtils_1.getDefaultString("error.depChecker.DefaultErrorMessage"),
        localizeUtils_1.getLocalizedString("error.depChecker.DefaultErrorMessage"),
    ],
    startInstallFunctionCoreTool: () => localizeUtils_1.getLocalizedString("depChecker.startInstallFunctionCoreTool"),
    finishInstallFunctionCoreTool: () => localizeUtils_1.getLocalizedString("depChecker.finishInstallFunctionCoreTool"),
    // needReplaceWithFuncCoreToolV3: () => getLocalizedString("depChecker.needReplaceWithFuncCoreToolV3"),
    needInstallFuncCoreTool: () => localizeUtils_1.getLocalizedString("depChecker.needInstallFuncCoreTool"),
    failToInstallFuncCoreTool: () => localizeUtils_1.getLocalizedString("depChecker.failToInstallFuncCoreTool"),
    failToValidateFuncCoreTool: () => localizeUtils_1.getLocalizedString("depChecker.failToValidateFuncCoreTool"),
    globalFuncNodeNotMatched: () => localizeUtils_1.getLocalizedString("depChecker.globalFuncNodeNotMatched"),
    portableFuncNodeNotMatched: () => localizeUtils_1.getLocalizedString("depChecker.portableFuncNodeNotMatched"),
    startInstallNgrok: () => localizeUtils_1.getLocalizedString("depChecker.startInstallNgrok"),
    finishInstallNgrok: () => localizeUtils_1.getLocalizedString("depChecker.finishInstallNgrok"),
    needInstallNgrok: () => localizeUtils_1.getLocalizedString("depChecker.needInstallNgrok"),
    failToInstallNgrok: () => localizeUtils_1.getLocalizedString("depChecker.failToInstallNgrok"),
    failToValidateNgrok: () => localizeUtils_1.getLocalizedString("depChecker.failToValidateNgrok"),
    downloadDotnet: () => localizeUtils_1.getLocalizedString("depChecker.downloadDotnet"),
    finishInstallDotnet: () => localizeUtils_1.getLocalizedString("depChecker.finishInstallDotnet"),
    useGlobalDotnet: () => localizeUtils_1.getLocalizedString("depChecker.useGlobalDotnet"),
    dotnetInstallStderr: () => localizeUtils_1.getLocalizedString("depChecker.dotnetInstallStderr"),
    dotnetInstallErrorCode: () => localizeUtils_1.getLocalizedString("depChecker.dotnetInstallErrorCode"),
    failToInstallDotnet: () => localizeUtils_1.getLocalizedString("depChecker.failToInstallDotnet"),
    NodeNotFound: () => localizeUtils_1.getLocalizedString("depChecker.NodeNotFound"),
    NodeNotSupported: () => localizeUtils_1.getLocalizedString("depChecker.NodeNotSupported"),
    // In v3, the message will be displayed in the output.
    // TODO: add localized string to FxError.displayMessage
    V3NodeNotSupported: (currentVersion, supportedVersions) => localizeUtils_1.getDefaultString("depChecker.V3NodeNotSupported", currentVersion, supportedVersions),
    NodeNotLts: (currentVersion, supportedVersions) => localizeUtils_1.getDefaultString("depChecker.NodeNotLts", currentVersion, supportedVersions),
    dotnetNotFound: () => localizeUtils_1.getLocalizedString("depChecker.dotnetNotFound"),
    // depsNotFound: () => getLocalizedString("depChecker.depsNotFound"),
    failToValidateVxTestAppInstallOptions: () => localizeUtils_1.getLocalizedString("depChecker.failToValidateVxTestAppInstallOptions"),
    failToValidateVxTestApp: () => localizeUtils_1.getLocalizedString("depChecker.failToValidateVxTestApp"),
    failToDownloadFromUrl: () => localizeUtils_1.getLocalizedString("depChecker.failToDownloadFromUrl"),
    linuxDepsNotFound: () => localizeUtils_1.getLocalizedString("depChecker.linuxDepsNotFound"),
    // linuxDepsNotFoundHelpLinkMessage: () => getLocalizedString(
    //   "depChecker.linuxDepsNotFoundHelpLinkMessage"
    // ),
};
//# sourceMappingURL=message.js.map