import { DepsCheckerEvent } from "../constant/telemetry";
import { DependencyStatus, DepsChecker, DepsType, BaseInstallOptions } from "../depsChecker";
import { DepsCheckerError } from "../depsError";
import { DepsLogger } from "../depsLogger";
import { DepsTelemetry } from "../depsTelemetry";
declare class NodeVersion {
    readonly version: string;
    readonly majorVersion: string;
    constructor(version: string, majorVersion: string);
}
export declare abstract class NodeChecker implements DepsChecker {
    protected abstract readonly _nodeNotFoundHelpLink: string;
    protected abstract readonly _nodeNotSupportedEvent: DepsCheckerEvent;
    protected abstract readonly _type: DepsType;
    protected abstract getSupportedVersions(projectPath?: string): Promise<string[]>;
    protected abstract isVersionSupported(supportedVersions: string[], version: NodeVersion): boolean;
    protected abstract getVersionNotSupportedError(supportedVersions: string[], version: NodeVersion): DepsCheckerError;
    protected abstract readonly _minErrorVersion: number;
    protected abstract readonly _maxErrorVersion: number;
    private readonly _telemetry;
    private readonly _logger;
    constructor(logger: DepsLogger, telemetry: DepsTelemetry);
    getInstallationInfo(installOptions?: BaseInstallOptions): Promise<DependencyStatus>;
    resolve(installOptions?: BaseInstallOptions): Promise<DependencyStatus>;
    install(): Promise<void>;
    getDepsInfo(isInstalled: boolean, supportedVersions: string[], installVersion?: string, error?: DepsCheckerError): Promise<DependencyStatus>;
    private static isVersionError;
    command(): Promise<string>;
    static getInstalledNodeVersion(): Promise<NodeVersion | null>;
}
export declare class SPFxNodeChecker extends NodeChecker {
    protected readonly _nodeNotFoundHelpLink: string;
    protected readonly _nodeNotSupportedEvent = DepsCheckerEvent.nodeNotSupportedForSPFx;
    protected readonly _type = DepsType.SpfxNode;
    protected readonly _minErrorVersion = 15;
    protected readonly _maxErrorVersion = 17;
    protected getSupportedVersions(): Promise<string[]>;
    protected isVersionSupported(supportedVersions: string[], version: NodeVersion): boolean;
    protected getVersionNotSupportedError(supportedVersions: string[], version: NodeVersion): DepsCheckerError;
}
export declare class AzureNodeChecker extends NodeChecker {
    protected readonly _nodeNotFoundHelpLink: string;
    protected readonly _nodeNotSupportedEvent = DepsCheckerEvent.nodeNotSupportedForAzure;
    protected readonly _type = DepsType.AzureNode;
    protected readonly _minErrorVersion = 11;
    protected readonly _maxErrorVersion: number;
    protected getSupportedVersions(): Promise<string[]>;
    protected isVersionSupported(supportedVersions: string[], version: NodeVersion): boolean;
    protected getVersionNotSupportedError(supportedVersions: string[], version: NodeVersion): DepsCheckerError;
}
export declare class LtsNodeChecker extends NodeChecker {
    protected readonly _nodeNotFoundHelpLink: string;
    protected readonly _nodeNotSupportedEvent = DepsCheckerEvent.nodeNotLts;
    protected readonly _type = DepsType.LtsNode;
    protected readonly _minErrorVersion: number;
    protected readonly _maxErrorVersion: number;
    protected getSupportedVersions(): Promise<string[]>;
    protected isVersionSupported(supportedVersions: string[], version: NodeVersion): boolean;
    protected getVersionNotSupportedError(supportedVersions: string[], version: NodeVersion): DepsCheckerError;
}
export declare class ProjectNodeChecker extends NodeChecker {
    protected readonly _nodeNotFoundHelpLink = "https://aka.ms/teamsfx-check-prerequisites-task";
    protected readonly _nodeNotSupportedEvent = DepsCheckerEvent.nodeNotSupportedForProject;
    protected readonly _type = DepsType.ProjectNode;
    protected readonly _minErrorVersion: number;
    protected readonly _maxErrorVersion: number;
    protected getNodeNotSupportedHelpLink(): Promise<string>;
    protected getSupportedVersions(projectPath?: string): Promise<string[]>;
    private getSupportedVersion;
    protected isVersionSupported(supportedVersions: string[], version: NodeVersion): boolean;
    protected getVersionNotSupportedError(supportedVersions: string[], version: NodeVersion): DepsCheckerError;
}
export {};
//# sourceMappingURL=nodeChecker.d.ts.map