import { DepsCheckerError } from "../depsError";
import { DepsLogger } from "../depsLogger";
import { DepsTelemetry } from "../depsTelemetry";
import { DepsChecker, DependencyStatus, FuncInstallOptions } from "../depsChecker";
export declare enum FuncMajorVersion {
    v1 = "1",
    v2 = "2",
    v3 = "3",
    v4 = "4"
}
interface FuncVersion {
    majorVersion: FuncMajorVersion;
    minorVersion: number;
    patchVersion: number;
}
declare type FuncInstallationStatus = {
    isInstalled: boolean;
    funcVersion: FuncMajorVersion | null;
};
export declare class FuncToolChecker implements DepsChecker {
    private readonly _logger;
    private readonly _telemetry;
    constructor(logger: DepsLogger, telemetry: DepsTelemetry);
    getDepsInfo(isPortableFuncInstalled: boolean, isGlobalFuncInstalled: boolean, error?: DepsCheckerError): Promise<DependencyStatus>;
    resolve(): Promise<DependencyStatus>;
    getInstallationInfo(installOptions?: FuncInstallOptions): Promise<DependencyStatus & {
        globalFunc: FuncInstallationStatus;
        portableFunc: FuncInstallationStatus;
    }>;
    private getNodeVersion;
    private checkPortableFuncAndNode;
    private checkGlobalFuncAndNode;
    checkPortableFuncVersion(nodeVersion: string): Promise<FuncInstallationStatus>;
    checkGlobalFuncVersion(nodeVersion: string): Promise<FuncInstallationStatus>;
    install(nodeVersion: string): Promise<void>;
    private handleInstallFuncFailed;
    private validate;
    private handleNpmNotFound;
    private static getDefaultInstallPath;
    private static getSentinelPath;
    private static getPortableFuncExecPath;
    command(isPortableFuncInstalled: boolean, isGlobalFuncInstalled: boolean): Promise<string>;
    getPortableFuncBinFolders(): string[];
    private queryFuncVersion;
    private queryGlobalFuncVersion;
    private hasNPM;
    private cleanup;
    private cleanupPortablePs1;
    private installFunc;
    private doInstallPortableFunc;
    private getExecCommand;
    private getFuncPSScriptPath;
}
export declare function mapToFuncToolsVersion(output: string): FuncVersion | null;
export declare function isFuncVersionSupport(funcVersion: FuncVersion | null, nodeVersion: string): boolean;
export {};
//# sourceMappingURL=funcToolChecker.d.ts.map