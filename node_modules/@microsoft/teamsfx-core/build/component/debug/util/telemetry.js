// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryUtils = exports.TelemetryEventName = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../../constants");
var TelemetryPropertyKey;
(function (TelemetryPropertyKey) {
    TelemetryPropertyKey["component"] = "component";
    TelemetryPropertyKey["appId"] = "appid";
    TelemetryPropertyKey["success"] = "success";
    TelemetryPropertyKey["errorType"] = "error-type";
    TelemetryPropertyKey["errorCode"] = "error-code";
    TelemetryPropertyKey["errorMessage"] = "error-message";
})(TelemetryPropertyKey || (TelemetryPropertyKey = {}));
var TelemetryPropertyValue;
(function (TelemetryPropertyValue) {
    TelemetryPropertyValue["success"] = "yes";
    TelemetryPropertyValue["failure"] = "no";
    TelemetryPropertyValue["userError"] = "user";
    TelemetryPropertyValue["systemError"] = "system";
})(TelemetryPropertyValue || (TelemetryPropertyValue = {}));
var TelemetryEventName;
(function (TelemetryEventName) {
    TelemetryEventName["scaffoldLocalDebugSettings"] = "scaffold-local-debug-settings";
    TelemetryEventName["setupLocalDebugSettings"] = "setup-local-debug-settings";
    TelemetryEventName["configLocalDebugSettings"] = "config-local-debug-settings";
})(TelemetryEventName = exports.TelemetryEventName || (exports.TelemetryEventName = {}));
class TelemetryUtils {
    static init(telemetryReporter, localSettings) {
        var _a;
        TelemetryUtils.telemetryReporter = telemetryReporter;
        TelemetryUtils.localAppId = (_a = localSettings === null || localSettings === void 0 ? void 0 : localSettings.teamsApp) === null || _a === void 0 ? void 0 : _a.teamsAppId;
    }
    static sendStartEvent(eventName, properties, measurements) {
        if (!properties) {
            properties = {};
        }
        properties[TelemetryPropertyKey.component] = constants_1.SolutionTelemetryComponentName;
        if (TelemetryUtils.localAppId) {
            properties[TelemetryPropertyKey.appId] = TelemetryUtils.localAppId;
        }
        TelemetryUtils.telemetryReporter.sendTelemetryEvent(`${eventName}-start`, properties, measurements);
    }
    static sendSuccessEvent(eventName, properties, measurements, errorProps) {
        if (!properties) {
            properties = {};
        }
        properties[TelemetryPropertyKey.component] = constants_1.SolutionTelemetryComponentName;
        if (TelemetryUtils.localAppId) {
            properties[TelemetryPropertyKey.appId] = TelemetryUtils.localAppId;
        }
        properties[TelemetryPropertyKey.success] = TelemetryPropertyValue.success;
        TelemetryUtils.telemetryReporter.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(eventName, err, properties, measurements, errorProps) {
        if (!properties) {
            properties = {};
        }
        properties[TelemetryPropertyKey.component] = constants_1.SolutionTelemetryComponentName;
        if (TelemetryUtils.localAppId) {
            properties[TelemetryPropertyKey.appId] = TelemetryUtils.localAppId;
        }
        properties[TelemetryPropertyKey.success] = TelemetryPropertyValue.failure;
        if (err instanceof teamsfx_api_1.SystemError) {
            properties[TelemetryPropertyKey.errorType] = TelemetryPropertyValue.systemError;
        }
        else if (err instanceof teamsfx_api_1.UserError) {
            properties[TelemetryPropertyKey.errorType] = TelemetryPropertyValue.userError;
        }
        properties[TelemetryPropertyKey.errorCode] = `${err.source}.${err.name}`;
        properties[TelemetryPropertyKey.errorMessage] = err.message;
        TelemetryUtils.telemetryReporter.sendTelemetryErrorEvent(eventName, properties, measurements, errorProps);
    }
}
exports.TelemetryUtils = TelemetryUtils;
//# sourceMappingURL=telemetry.js.map