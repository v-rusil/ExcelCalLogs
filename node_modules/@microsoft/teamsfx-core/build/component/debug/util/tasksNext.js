// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeTasks = exports.generateM365Tasks = exports.generateTasks = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../../constants");
// TODO: add spfx tasks with "validate-local-prerequisites"
function generateTasks(includeFrontend, includeBackend, includeBot, includeFuncHostedBot, programmingLanguage) {
    /**
     * Referenced by launch.json
     *   - Pre Debug Check & Start All
     *
     * Referenced inside tasks.json
     *   - validate local prerequisites
     *   - start ngrok
     *   - prepare local environment
     *   - Start All
     *   - Start Frontend
     *   - Start Backend
     *   - Watch Backend
     *   - Start Bot
     */
    const tasks = [
        preDebugCheckAndStartAll(includeBot),
        validateLocalPrerequisites(),
    ];
    if (includeBot) {
        tasks.push(startNgrok());
    }
    tasks.push(prepareLocalEnvironment());
    tasks.push(startAll(includeFrontend, includeBackend, includeBot));
    if (includeFrontend) {
        tasks.push(startFrontend());
    }
    if (includeBackend) {
        tasks.push(startBackend(programmingLanguage));
        if (programmingLanguage === constants_1.ProgrammingLanguage.TS) {
            tasks.push(watchBackend());
        }
    }
    if (includeBot) {
        if (includeFuncHostedBot) {
            tasks.push(startFuncHostedBot(includeFrontend, programmingLanguage));
            tasks.push(startAzuriteEmulator());
            if (programmingLanguage === constants_1.ProgrammingLanguage.TS) {
                tasks.push(watchFuncHostedBot());
            }
        }
        else {
            tasks.push(startBot(includeFrontend));
        }
    }
    return tasks;
}
exports.generateTasks = generateTasks;
function generateM365Tasks(includeFrontend, includeBackend, includeBot, programmingLanguage) {
    /**
     * Referenced by launch.json
     *   - Pre Debug Check & Start All
     *   - Pre Debug Check & Start All & Install App
     *
     * Referenced inside tasks.json
     *   - validate local prerequisites
     *   - start ngrok
     *   - prepare local environment
     *   - Start All
     *   - install app in Teams
     *   - Start Frontend
     *   - Start Backend
     *   - Watch Backend
     *   - Start Bot
     */
    const tasks = [
        preDebugCheckAndStartAll(includeBot),
        preDebugCheckAndStartAllAndInstallApp(includeBot),
        validateLocalPrerequisites(),
    ];
    if (includeBot) {
        tasks.push(startNgrok());
    }
    tasks.push(prepareLocalEnvironment());
    tasks.push(startAll(includeFrontend, includeBackend, includeBot));
    tasks.push(installAppInTeams());
    if (includeFrontend) {
        tasks.push(startFrontend());
    }
    if (includeBackend) {
        tasks.push(startBackend(programmingLanguage));
        if (programmingLanguage === constants_1.ProgrammingLanguage.TS) {
            tasks.push(watchBackend());
        }
    }
    if (includeBot) {
        tasks.push(startBot(includeFrontend));
    }
    return tasks;
}
exports.generateM365Tasks = generateM365Tasks;
function mergeTasks(existingData, newData) {
    var _a, _b;
    const mergedData = {};
    Object.assign(mergedData, existingData);
    if (mergedData.version === undefined) {
        mergedData.version = "2.0.0";
    }
    if (mergedData.tasks === undefined) {
        mergedData.tasks = newData.tasks;
    }
    else {
        const existingTasks = mergedData.tasks;
        const newTasks = ((_a = newData.tasks) !== null && _a !== void 0 ? _a : []);
        const keptTasks = [];
        for (const existingTask of existingTasks) {
            if (!newTasks.some((newTask) => existingTask.label === newTask.label && existingTask.type === newTask.type)) {
                keptTasks.push(existingTask);
            }
        }
        mergedData.tasks = [...keptTasks, ...newTasks];
    }
    if (mergedData.inputs === undefined) {
        mergedData.inputs = newData.inputs;
    }
    else {
        const existingInputs = mergedData.inputs;
        const newInputs = ((_b = newData.inputs) !== null && _b !== void 0 ? _b : []);
        const keptInputs = [];
        for (const existingInput of existingInputs) {
            if (!newInputs.some((newInput) => existingInput.id === newInput.id && existingInput.type === newInput.type)) {
                keptInputs.push(existingInput);
            }
        }
        mergedData.inputs = [...keptInputs, ...newInputs];
    }
    return mergedData;
}
exports.mergeTasks = mergeTasks;
function preDebugCheckAndStartAll(includeBot) {
    return {
        label: "Pre Debug Check & Start All",
        dependsOn: includeBot
            ? ["validate local prerequisites", "start ngrok", "prepare local environment", "Start All"]
            : ["validate local prerequisites", "prepare local environment", "Start All"],
        dependsOrder: "sequence",
    };
}
function preDebugCheckAndStartAllAndInstallApp(includeBot) {
    return {
        label: "Pre Debug Check & Start All & Install App",
        dependsOn: includeBot
            ? [
                "validate local prerequisites",
                "start ngrok",
                "prepare local environment",
                "Start All",
                "install app in Teams",
            ]
            : [
                "validate local prerequisites",
                "prepare local environment",
                "Start All",
                "install app in Teams",
            ],
        dependsOrder: "sequence",
    };
}
function validateLocalPrerequisites() {
    return {
        label: "validate local prerequisites",
        type: "shell",
        command: "exit ${command:fx-extension.validate-local-prerequisites}",
        presentation: {
            reveal: "never",
        },
    };
}
function prepareLocalEnvironment() {
    return {
        label: "prepare local environment",
        type: "shell",
        command: "exit ${command:fx-extension.pre-debug-check}",
        presentation: {
            reveal: "never",
        },
    };
}
function startFrontend() {
    return {
        label: "Start Frontend",
        type: "shell",
        command: "npm run dev:teamsfx",
        isBackground: true,
        problemMatcher: "$teamsfx-frontend-watch",
        options: {
            cwd: "${workspaceFolder}/tabs",
        },
    };
}
function startBackend(programmingLanguage) {
    const result = {
        label: "Start Backend",
        type: "shell",
        command: "npm run dev:teamsfx",
        isBackground: true,
        problemMatcher: "$teamsfx-backend-watch",
        options: {
            cwd: "${workspaceFolder}/api",
            env: {
                PATH: "${command:fx-extension.get-func-path}${env:PATH}",
            },
        },
        presentation: {
            reveal: "silent",
        },
    };
    if (programmingLanguage === constants_1.ProgrammingLanguage.TS) {
        result.dependsOn = "Watch Backend";
    }
    return result;
}
function watchBackend() {
    return {
        label: "Watch Backend",
        type: "shell",
        command: "npm run watch:teamsfx",
        isBackground: true,
        problemMatcher: "$tsc-watch",
        options: {
            cwd: "${workspaceFolder}/api",
        },
        presentation: {
            reveal: "silent",
        },
    };
}
function watchFuncHostedBot() {
    return {
        label: "Watch Bot",
        type: "shell",
        command: "npm run watch:teamsfx",
        isBackground: true,
        problemMatcher: "$tsc-watch",
        options: {
            cwd: "${workspaceFolder}/bot",
        },
        presentation: {
            reveal: "silent",
        },
    };
}
function startBot(includeFrontend) {
    const result = {
        label: "Start Bot",
        type: "shell",
        command: "npm run dev:teamsfx",
        isBackground: true,
        problemMatcher: {
            pattern: [
                {
                    regexp: "^.*$",
                    file: 0,
                    location: 1,
                    message: 2,
                },
            ],
            background: {
                activeOnStart: true,
                beginsPattern: "[nodemon] starting",
                endsPattern: "restify listening to|Bot/ME service listening at|[nodemon] app crashed",
            },
        },
        options: {
            cwd: "${workspaceFolder}/bot",
        },
    };
    if (includeFrontend) {
        result.presentation = { reveal: "silent" };
    }
    return result;
}
function startFuncHostedBot(includeFrontend, programmingLanguage) {
    const result = {
        label: "Start Bot",
        type: "shell",
        command: "npm run dev:teamsfx",
        isBackground: true,
        problemMatcher: "$teamsfx-func-hosted-bot-watch",
        options: {
            cwd: "${workspaceFolder}/bot",
            env: {
                PATH: "${command:fx-extension.get-func-path}${env:PATH}",
            },
        },
    };
    if (includeFrontend) {
        result.presentation = { reveal: "silent" };
    }
    const dependsOn = ["Start Azurite Emulator"];
    if (programmingLanguage === constants_1.ProgrammingLanguage.TS) {
        dependsOn.push("Watch Bot");
    }
    result.dependsOn = dependsOn;
    return result;
}
function startNgrok() {
    return {
        label: "start ngrok",
        dependsOn: `${teamsfx_api_1.ProductName}: ngrok start`,
    };
}
function startAll(includeFrontend, includeBackend, includeBot) {
    const dependsOn = [];
    if (includeFrontend) {
        dependsOn.push("Start Frontend");
    }
    if (includeBackend) {
        dependsOn.push("Start Backend");
    }
    if (includeBot) {
        dependsOn.push("Start Bot");
    }
    return {
        label: "Start All",
        dependsOn,
    };
}
function startAzuriteEmulator() {
    return {
        label: "Start Azurite Emulator",
        type: "shell",
        command: "npm run prepare-storage:teamsfx",
        isBackground: true,
        problemMatcher: {
            pattern: [
                {
                    regexp: "^.*$",
                    file: 0,
                    location: 1,
                    message: 2,
                },
            ],
            background: {
                activeOnStart: true,
                beginsPattern: "Azurite",
                endsPattern: "successfully listening",
            },
        },
        options: {
            cwd: "${workspaceFolder}/bot",
        },
        presentation: { reveal: "silent" },
    };
}
function installAppInTeams() {
    return {
        label: "install app in Teams",
        type: "shell",
        command: "exit ${command:fx-extension.install-app-in-teams}",
        presentation: {
            reveal: "never",
        },
    };
}
//# sourceMappingURL=tasksNext.js.map