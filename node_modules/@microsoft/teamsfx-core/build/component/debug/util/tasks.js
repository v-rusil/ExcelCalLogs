// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSpfxTasks = exports.generateInputs = exports.generateTasks = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../../constants");
//TODO: retire this after fully moved to new tasks with "validate-local-prerequisites" and "npm run dev:teamsfx"
function generateTasks(includeFrontend, includeBackend, includeBot, includeAuth, programmingLanguage) {
    /**
     * Referenced by launch.json
     *   - Pre Debug Check
     *   - Start Frontend
     *   - Start Backend
     *   - Start Bot
     *
     * Referenced inside tasks.json
     *   - dependency check
     *   - start ngrok
     *   - prepare dev env
     *   - prepare local environment
     *   - frontend npm install
     *   - backend npm install
     *   - backend extensions install
     *   - bot npm install
     */
    const tasks = [preDebugCheck(includeBot)];
    tasks.push(dependencyCheck());
    if (includeBot) {
        tasks.push(startNgrok());
    }
    tasks.push(prepareDevEnv(includeFrontend, includeBackend), prepareLocalEnvironment());
    if (includeFrontend) {
        tasks.push(startFrontend(includeAuth), frontendNpmInstall());
    }
    if (includeBackend) {
        tasks.push(startBackend(programmingLanguage), backendExtensionsInstall(), backendNpmInstall());
    }
    if (includeBot) {
        tasks.push(startBot(), botNpmInstall());
    }
    return tasks;
}
exports.generateTasks = generateTasks;
function generateInputs() {
    // call terminate with terminateAll args in input to not require user to select which task(s) to terminate
    return [
        {
            id: "terminate",
            type: "command",
            command: "workbench.action.tasks.terminate",
            args: "terminateAll",
        },
    ];
}
exports.generateInputs = generateInputs;
function generateSpfxTasks() {
    return [
        {
            label: "dependency check",
            type: "shell",
            command: "exit ${command:fx-extension.validate-spfx-dependencies}",
        },
        {
            label: "spfx npm install",
            type: "shell",
            command: "npm install --no-audit",
            options: {
                cwd: "${workspaceFolder}/SPFx",
            },
        },
        {
            label: "gulp trust-dev-cert",
            type: "process",
            command: "node",
            args: ["${workspaceFolder}/SPFx/node_modules/gulp/bin/gulp.js", "trust-dev-cert"],
            options: {
                cwd: "${workspaceFolder}/SPFx",
            },
            dependsOn: "spfx npm install",
        },
        {
            label: "gulp serve",
            type: "process",
            command: "node",
            args: ["${workspaceFolder}/SPFx/node_modules/gulp/bin/gulp.js", "serve", "--nobrowser"],
            problemMatcher: [
                {
                    pattern: [
                        {
                            regexp: ".",
                            file: 1,
                            location: 2,
                            message: 3,
                        },
                    ],
                    background: {
                        activeOnStart: true,
                        beginsPattern: "^.*Starting gulp.*",
                        endsPattern: "^.*Finished subtask 'reload'.*",
                    },
                },
            ],
            isBackground: true,
            options: {
                cwd: "${workspaceFolder}/SPFx",
            },
            dependsOn: "gulp trust-dev-cert",
        },
        {
            label: "prepare local environment",
            type: "shell",
            command: "exit ${command:fx-extension.pre-debug-check}",
        },
        {
            label: "prepare dev env",
            dependsOn: ["dependency check", "prepare local environment", "gulp serve"],
            dependsOrder: "sequence",
        },
        {
            label: "Terminate All Tasks",
            command: "echo ${input:terminate}",
            type: "shell",
            problemMatcher: [],
        },
    ];
}
exports.generateSpfxTasks = generateSpfxTasks;
function preDebugCheck(includeBot) {
    return {
        label: "Pre Debug Check",
        dependsOn: includeBot
            ? ["dependency check", "start ngrok", "prepare dev env"]
            : ["dependency check", "prepare dev env"],
        dependsOrder: "sequence",
    };
}
function dependencyCheck() {
    return {
        label: "dependency check",
        type: "shell",
        command: "exit ${command:fx-extension.validate-dependencies}",
    };
}
function prepareDevEnv(includeFrontend, includeBackend) {
    const result = {
        label: "prepare dev env",
        dependsOn: ["prepare local environment"],
        dependsOrder: "parallel",
    };
    if (includeFrontend) {
        result.dependsOn.push("frontend npm install");
    }
    if (includeBackend) {
        result.dependsOn.push("backend npm install");
    }
    return result;
}
function prepareLocalEnvironment() {
    return {
        label: "prepare local environment",
        type: "shell",
        command: "exit ${command:fx-extension.pre-debug-check}",
    };
}
function startFrontend(includeAuth) {
    return {
        label: "Start Frontend",
        dependsOn: includeAuth
            ? [`${teamsfx_api_1.ProductName}: frontend start`, `${teamsfx_api_1.ProductName}: auth start`]
            : [`${teamsfx_api_1.ProductName}: frontend start`],
        dependsOrder: "parallel",
    };
}
function startBackend(programmingLanguage) {
    if (programmingLanguage === constants_1.ProgrammingLanguage.TS) {
        return {
            label: "Start Backend",
            dependsOn: [`${teamsfx_api_1.ProductName}: backend watch`, `${teamsfx_api_1.ProductName}: backend start`],
            dependsOrder: "sequence",
        };
    }
    else {
        return {
            label: "Start Backend",
            dependsOn: `${teamsfx_api_1.ProductName}: backend start`,
        };
    }
}
function startBot() {
    return {
        label: "Start Bot",
        dependsOn: `${teamsfx_api_1.ProductName}: bot start`,
    };
}
function startNgrok() {
    return {
        label: "start ngrok",
        dependsOn: ["bot npm install", `${teamsfx_api_1.ProductName}: ngrok start`],
    };
}
function frontendNpmInstall() {
    return {
        label: "frontend npm install",
        type: "shell",
        command: "npm install --no-audit",
        options: {
            cwd: "${workspaceFolder}/tabs",
        },
    };
}
function backendNpmInstall() {
    return {
        label: "backend npm install",
        type: "shell",
        command: "npm install --no-audit",
        options: {
            cwd: "${workspaceFolder}/api",
        },
        dependsOn: "backend extensions install",
    };
}
function backendExtensionsInstall() {
    return {
        label: "backend extensions install",
        type: "shell",
        command: "exit ${command:fx-extension.backend-extensions-install}",
    };
}
function botNpmInstall() {
    return {
        label: "bot npm install",
        type: "shell",
        command: "npm install --no-audit",
        options: {
            cwd: "${workspaceFolder}/bot",
        },
    };
}
//# sourceMappingURL=tasks.js.map