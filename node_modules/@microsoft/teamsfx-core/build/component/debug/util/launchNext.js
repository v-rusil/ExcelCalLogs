// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeLaunches = exports.generateM365Compounds = exports.generateM365Configurations = exports.generateCompounds = exports.generateConfigurations = void 0;
const tslib_1 = require("tslib");
const os = tslib_1.__importStar(require("os"));
const constants_1 = require("../constants");
function generateConfigurations(includeFrontend, includeBackend, includeBot) {
    let edgeOrder = 2, chromeOrder = 1;
    if (os.type() === "Windows_NT") {
        edgeOrder = 1;
        chromeOrder = 2;
    }
    const launchConfigurations = [
        launchRemote(constants_1.LaunchBrowser.edge, "Edge", edgeOrder),
        launchRemote(constants_1.LaunchBrowser.chrome, "Chrome", chromeOrder),
    ];
    if (includeFrontend) {
        launchConfigurations.push(attachToFrontend(constants_1.LaunchBrowser.edge, "Edge", includeBackend, includeBot));
        launchConfigurations.push(attachToFrontend(constants_1.LaunchBrowser.chrome, "Chrome", includeBackend, includeBot));
    }
    else if (includeBot) {
        launchConfigurations.push(launchBot(constants_1.LaunchBrowser.edge, "Edge", includeBackend));
        launchConfigurations.push(launchBot(constants_1.LaunchBrowser.chrome, "Chrome", includeBackend));
    }
    if (includeBot) {
        launchConfigurations.push(attachToBot());
    }
    if (includeBackend) {
        launchConfigurations.push(attachToBackend());
    }
    return launchConfigurations;
}
exports.generateConfigurations = generateConfigurations;
function generateCompounds(includeFrontend, includeBackend, includeBot) {
    const launchCompounds = [];
    let edgeOrder = 2, chromeOrder = 1;
    if (os.type() === "Windows_NT") {
        edgeOrder = 1;
        chromeOrder = 2;
    }
    launchCompounds.push(debug(includeFrontend, includeBackend, includeBot, "Edge", edgeOrder));
    launchCompounds.push(debug(includeFrontend, includeBackend, includeBot, "Chrome", chromeOrder));
    return launchCompounds;
}
exports.generateCompounds = generateCompounds;
function generateM365Configurations(includeFrontend, includeBackend, includeBot) {
    const launchConfigurations = [];
    if (includeFrontend) {
        launchConfigurations.push(attachToFrontendM365(constants_1.HubName.teams, constants_1.LaunchBrowser.edge, "Edge", includeBackend, includeBot));
        launchConfigurations.push(attachToFrontendM365(constants_1.HubName.teams, constants_1.LaunchBrowser.chrome, "Chrome", includeBackend, includeBot));
        launchConfigurations.push(attachToFrontendM365(constants_1.HubName.outlook, constants_1.LaunchBrowser.edge, "Edge", includeBackend, includeBot));
        launchConfigurations.push(attachToFrontendM365(constants_1.HubName.outlook, constants_1.LaunchBrowser.chrome, "Chrome", includeBackend, includeBot));
        launchConfigurations.push(attachToFrontendM365(constants_1.HubName.office, constants_1.LaunchBrowser.edge, "Edge", includeBackend, includeBot));
        launchConfigurations.push(attachToFrontendM365(constants_1.HubName.office, constants_1.LaunchBrowser.chrome, "Chrome", includeBackend, includeBot));
    }
    else if (includeBot) {
        launchConfigurations.push(launchBotM365(constants_1.HubName.teams, constants_1.LaunchBrowser.edge, "Edge", includeBackend));
        launchConfigurations.push(launchBotM365(constants_1.HubName.teams, constants_1.LaunchBrowser.chrome, "Chrome", includeBackend));
        launchConfigurations.push(launchBotM365(constants_1.HubName.outlook, constants_1.LaunchBrowser.edge, "Edge", includeBackend));
        launchConfigurations.push(launchBotM365(constants_1.HubName.outlook, constants_1.LaunchBrowser.chrome, "Chrome", includeBackend));
    }
    if (includeBot) {
        launchConfigurations.push(attachToBot());
    }
    if (includeBackend) {
        launchConfigurations.push(attachToBackend());
    }
    return launchConfigurations;
}
exports.generateM365Configurations = generateM365Configurations;
function generateM365Compounds(includeFrontend, includeBackend, includeBot) {
    const launchCompounds = [];
    let edgeOrder = 2, chromeOrder = 1;
    if (os.type() === "Windows_NT") {
        edgeOrder = 1;
        chromeOrder = 2;
    }
    launchCompounds.push(debugM365(includeFrontend, includeBackend, includeBot, constants_1.HubName.teams, 1, "Edge", edgeOrder));
    launchCompounds.push(debugM365(includeFrontend, includeBackend, includeBot, constants_1.HubName.teams, 1, "Chrome", chromeOrder));
    launchCompounds.push(debugM365(includeFrontend, includeBackend, includeBot, constants_1.HubName.outlook, 2, "Edge", edgeOrder));
    launchCompounds.push(debugM365(includeFrontend, includeBackend, includeBot, constants_1.HubName.outlook, 2, "Chrome", chromeOrder));
    if (includeFrontend) {
        launchCompounds.push(debugM365(includeFrontend, includeBackend, includeBot, constants_1.HubName.office, 3, "Edge", edgeOrder));
        launchCompounds.push(debugM365(includeFrontend, includeBackend, includeBot, constants_1.HubName.office, 3, "Chrome", chromeOrder));
    }
    return launchCompounds;
}
exports.generateM365Compounds = generateM365Compounds;
function mergeLaunches(existingData, newData) {
    var _a, _b;
    const mergedData = {};
    Object.assign(mergedData, existingData);
    if (mergedData.version === undefined) {
        mergedData.version = "0.2.0";
    }
    if (mergedData.configurations === undefined) {
        mergedData.configurations = newData.configurations;
    }
    else {
        const existingConfigurations = mergedData.configurations;
        const newConfigurations = ((_a = newData.configurations) !== null && _a !== void 0 ? _a : []);
        const keptConfigurations = [];
        for (const existingConfiguration of existingConfigurations) {
            if (!newConfigurations.some((newConfiguration) => existingConfiguration.name === newConfiguration.name &&
                existingConfiguration.type === newConfiguration.type &&
                existingConfiguration.request === newConfiguration.request)) {
                keptConfigurations.push(existingConfiguration);
            }
        }
        mergedData.configurations = [...keptConfigurations, ...newConfigurations];
    }
    if (mergedData.compounds === undefined) {
        mergedData.compounds = newData.compounds;
    }
    else {
        const existingCompounds = mergedData.compounds;
        const newCompounds = ((_b = newData.compounds) !== null && _b !== void 0 ? _b : []);
        const keptCompounds = [];
        for (const existingCompound of existingCompounds) {
            if (!newCompounds.some((newCompound) => existingCompound.name === newCompound.name)) {
                keptCompounds.push(existingCompound);
            }
        }
        mergedData.compounds = [...keptCompounds, ...newCompounds];
    }
    return mergedData;
}
exports.mergeLaunches = mergeLaunches;
function launchRemote(browserType, browserName, order) {
    return {
        name: `Launch Remote (${browserName})`,
        type: browserType,
        request: "launch",
        url: constants_1.LaunchUrl.teamsRemote,
        presentation: {
            group: "remote",
            order: order,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function attachToFrontend(browserType, browserName, includeBackend, includeBot) {
    // NOTE: if no cascadeTerminateToConfigurations, closing browser will not stop
    // "Attach to Backend" and "Attach to Bot" even though stopAll in compound is true
    const cascadeTerminateToConfigurations = [];
    if (includeBackend) {
        cascadeTerminateToConfigurations.push("Attach to Backend");
    }
    if (includeBot) {
        cascadeTerminateToConfigurations.push("Attach to Bot");
    }
    return {
        name: `Attach to Frontend (${browserName})`,
        type: browserType,
        request: "launch",
        url: constants_1.LaunchUrl.teamsLocal,
        cascadeTerminateToConfigurations: cascadeTerminateToConfigurations.length > 0 ? cascadeTerminateToConfigurations : undefined,
        presentation: {
            group: "all",
            hidden: true,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function attachToFrontendM365(hubName, browserType, browserName, includeBackend, includeBot) {
    const cascadeTerminateToConfigurations = [];
    if (includeBackend) {
        cascadeTerminateToConfigurations.push("Attach to Backend");
    }
    if (includeBot) {
        cascadeTerminateToConfigurations.push("Attach to Bot");
    }
    return {
        name: `Attach to Frontend in ${hubName} (${browserName})`,
        type: browserType,
        request: "launch",
        url: getFrontendLaunchUrl(true, hubName),
        cascadeTerminateToConfigurations: cascadeTerminateToConfigurations.length > 0 ? cascadeTerminateToConfigurations : undefined,
        presentation: {
            group: "all",
            hidden: true,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function attachToBot() {
    return {
        name: "Attach to Bot",
        type: "pwa-node",
        request: "attach",
        port: 9239,
        restart: true,
        presentation: {
            group: "all",
            hidden: true,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function attachToBackend() {
    return {
        name: "Attach to Backend",
        type: "pwa-node",
        request: "attach",
        port: 9229,
        restart: true,
        presentation: {
            group: "all",
            hidden: true,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function launchBot(browserType, browserName, includeBackend) {
    const cascadeTerminateToConfigurations = ["Attach to Bot"];
    if (includeBackend) {
        cascadeTerminateToConfigurations.push("Attach to Backend");
    }
    return {
        name: `Launch Bot (${browserName})`,
        type: browserType,
        request: "launch",
        url: constants_1.LaunchUrl.teamsLocal,
        cascadeTerminateToConfigurations,
        presentation: {
            group: "all",
            hidden: true,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function launchBotM365(hubName, browserType, browserName, includeBackend) {
    const cascadeTerminateToConfigurations = ["Attach to Bot"];
    if (includeBackend) {
        cascadeTerminateToConfigurations.push("Attach to Backend");
    }
    return {
        name: `Launch Bot in ${hubName} (${browserName})`,
        type: browserType,
        request: "launch",
        url: getBotLaunchUrl(true, hubName),
        cascadeTerminateToConfigurations,
        presentation: {
            group: "all",
            hidden: true,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function debug(includeFrontend, includeBackend, includeBot, browserName, order) {
    const configurations = [];
    if (includeFrontend) {
        configurations.push(`Attach to Frontend (${browserName})`);
    }
    else if (includeBot) {
        configurations.push(`Launch Bot (${browserName})`);
    }
    if (includeBot) {
        configurations.push("Attach to Bot");
    }
    if (includeBackend) {
        configurations.push("Attach to Backend");
    }
    return {
        name: `Debug (${browserName})`,
        configurations,
        preLaunchTask: "Pre Debug Check & Start All",
        presentation: {
            group: "all",
            order: order,
        },
        stopAll: true,
    };
}
function debugM365(includeFrontend, includeBackend, includeBot, hubName, hubOrder, browserName, order) {
    const configurations = [];
    if (includeFrontend) {
        configurations.push(`Attach to Frontend in ${hubName} (${browserName})`);
    }
    else if (includeBot) {
        configurations.push(`Launch Bot in ${hubName} (${browserName})`);
    }
    if (includeBot) {
        configurations.push("Attach to Bot");
    }
    if (includeBackend) {
        configurations.push("Attach to Backend");
    }
    return {
        name: `Debug in ${hubName} (${browserName})`,
        configurations,
        preLaunchTask: hubName === constants_1.HubName.teams
            ? "Pre Debug Check & Start All"
            : "Pre Debug Check & Start All & Install App",
        presentation: {
            group: `group ${hubOrder}: ${hubName}`,
            order: order,
        },
        stopAll: true,
    };
}
function getFrontendLaunchUrl(isLocal, hubName) {
    if (hubName === constants_1.HubName.teams) {
        return isLocal ? constants_1.LaunchUrl.teamsLocal : constants_1.LaunchUrl.teamsRemote;
    }
    else if (hubName === constants_1.HubName.outlook) {
        return isLocal ? constants_1.LaunchUrl.outlookLocalTab : constants_1.LaunchUrl.outlookRemoteTab;
    }
    else if (hubName === constants_1.HubName.office) {
        return isLocal ? constants_1.LaunchUrl.officeLocalTab : constants_1.LaunchUrl.officeRemoteTab;
    }
    return "";
}
function getBotLaunchUrl(isLocal, hubName) {
    if (hubName === constants_1.HubName.teams) {
        return isLocal ? constants_1.LaunchUrl.teamsLocal : constants_1.LaunchUrl.teamsRemote;
    }
    else if (hubName === constants_1.HubName.outlook) {
        return isLocal ? constants_1.LaunchUrl.outlookLocalBot : constants_1.LaunchUrl.outlookRemoteBot;
    }
    return "";
}
//# sourceMappingURL=launchNext.js.map