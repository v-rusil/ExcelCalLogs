// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareLocalAuthService = exports.getAuthServiceFolder = void 0;
const tslib_1 = require("tslib");
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const fs = tslib_1.__importStar(require("fs-extra"));
const os = tslib_1.__importStar(require("os"));
const path = tslib_1.__importStar(require("path"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
function getAuthServiceFolder() {
    return `${os.homedir()}/.${teamsfx_api_1.ConfigFolderName}/localauth`;
}
exports.getAuthServiceFolder = getAuthServiceFolder;
async function prepareLocalAuthService(zipPath) {
    const toolkitHome = `${os.homedir()}/.${teamsfx_api_1.ConfigFolderName}`;
    const zipFolder = path.dirname(zipPath);
    const versionPath = `${zipFolder}/version.txt`;
    const authServiceFolder = `${toolkitHome}/localauth`;
    const authServiceDll = `${authServiceFolder}/Microsoft.TeamsFx.SimpleAuth.dll`;
    const authServiceVersion = `${toolkitHome}/localauth-version.txt`;
    const expectedVersion = await tryGetVersion(versionPath);
    const actualVersion = await tryGetVersion(authServiceVersion);
    if (!expectedVersion ||
        !actualVersion ||
        expectedVersion !== actualVersion ||
        !(await fs.pathExists(authServiceDll))) {
        const zip = new adm_zip_1.default(zipPath);
        await fs.ensureDir(authServiceFolder);
        zip.extractAllTo(authServiceFolder, true);
        if (expectedVersion) {
            await fs.writeFile(authServiceVersion, expectedVersion, "utf8");
        }
    }
    return authServiceFolder;
}
exports.prepareLocalAuthService = prepareLocalAuthService;
async function tryGetVersion(versionFile) {
    try {
        if (await fs.pathExists(versionFile)) {
            const version = (await fs.readFile(versionFile, "utf8")).trim();
            return version.length > 0 ? version : undefined;
        }
        return undefined;
    }
    catch (_a) {
        // ignore error and return undefine
        return undefined;
    }
}
//# sourceMappingURL=localService.js.map