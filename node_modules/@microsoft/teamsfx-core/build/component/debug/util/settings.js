// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeSettings = exports.generateSettings = void 0;
const tools_1 = require("../../../common/tools");
function generateSettings(includeFunctions, isSpfx) {
    /**
     * Default settings for extensions
     */
    const settings = {
        "debug.onTaskErrors": "abort",
    };
    if (!isSpfx && tools_1.isAadManifestEnabled()) {
        settings["json.schemas"] = [
            {
                fileMatch: ["/aad.*.json"],
                schema: {},
            },
        ];
    }
    if (includeFunctions) {
        // Ensure that Azure Function Extension does not kill the backend process
        settings["azureFunctions.stopFuncTaskPostDebug"] = false;
        settings["azureFunctions.showProjectWarning"] = false;
        settings["csharp.suppressDotnetRestoreNotification"] = true;
    }
    return settings;
}
exports.generateSettings = generateSettings;
function mergeSettings(existingData, newData) {
    const mergedData = {};
    Object.assign(mergedData, existingData);
    if (newData !== undefined) {
        for (const newSetting of Object.entries(newData)) {
            mergedData[newSetting[0]] = newSetting[1];
        }
    }
    return mergedData;
}
exports.mergeSettings = mergeSettings;
//# sourceMappingURL=settings.js.map