// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSpfxCompounds = exports.generateSpfxConfigurations = exports.generateCompounds = exports.generateConfigurations = void 0;
const tslib_1 = require("tslib");
const os = tslib_1.__importStar(require("os"));
const constants_1 = require("../constants");
function generateConfigurations(includeFrontend, includeBackend, includeBot) {
    let edgeOrder = 2, chromeOrder = 1;
    if (os.type() === "Windows_NT") {
        edgeOrder = 1;
        chromeOrder = 2;
    }
    const launchConfigurations = [
        launchRemote(constants_1.LaunchBrowser.edge, "Edge", edgeOrder),
        launchRemote(constants_1.LaunchBrowser.chrome, "Chrome", chromeOrder),
    ];
    if (includeFrontend) {
        launchConfigurations.push(startAndAttachToFrontend(constants_1.LaunchBrowser.edge, "Edge", includeBackend, includeBot));
        launchConfigurations.push(startAndAttachToFrontend(constants_1.LaunchBrowser.chrome, "Chrome", includeBackend, includeBot));
    }
    else if (includeBot) {
        launchConfigurations.push(launchBot(constants_1.LaunchBrowser.edge, "Edge", includeBackend));
        launchConfigurations.push(launchBot(constants_1.LaunchBrowser.chrome, "Chrome", includeBackend));
    }
    if (includeBot) {
        launchConfigurations.push(attachToBot());
    }
    if (includeBackend) {
        launchConfigurations.push(attachToBackend());
    }
    return launchConfigurations;
}
exports.generateConfigurations = generateConfigurations;
function generateCompounds(includeFrontend, includeBackend, includeBot) {
    const launchCompounds = [];
    let edgeOrder = 2, chromeOrder = 1;
    if (os.type() === "Windows_NT") {
        edgeOrder = 1;
        chromeOrder = 2;
    }
    launchCompounds.push(debug(includeFrontend, includeBackend, includeBot, "Edge", edgeOrder));
    launchCompounds.push(debug(includeFrontend, includeBackend, includeBot, "Chrome", chromeOrder));
    return launchCompounds;
}
exports.generateCompounds = generateCompounds;
function generateSpfxConfigurations() {
    let edgeOrder = 2, chromeOrder = 1;
    if (os.type() === "Windows_NT") {
        edgeOrder = 1;
        chromeOrder = 2;
    }
    const configurations = [
        {
            name: "Hosted workbench (Edge)",
            type: constants_1.LaunchBrowser.edge,
            request: "launch",
            url: "https://enter-your-SharePoint-site/_layouts/workbench.aspx",
            webRoot: "${workspaceRoot}/SPFx",
            sourceMaps: true,
            sourceMapPathOverrides: {
                "webpack:///.././src/*": "${webRoot}/src/*",
                "webpack:///../../../src/*": "${webRoot}/src/*",
                "webpack:///../../../../src/*": "${webRoot}/src/*",
                "webpack:///../../../../../src/*": "${webRoot}/src/*",
            },
            runtimeArgs: ["--remote-debugging-port=9222", "-incognito"],
            preLaunchTask: "gulp serve",
            postDebugTask: "Terminate All Tasks",
            presentation: {
                group: "remote",
                order: edgeOrder,
            },
        },
        {
            name: "Hosted workbench (Chrome)",
            type: constants_1.LaunchBrowser.chrome,
            request: "launch",
            url: "https://enter-your-SharePoint-site/_layouts/workbench.aspx",
            webRoot: "${workspaceRoot}/SPFx",
            sourceMaps: true,
            sourceMapPathOverrides: {
                "webpack:///.././src/*": "${webRoot}/src/*",
                "webpack:///../../../src/*": "${webRoot}/src/*",
                "webpack:///../../../../src/*": "${webRoot}/src/*",
                "webpack:///../../../../../src/*": "${webRoot}/src/*",
            },
            runtimeArgs: ["--remote-debugging-port=9222", "-incognito"],
            preLaunchTask: "gulp serve",
            postDebugTask: "Terminate All Tasks",
            presentation: {
                group: "remote",
                order: chromeOrder,
            },
        },
        {
            name: "Start Teams workbench (Edge)",
            type: "pwa-msedge",
            request: "launch",
            url: "https://teams.microsoft.com/l/app/${localTeamsAppId}?installAppPackage=true&webjoin=true&${account-hint}",
            webRoot: "${workspaceRoot}/SPFx",
            sourceMaps: true,
            sourceMapPathOverrides: {
                "webpack:///.././src/*": "${webRoot}/src/*",
                "webpack:///../../../src/*": "${webRoot}/src/*",
                "webpack:///../../../../src/*": "${webRoot}/src/*",
                "webpack:///../../../../../src/*": "${webRoot}/src/*",
            },
            postDebugTask: "Terminate All Tasks",
            presentation: {
                hidden: true,
            },
            internalConsoleOptions: "neverOpen",
        },
        {
            name: "Start Teams workbench (Chrome)",
            type: "pwa-chrome",
            request: "launch",
            url: "https://teams.microsoft.com/l/app/${localTeamsAppId}?installAppPackage=true&webjoin=true&${account-hint}",
            webRoot: "${workspaceRoot}/SPFx",
            sourceMaps: true,
            sourceMapPathOverrides: {
                "webpack:///.././src/*": "${webRoot}/src/*",
                "webpack:///../../../src/*": "${webRoot}/src/*",
                "webpack:///../../../../src/*": "${webRoot}/src/*",
                "webpack:///../../../../../src/*": "${webRoot}/src/*",
            },
            postDebugTask: "Terminate All Tasks",
            presentation: {
                hidden: true,
            },
            internalConsoleOptions: "neverOpen",
        },
    ];
    return configurations;
}
exports.generateSpfxConfigurations = generateSpfxConfigurations;
function generateSpfxCompounds() {
    const launchCompounds = [];
    let edgeOrder = 2, chromeOrder = 1;
    if (os.type() === "Windows_NT") {
        edgeOrder = 1;
        chromeOrder = 2;
    }
    launchCompounds.push({
        name: "Teams workbench (Edge)",
        configurations: ["Start Teams workbench (Edge)"],
        preLaunchTask: "prepare dev env",
        presentation: {
            group: "forteams",
            order: edgeOrder,
        },
        stopAll: true,
    }, {
        name: "Teams workbench (Chrome)",
        configurations: ["Start Teams workbench (Chrome)"],
        preLaunchTask: "prepare dev env",
        presentation: {
            group: "forteams",
            order: chromeOrder,
        },
        stopAll: true,
    });
    return launchCompounds;
}
exports.generateSpfxCompounds = generateSpfxCompounds;
function launchRemote(browserType, browserName, order) {
    return {
        name: `Launch Remote (${browserName})`,
        type: browserType,
        request: "launch",
        url: "https://teams.microsoft.com/l/app/${teamsAppId}?installAppPackage=true&webjoin=true&${account-hint}",
        presentation: {
            group: "remote",
            order: order,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function startAndAttachToFrontend(browserType, browserName, includeBackend, includeBot) {
    const cascadeTerminateToConfigurations = [];
    if (includeBackend) {
        cascadeTerminateToConfigurations.push("Attach to Backend");
    }
    if (includeBot) {
        cascadeTerminateToConfigurations.push("Attach to Bot");
    }
    return {
        name: `Start and Attach to Frontend (${browserName})`,
        type: browserType,
        request: "launch",
        url: "https://teams.microsoft.com/l/app/${localTeamsAppId}?installAppPackage=true&webjoin=true&${account-hint}",
        preLaunchTask: "Start Frontend",
        cascadeTerminateToConfigurations,
        presentation: {
            group: "all",
            hidden: true,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function launchBot(browserType, browserName, includeBackend) {
    const cascadeTerminateToConfigurations = ["Attach to Bot"];
    if (includeBackend) {
        cascadeTerminateToConfigurations.push("Attach to Backend");
    }
    return {
        name: `Launch Bot (${browserName})`,
        type: browserType,
        request: "launch",
        url: "https://teams.microsoft.com/l/app/${localTeamsAppId}?installAppPackage=true&webjoin=true&${account-hint}",
        cascadeTerminateToConfigurations,
        presentation: {
            group: "all",
            hidden: true,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function attachToBot() {
    return {
        name: "Start and Attach to Bot",
        type: "pwa-node",
        request: "attach",
        port: 9239,
        restart: true,
        preLaunchTask: "Start Bot",
        presentation: {
            group: "all",
            hidden: true,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function attachToBackend() {
    return {
        name: "Start and Attach to Backend",
        type: "pwa-node",
        request: "attach",
        port: 9229,
        restart: true,
        preLaunchTask: "Start Backend",
        presentation: {
            group: "all",
            hidden: true,
        },
        internalConsoleOptions: "neverOpen",
    };
}
function debug(includeFrontend, includeBackend, includeBot, browserName, order) {
    const configurations = [];
    if (includeFrontend) {
        configurations.push(`Start and Attach to Frontend (${browserName})`);
    }
    else if (includeBot) {
        configurations.push(`Launch Bot (${browserName})`);
    }
    if (includeBot) {
        configurations.push("Start and Attach to Bot");
    }
    if (includeBackend) {
        configurations.push("Start and Attach to Backend");
    }
    return {
        name: `Debug (${browserName})`,
        configurations,
        preLaunchTask: "Pre Debug Check",
        presentation: {
            group: "all",
            order: order,
        },
        stopAll: true,
    };
}
//# sourceMappingURL=launch.js.map