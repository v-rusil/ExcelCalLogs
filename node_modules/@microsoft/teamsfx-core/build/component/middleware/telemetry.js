"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionTelemetryImplement = exports.TelemetryMW = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../constants");
function TelemetryMW(telemetryCreater) {
    return async (ctx, next) => {
        var _a, _b, _c, _d, _e, _f;
        const actionContext = ctx.arguments[0];
        const telemetry = new telemetryCreater(actionContext.telemetryReporter);
        actionContext.telemetry = telemetry;
        (_b = (_a = actionContext.telemetry).sendStartEvent) === null || _b === void 0 ? void 0 : _b.call(_a, actionContext);
        await next();
        const result = ctx.result;
        if (result.isOk()) {
            (_d = (_c = actionContext.telemetry).sendEndEvent) === null || _d === void 0 ? void 0 : _d.call(_c, actionContext);
        }
        else {
            (_f = (_e = actionContext.telemetry) === null || _e === void 0 ? void 0 : _e.sendEndEventWithError) === null || _f === void 0 ? void 0 : _f.call(_e, actionContext, result.error);
        }
    };
}
exports.TelemetryMW = TelemetryMW;
class ActionTelemetryImplement {
    constructor(stage, componentName, reporter) {
        this.properties = {};
        this.measurements = {};
        this.errorProps = [constants_1.TelemetryConstants.properties.errorMessage];
        this.addProperty = (key, value) => {
            this.properties[key] = value;
        };
        this.sendStartEvent = (ctx) => {
            this.sendTelemetryEvent(this.stage + constants_1.TelemetryConstants.eventPrefix);
        };
        this.sendEndEvent = (ctx) => {
            this.sendTelemetryEvent(this.stage, {
                [constants_1.TelemetryConstants.properties.success]: constants_1.TelemetryConstants.values.yes,
            });
        };
        this.sendEndEventWithError = (ctx, error) => {
            const errorCode = error.source + "." + error.name;
            const errorType = error instanceof teamsfx_api_1.SystemError
                ? constants_1.TelemetryConstants.values.systemError
                : constants_1.TelemetryConstants.values.userError;
            this.sendTelemetryErrorEvent(this.stage, {
                [constants_1.TelemetryConstants.properties.success]: constants_1.TelemetryConstants.values.no,
                [constants_1.TelemetryConstants.properties.errorCode]: errorCode,
                [constants_1.TelemetryConstants.properties.errorType]: errorType,
                [constants_1.TelemetryConstants.properties.errorMessage]: error.message,
            });
        };
        this.reporter = reporter;
        this.stage = stage;
        this.componentName = componentName;
        this.properties[constants_1.TelemetryConstants.properties.component] = this.componentName;
    }
    sendTelemetryEvent(eventName, properties, measurements) {
        this.reporter.sendTelemetryEvent(eventName, Object.assign(Object.assign({}, properties), this.properties), Object.assign(Object.assign({}, measurements), this.measurements));
    }
    sendTelemetryErrorEvent(eventName, properties, measurements, errorProps) {
        this.reporter.sendTelemetryErrorEvent(eventName, Object.assign(Object.assign({}, properties), this.properties), Object.assign(Object.assign({}, measurements), this.measurements), this.errorProps);
    }
    sendTelemetryException(error, properties, measurements) {
        this.reporter.sendTelemetryException(error, Object.assign(Object.assign({}, properties), this.properties), Object.assign(Object.assign({}, measurements), this.measurements));
    }
}
exports.ActionTelemetryImplement = ActionTelemetryImplement;
//# sourceMappingURL=telemetry.js.map