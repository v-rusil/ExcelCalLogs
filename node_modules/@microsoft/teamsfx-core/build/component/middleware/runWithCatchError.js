"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionErrorHandler = exports.RunWithCatchErrorMW = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../constants");
function RunWithCatchErrorMW(source, errorHanlder) {
    return async (ctx, next) => {
        const actionContext = ctx.arguments[0];
        actionContext.source = source;
        try {
            await next();
        }
        catch (error) {
            const res = errorHanlder(actionContext, error);
            ctx.result = teamsfx_api_1.err(res);
        }
    };
}
exports.RunWithCatchErrorMW = RunWithCatchErrorMW;
const ActionErrorHandler = (ctx, error) => {
    var _a;
    if (error instanceof teamsfx_api_1.SystemError || error instanceof teamsfx_api_1.UserError) {
        return error;
    }
    else {
        if (!(error instanceof Error)) {
            error = new Error(error.toString());
        }
        (_a = ctx.logger) === null || _a === void 0 ? void 0 : _a.error(error.message);
        const wrapError = new teamsfx_api_1.SystemError({
            error,
            source: ctx.source,
            name: constants_1.ErrorConstants.unhandledError,
            message: constants_1.ErrorConstants.unhandledErrorMessage,
            displayMessage: constants_1.ErrorConstants.unhandledErrorMessage,
        });
        return wrapError;
    }
};
exports.ActionErrorHandler = ActionErrorHandler;
//# sourceMappingURL=runWithCatchError.js.map