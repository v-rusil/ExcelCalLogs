"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageStrategyFactory = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const path = tslib_1.__importStar(require("path"));
const constants_1 = require("../../constants");
const error_1 = require("../../error");
const messages_1 = require("../../messages");
const constants_2 = require("../constants");
const NodeJSCommonStrategy = {
    getFunctionEntryFileOrFolderName: (entryName) => entryName,
    skipFuncExtensionInstall: false,
    /* We skip scanning node_modules folder for node because it has too many small files.
     * Its consistency can be guaranteed by `npm install`.
     */
    hasUpdatedContentFilter: (itemPath) => path.basename(itemPath) !== constants_1.PathConstants.npmPackageFolder,
    buildCommands: [],
    deployFolderRelativePath: "",
};
const JavaScriptLanguageStrategy = Object.assign(Object.assign({}, NodeJSCommonStrategy), { buildCommands: [
        {
            command: constants_2.Commands.NpmInstallProd,
            relativePath: "",
        },
    ] });
const TypeScriptLanguageStrategy = Object.assign(Object.assign({}, NodeJSCommonStrategy), { buildCommands: [
        {
            command: constants_2.Commands.NpmInstall,
            relativePath: "",
        },
        {
            command: constants_2.Commands.NpmBuild,
            relativePath: "",
        },
    ] });
class LanguageStrategyFactory {
    static getStrategy(language) {
        switch (language) {
            case constants_1.ProgrammingLanguage.JS:
                return JavaScriptLanguageStrategy;
            case constants_1.ProgrammingLanguage.TS:
                return TypeScriptLanguageStrategy;
            default:
                throw new error_1.invalidProjectSettings(messages_1.ErrorMessage.programmingLanguageInvalid);
        }
    }
}
exports.LanguageStrategyFactory = LanguageStrategyFactory;
//# sourceMappingURL=language-strategy.js.map