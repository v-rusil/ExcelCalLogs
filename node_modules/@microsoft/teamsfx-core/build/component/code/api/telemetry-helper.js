"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryHelper = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../../constants");
const constants_2 = require("../constants");
class TelemetryHelper {
    static setContext(ctx) {
        this.ctx = ctx;
    }
    static fillCommonProperty(properties) {
        var _a, _b, _c, _d;
        properties[constants_1.TelemetryConstants.properties.component] = constants_2.TelemetryComponent.api;
        properties[constants_1.TelemetryConstants.properties.appId] =
            ((_d = (_c = (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.envInfo) === null || _b === void 0 ? void 0 : _b.state) === null || _c === void 0 ? void 0 : _c.solution) === null || _d === void 0 ? void 0 : _d[constants_2.RemoteTeamsAppId]) || "";
    }
    static sendSuccessEvent(eventName, properties = {}, measurements = {}) {
        var _a, _b;
        this.fillCommonProperty(properties);
        properties[constants_1.TelemetryConstants.properties.success] = constants_1.TelemetryConstants.values.yes;
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(eventName, e, properties = {}, measurements = {}) {
        var _a, _b;
        this.fillCommonProperty(properties);
        properties[constants_1.TelemetryConstants.properties.success] = constants_1.TelemetryConstants.values.no;
        properties[constants_1.TelemetryConstants.properties.errorMessage] = e.message;
        properties[constants_1.TelemetryConstants.properties.errorCode] = e.name;
        if (e instanceof teamsfx_api_1.SystemError) {
            properties[constants_1.TelemetryConstants.properties.errorType] = constants_1.TelemetryConstants.values.systemError;
        }
        else if (e instanceof teamsfx_api_1.UserError) {
            properties[constants_1.TelemetryConstants.properties.errorType] = constants_1.TelemetryConstants.values.userError;
        }
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryErrorEvent(eventName, properties, measurements, [
            constants_1.TelemetryConstants.properties.errorMessage,
        ]);
    }
}
exports.TelemetryHelper = TelemetryHelper;
//# sourceMappingURL=telemetry-helper.js.map