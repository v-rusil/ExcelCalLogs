"use strict";
/* eslint-disable @typescript-eslint/no-namespace */
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.funcDepsTelemetry = void 0;
const tslib_1 = require("tslib");
const os = tslib_1.__importStar(require("os"));
const perf_hooks_1 = require("perf_hooks");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const telemetry_1 = require("../../../../common/deps-checker/constant/telemetry");
const enums_1 = require("../enums");
const telemetry_helper_1 = require("../telemetry-helper");
class FuncPluginTelemetry {
    constructor() {
        this._source = "func-envchecker";
    }
    static getCommonProps() {
        const properties = {};
        properties[enums_1.TelemetryKey.OSArch] = os.arch();
        properties[enums_1.TelemetryKey.OSRelease] = os.release();
        return properties;
    }
    sendEvent(eventName, properties = {}, timecost) {
        const measurements = {};
        if (timecost) {
            measurements[telemetry_1.TelemetryMessurement.completionTime] = timecost;
        }
        telemetry_helper_1.TelemetryHelper.sendSuccessEvent(eventName, Object.assign(Object.assign({}, properties), FuncPluginTelemetry.getCommonProps()), measurements);
    }
    async sendEventWithDuration(eventName, action) {
        const start = perf_hooks_1.performance.now();
        await action();
        // use seconds instead of milliseconds
        const timecost = Number(((perf_hooks_1.performance.now() - start) / 1000).toFixed(2));
        const measurements = {};
        if (timecost) {
            measurements[telemetry_1.TelemetryMessurement.completionTime] = timecost;
        }
        telemetry_helper_1.TelemetryHelper.sendSuccessEvent(eventName, FuncPluginTelemetry.getCommonProps(), measurements);
    }
    sendUserErrorEvent(eventName, errorMessage) {
        const error = new teamsfx_api_1.UserError(this._source, eventName, errorMessage);
        telemetry_helper_1.TelemetryHelper.sendErrorEvent(eventName, error, FuncPluginTelemetry.getCommonProps());
    }
    sendSystemErrorEvent(eventName, errorMessage, errorStack) {
        const error = new teamsfx_api_1.SystemError(this._source, eventName, `errorMsg=${errorMessage},errorStack=${errorStack}`);
        error.stack = errorStack;
        telemetry_helper_1.TelemetryHelper.sendErrorEvent(eventName, error, FuncPluginTelemetry.getCommonProps());
    }
}
exports.funcDepsTelemetry = new FuncPluginTelemetry();
//# sourceMappingURL=funcPluginTelemetry.js.map