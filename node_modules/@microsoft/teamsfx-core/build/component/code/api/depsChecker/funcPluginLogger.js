"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.FuncPluginLogger = void 0;
const tslib_1 = require("tslib");
const os = tslib_1.__importStar(require("os"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
class FuncPluginLogger {
    constructor(logger) {
        this.detailLogLines = [];
        this.logger = logger;
    }
    debug(message) {
        this.addToCache(teamsfx_api_1.LogLevel.Debug, message);
        return Promise.resolve(true);
    }
    info(message) {
        this.addToCache(teamsfx_api_1.LogLevel.Info, message);
        this.logger.info(message);
        return Promise.resolve(true);
    }
    warning(message) {
        this.addToCache(teamsfx_api_1.LogLevel.Warning, message);
        this.logger.warning(message);
        return Promise.resolve(true);
    }
    async error(message) {
        this.addToCache(teamsfx_api_1.LogLevel.Error, message);
        this.logger.error(message);
        return true;
    }
    async printDetailLog() {
        this.logger.error(this.detailLogLines.join(os.EOL));
    }
    cleanup() {
        this.detailLogLines = [];
    }
    addToCache(level, message) {
        const line = `${teamsfx_api_1.LogLevel[level]} ${new Date().toISOString()}: ${message}`;
        this.detailLogLines.push(line);
    }
    async append(message) {
        return true;
    }
    async appendLine(message) {
        this.logger.info(message);
        return true;
    }
}
exports.FuncPluginLogger = FuncPluginLogger;
//# sourceMappingURL=funcPluginLogger.js.map