"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.funcDepsHelper = exports.FuncHelper = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const depsError_1 = require("../../../../common/deps-checker/depsError");
const helpLink_1 = require("../../../../common/deps-checker/constant/helpLink");
const message_1 = require("../../../../common/deps-checker/constant/message");
const extensionInstaller_1 = require("../../../../common/deps-checker/util/extensionInstaller");
class FuncHelper {
    constructor() {
        this.dotnetSettingKey = "function-dotnet-checker-enabled";
    }
    async dotnetCheckerEnabled(inputs) {
        let enabled = true;
        if (inputs && inputs[this.dotnetSettingKey] !== undefined) {
            enabled = inputs[this.dotnetSettingKey];
        }
        return Promise.resolve(enabled);
    }
    async installFuncExtension(backendRoot, dotnetCommand, logger, csprojPath, outputPath) {
        await extensionInstaller_1.installExtension(backendRoot, dotnetCommand, logger, csprojPath, outputPath);
    }
    transferError(error) {
        const source = "functionDepsChecker";
        const defaultAnchor = "report-issues";
        if (error instanceof depsError_1.DepsCheckerError) {
            const [helpLink, anchor] = this.splitHelpLink(error.helpLink);
            return new teamsfx_api_1.UserError({ error, source, name: anchor || defaultAnchor, helpLink });
        }
        else {
            return new teamsfx_api_1.UserError({
                source,
                name: defaultAnchor,
                helpLink: helpLink_1.defaultHelpLink,
                error,
                message: message_1.Messages.defaultErrorMessage()[0],
                displayMessage: message_1.Messages.defaultErrorMessage()[1],
            });
        }
    }
    splitHelpLink(link) {
        const lastAnchor = link.lastIndexOf("#");
        if (lastAnchor !== -1) {
            return [link.slice(0, lastAnchor), link.slice(lastAnchor + 1)];
        }
        else {
            return [link, ""];
        }
    }
}
exports.FuncHelper = FuncHelper;
exports.funcDepsHelper = new FuncHelper();
//# sourceMappingURL=funcHelper.js.map