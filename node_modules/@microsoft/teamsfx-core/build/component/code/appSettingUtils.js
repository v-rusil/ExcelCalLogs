"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetAppSettingsDevelopment = exports.replaceBotAppSettings = exports.replaceBlazorAppSettings = exports.AppSettingConstants = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const path_1 = tslib_1.__importDefault(require("path"));
const constants_1 = require("../constants");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const localizeUtils_1 = require("../../common/localizeUtils");
const constants_2 = require("../constants");
class AppSettingConstants {
}
exports.AppSettingConstants = AppSettingConstants;
AppSettingConstants.DevelopmentFileName = "appsettings.Development.json";
AppSettingConstants.Placeholders = {
    clientId: "$clientId$",
    clientSecret: "$client-secret$",
    oauthAuthority: "$oauthAuthority$",
    botId: "$botId$",
    botPassword: "$bot-password$",
    applicationIdUri: "$applicationIdUri$",
    initiateLoginEndpoint: "$initiateLoginEndpoint$",
};
var Scenario;
(function (Scenario) {
    Scenario[Scenario["BlazorTab"] = 0] = "BlazorTab";
    Scenario[Scenario["Bot"] = 1] = "Bot";
    Scenario[Scenario["SsoBot"] = 2] = "SsoBot";
})(Scenario || (Scenario = {}));
function replaceBlazorAppSettings(context, appSettings) {
    return replaceAppSettings(context, appSettings, Scenario.BlazorTab);
}
exports.replaceBlazorAppSettings = replaceBlazorAppSettings;
function replaceBotAppSettings(context, appSettings, sso = false) {
    return sso
        ? replaceAppSettings(context, appSettings, Scenario.SsoBot)
        : replaceAppSettings(context, appSettings, Scenario.Bot);
}
exports.replaceBotAppSettings = replaceBotAppSettings;
function replaceAppSettings(context, appSettings, scenario) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    function escapeRegExp(s) {
        return new RegExp(s.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&"), "g");
    }
    function _replace(searchValue, newValue, transform = (v) => v) {
        var _a;
        const searchRegExp = escapeRegExp(searchValue);
        return appSettings.replace(searchRegExp, (_a = transform(newValue)) !== null && _a !== void 0 ? _a : searchValue);
    }
    if (scenario === Scenario.SsoBot || scenario === Scenario.Bot) {
        appSettings = _replace(AppSettingConstants.Placeholders.botId, (_b = (_a = context.envInfo.state) === null || _a === void 0 ? void 0 : _a[constants_1.ComponentNames.TeamsBot]) === null || _b === void 0 ? void 0 : _b[constants_1.BotServiceOutputs.botId.key]);
        appSettings = _replace(AppSettingConstants.Placeholders.botPassword, (_d = (_c = context.envInfo.state) === null || _c === void 0 ? void 0 : _c[constants_1.ComponentNames.TeamsBot]) === null || _d === void 0 ? void 0 : _d[constants_1.BotServiceOutputs.botPassword.key]);
    }
    if (scenario === Scenario.SsoBot) {
        appSettings = _replace(AppSettingConstants.Placeholders.applicationIdUri, (_f = (_e = context.envInfo.state) === null || _e === void 0 ? void 0 : _e[constants_1.ComponentNames.AadApp]) === null || _f === void 0 ? void 0 : _f[constants_1.AadAppOutputs.applicationIdUris.key]);
        appSettings = _replace(AppSettingConstants.Placeholders.initiateLoginEndpoint, (_h = (_g = context.envInfo.state) === null || _g === void 0 ? void 0 : _g[constants_1.ComponentNames.AadApp]) === null || _h === void 0 ? void 0 : _h[constants_1.AadAppOutputs.botEndpoint.key], (v) => (v ? `${v}/bot-auth-start` : v));
    }
    if (scenario === Scenario.SsoBot || scenario === Scenario.BlazorTab) {
        appSettings = _replace(AppSettingConstants.Placeholders.clientId, (_k = (_j = context.envInfo.state) === null || _j === void 0 ? void 0 : _j[constants_1.ComponentNames.AadApp]) === null || _k === void 0 ? void 0 : _k[constants_1.AadAppOutputs.clientId.key]);
        appSettings = _replace(AppSettingConstants.Placeholders.clientSecret, (_m = (_l = context.envInfo.state) === null || _l === void 0 ? void 0 : _l[constants_1.ComponentNames.AadApp]) === null || _m === void 0 ? void 0 : _m[constants_1.AadAppOutputs.clientSecret.key]);
        appSettings = _replace(AppSettingConstants.Placeholders.oauthAuthority, (_p = (_o = context.envInfo.state) === null || _o === void 0 ? void 0 : _o[constants_1.ComponentNames.AadApp]) === null || _p === void 0 ? void 0 : _p[constants_1.AadAppOutputs.oauthAuthority.key]);
    }
    return appSettings;
}
async function resetAppSettingsDevelopment(projectPath) {
    const appSettingsDevPath = path_1.default.join(projectPath, AppSettingConstants.DevelopmentFileName);
    try {
        if (await fs_extra_1.default.pathExists(appSettingsDevPath)) {
            const appSettings = await fs_extra_1.default.readJson(appSettingsDevPath);
            if (appSettings.TeamsFx) {
                if (appSettings.TeamsFx.Authentication) {
                    appSettings.TeamsFx.Authentication.ClientId = AppSettingConstants.Placeholders.clientId;
                    appSettings.TeamsFx.Authentication.ClientSecret =
                        AppSettingConstants.Placeholders.clientSecret;
                    appSettings.TeamsFx.Authentication.OAuthAuthority =
                        AppSettingConstants.Placeholders.oauthAuthority;
                    if (appSettings.TeamsFx.Authentication.ApplicationIdUri) {
                        appSettings.TeamsFx.Authentication.ApplicationIdUri =
                            AppSettingConstants.Placeholders.applicationIdUri;
                    }
                    if (appSettings.TeamsFx.Authentication.Bot &&
                        appSettings.TeamsFx.Authentication.Bot.InitiateLoginEndpoint) {
                        appSettings.TeamsFx.Authentication.Bot.InitiateLoginEndpoint =
                            AppSettingConstants.Placeholders.initiateLoginEndpoint;
                    }
                }
            }
            if (appSettings["BOT_ID"]) {
                appSettings["BOT_ID"] = AppSettingConstants.Placeholders.botId;
            }
            if (appSettings["BOT_PASSWORD"]) {
                appSettings["BOT_PASSWORD"] = AppSettingConstants.Placeholders.botPassword;
            }
            await fs_extra_1.default.writeFile(appSettingsDevPath, JSON.stringify(appSettings, null, "\t"), "utf-8");
        }
        return teamsfx_api_1.ok(undefined);
    }
    catch (e) {
        const error = new teamsfx_api_1.SystemError(constants_2.SolutionSource, constants_2.SolutionError.FailedToResetAppSettingsDevelopment, localizeUtils_1.getDefaultString("core.appSettingsUtil.FailedToResetAppSettingsDevelopment"), localizeUtils_1.getLocalizedString("core.appSettingsUtil.FailedToResetAppSettingsDevelopment"));
        return teamsfx_api_1.err(error);
    }
}
exports.resetAppSettingsDevelopment = resetAppSettingsDevelopment;
//# sourceMappingURL=appSettingUtils.js.map