import { AzureAccountProvider, ContextV3, FxError, InputsWithProjectPath, Json, M365TokenProvider, ResourceContextV3, Result, SubscriptionInfo, TokenProvider, v2, v3, Void } from "@microsoft/teamsfx-api";
import { CustomizeSubscriptionType } from "../common/telemetry";
import { FillInAzureConfigsResult, ProvisionSubscriptionCheckResult } from "./constants";
import { ResourceGroupInfo } from "./utils/ResourceGroupHelper";
import { DriverContext } from "./driver/interface/commonArgs";
export interface M365TenantRes {
    tenantIdInToken: string;
    tenantUserName: string;
}
export declare class ProvisionUtils {
    preProvision(context: ContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
    /**
     * make sure subscription is correct before provision for V3
     * subscriptionId is provided from .env.xxx file
     */
    ensureSubscription(azureAccountProvider: AzureAccountProvider, givenSubscriptionId?: string): Promise<Result<SubscriptionInfo, FxError>>;
    /**
     * make sure subscription is correct before provision
     *
     */
    checkProvisionSubscription(ctx: v2.Context, envInfo: v3.EnvInfoV3, azureAccountProvider: AzureAccountProvider, targetSubscriptionIdFromCLI: string | undefined, envName: string | undefined, isResourceGroupOnlyFromCLI: boolean): Promise<Result<ProvisionSubscriptionCheckResult, FxError>>;
    updateEnvInfoSubscription(envInfo: v3.EnvInfoV3, subscriptionInfo: SubscriptionInfo): void;
    compareWithStateSubscription(ctx: v2.Context, envInfo: v3.EnvInfoV3, targetSubscriptionInfo: SubscriptionInfo, subscriptionInStateId: string | undefined, envName: string | undefined, customizeSubscriptionType: CustomizeSubscriptionType): Promise<Result<ProvisionSubscriptionCheckResult, FxError>>;
    clearEnvInfoStateResource(envInfo: v3.EnvInfoV3): void;
    ensureResourceGroup(azureAccountProvider: AzureAccountProvider, subscriptionId: string, givenResourceGroupName?: string, defaultResourceGroupName?: string): Promise<Result<ResourceGroupInfo, FxError>>;
    /**
     * Asks common questions and puts the answers in the global namespace of SolutionConfig
     *
     */
    fillInAzureConfigs(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider): Promise<Result<FillInAzureConfigsResult, FxError>>;
    getM365TenantId(m365TokenProvider: M365TokenProvider): Promise<Result<M365TenantRes, FxError>>;
    askForProvisionConsentV3(ctx: DriverContext, m365tenant: M365TenantRes | undefined, azureSubInfo: SubscriptionInfo, envName: string | undefined): Promise<Result<undefined, FxError>>;
    ensureM365TenantMatchesV3(actions: string[], tenantId: string | undefined, env: string | undefined, source: string): Promise<Result<undefined, FxError>>;
    askForProvisionConsent(ctx: v2.Context, azureAccountProvider: AzureAccountProvider, envInfo: v3.EnvInfoV3, hasSwitchedM365Tenant: boolean, hasSwitchedSubscription: boolean, m365AccountName: string, hasAzureResource: boolean, previousM365TenantId: string, previousSubscriptionId?: string): Promise<Result<Void, FxError>>;
}
export declare function getSubscriptionId(state: Json): string;
export declare function getTeamsAppTenantId(state: Json): string;
export declare function findSubscriptionFromList(subscriptionId: string, subscriptions: SubscriptionInfo[]): SubscriptionInfo | undefined;
export declare function checkWhetherLocalDebugM365TenantMatches(envInfo: v3.EnvInfoV3 | undefined, ctx: ResourceContextV3, isCSharpProject: boolean, localDebugTenantId: string | undefined, m365TokenProvider: M365TokenProvider, inputs: InputsWithProjectPath): Promise<Result<Void, FxError>>;
export declare function parseTeamsAppTenantId(appStudioToken?: Record<string, unknown>): Result<string, FxError>;
export declare function parseUserName(appStudioToken?: Record<string, unknown>): Result<string, FxError>;
export declare function hasBotServiceCreated(envInfo: v3.EnvInfoV3): boolean;
export declare function handleConfigFilesWhenSwitchAccount(envInfo: v3.EnvInfoV3, context: ResourceContextV3, inputs: InputsWithProjectPath, hasSwitchedM365Tenant: boolean, hasSwitchedSubscription: boolean, hasBotServiceCreatedBefore: boolean, isCSharpProject: boolean): Promise<Result<undefined, FxError>>;
export declare const provisionUtils: ProvisionUtils;
//# sourceMappingURL=provisionUtils.d.ts.map