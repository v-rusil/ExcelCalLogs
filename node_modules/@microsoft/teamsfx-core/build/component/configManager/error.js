"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidEnvFieldError = exports.InvalidEnvFolderPath = exports.InvalidLifecycleError = exports.YamlParsingError = exports.DriverNotFoundError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../common/localizeUtils");
const component = "ConfigManager";
class DriverNotFoundError extends teamsfx_api_1.UserError {
    constructor(taskName, uses) {
        const key = "configManager.error.driverNotFound";
        const errorOptions = {
            source: component,
            name: "DriverNotFoundError",
            message: localizeUtils_1.getDefaultString(key, uses, taskName),
            displayMessage: localizeUtils_1.getLocalizedString(key, uses, taskName),
        };
        errorOptions.helpLink = "https://aka.ms/teamsfx-actions/action-not-found";
        super(errorOptions);
    }
}
exports.DriverNotFoundError = DriverNotFoundError;
class YamlParsingError extends teamsfx_api_1.UserError {
    constructor(yamlPath, reason) {
        const key = "configManager.error.yamlParsing";
        const errorOptions = {
            source: component,
            name: "YamlParsingError",
            message: localizeUtils_1.getDefaultString(key, yamlPath, reason.message),
            displayMessage: localizeUtils_1.getLocalizedString(key, yamlPath, reason.message),
        };
        errorOptions.helpLink = "https://aka.ms/teamsfx-actions/yaml-parsing-error";
        super(errorOptions);
        this.innerError = reason;
    }
}
exports.YamlParsingError = YamlParsingError;
class InvalidLifecycleError extends teamsfx_api_1.UserError {
    constructor(lifecycle) {
        const key = "configManager.error.invalidLifecycle";
        const errorOptions = {
            source: component,
            name: "InvalidLifecycleError",
            message: localizeUtils_1.getDefaultString(key, lifecycle),
            displayMessage: localizeUtils_1.getLocalizedString(key, lifecycle),
        };
        errorOptions.helpLink = "https://aka.ms/teamsfx-actions/invalid-lifecycle-error";
        super(errorOptions);
    }
}
exports.InvalidLifecycleError = InvalidLifecycleError;
class InvalidEnvFolderPath extends teamsfx_api_1.UserError {
    constructor(reason) {
        const key = "configManager.error.invalidEnvFolderPath";
        const errorOptions = {
            source: component,
            name: "InvalidEnvFolderPathError",
            message: localizeUtils_1.getDefaultString(key) + `${reason ? "(" + reason + ")" : ""}`,
            displayMessage: localizeUtils_1.getLocalizedString(key) + `${reason ? "(" + reason + ")" : ""}`,
        };
        errorOptions.helpLink = "https://aka.ms/teamsfx-actions/invalid-env-folder-error";
        super(errorOptions);
    }
}
exports.InvalidEnvFolderPath = InvalidEnvFolderPath;
class InvalidEnvFieldError extends teamsfx_api_1.UserError {
    constructor(actionName, lifecycle) {
        const key = "configManager.error.invalidEnvField";
        const errorOptions = {
            source: component,
            name: "InvalidEnvFieldError",
            message: localizeUtils_1.getDefaultString(key, actionName, lifecycle),
            displayMessage: localizeUtils_1.getLocalizedString(key, actionName, lifecycle),
        };
        errorOptions.helpLink = "https://aka.ms/teamsfx-actions/invalid-env-field-error";
        super(errorOptions);
    }
}
exports.InvalidEnvFieldError = InvalidEnvFieldError;
//# sourceMappingURL=error.js.map