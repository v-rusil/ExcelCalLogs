"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.APIMConfig = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
require("reflect-metadata");
const typedi_1 = require("typedi");
const constants_1 = require("../constants");
const actionExecutionMW_1 = require("../middleware/actionExecutionMW");
const constants_2 = require("../resource/apim/constants");
const utils_1 = require("../utils");
const azureResourceConfig_1 = require("./azureResourceConfig");
let APIMConfig = class APIMConfig extends azureResourceConfig_1.AzureResourceConfig {
    constructor() {
        super(...arguments);
        this.name = "apim-config";
        this.bicepModuleName = "apim";
        this.requisite = "apim";
        this.references = utils_1.ComponentConnections[constants_1.ComponentNames.APIM];
    }
    async generateBicep(context, inputs) {
        return super.generateBicep(context, inputs);
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            enableTelemetry: true,
            telemetryComponentName: "fx-resource-apim",
            telemetryEventName: constants_2.PluginLifeCycle.UpdateArmTemplates,
            errorSource: constants_2.ProjectConstants.pluginShortName,
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], APIMConfig.prototype, "generateBicep", null);
APIMConfig = tslib_1.__decorate([
    typedi_1.Service("apim-config")
], APIMConfig);
exports.APIMConfig = APIMConfig;
//# sourceMappingURL=apimConfig.js.map