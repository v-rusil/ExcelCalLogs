import { BaseComponentInnerError, ExternalApiCallError } from "./componentError";
/**
 * call external api error when deploy
 */
export declare class DeployExternalApiCallError extends ExternalApiCallError {
    static listPublishingCredentialsError(e?: unknown, helpLink?: string): DeployExternalApiCallError;
    static zipDeployError(e?: unknown, statusCode?: number, helpLink?: string): DeployExternalApiCallError;
    static zipDeployWithRemoteError(e?: unknown, statusCode?: number, helpLink?: string): DeployExternalApiCallError;
    static deployStatusError(e?: unknown, statusCode?: number, helpLink?: string): DeployExternalApiCallError;
    static deployRemoteStatusError(): DeployExternalApiCallError;
    static clearStorageError(operateName: string, errorCode: string | undefined, error: unknown, helpLink?: string): DeployExternalApiCallError;
    static uploadToStorageError(path: string, error?: unknown, helpLink?: string): DeployExternalApiCallError;
    static restartWebAppError(error?: unknown, helpLink?: string): DeployExternalApiCallError;
}
/**
 * parameter in environmental error or user input error
 */
export declare class DeployTimeoutError extends BaseComponentInnerError {
    constructor(name: string, messageKey: string, helpLink?: string);
    static checkDeployStatusTimeout(helpLink?: string): DeployTimeoutError;
}
/**
 * user input case some logic error
 */
export declare class DeployUserInputError extends BaseComponentInnerError {
    constructor(name: string, messageKey: string);
    static noFilesFindInDistFolder(): DeployUserInputError;
}
//# sourceMappingURL=deployError.d.ts.map