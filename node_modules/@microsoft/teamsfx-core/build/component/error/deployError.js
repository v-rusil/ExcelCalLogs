"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployUserInputError = exports.DeployTimeoutError = exports.DeployExternalApiCallError = void 0;
const componentError_1 = require("./componentError");
const deployConstant_1 = require("../constant/deployConstant");
/**
 * call external api error when deploy
 */
class DeployExternalApiCallError extends componentError_1.ExternalApiCallError {
    static listPublishingCredentialsError(statusCode = -1, error, helpLink) {
        error = error !== null && error !== void 0 ? error : "";
        return new DeployExternalApiCallError(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, "ListPublishingCredentialsError", "plugins.bot.FailedListPublishingCredentials", statusCode !== null && statusCode !== void 0 ? statusCode : -1, undefined, undefined, typeof error === "string" ? error : JSON.stringify(error), helpLink);
    }
    static zipDeployError(e, statusCode, helpLink) {
        return new DeployExternalApiCallError(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, "ZipDeployError", "plugins.bot.FailedDeployZipFile", statusCode !== null && statusCode !== void 0 ? statusCode : -1, undefined, undefined, undefined, helpLink);
    }
    static zipDeployWithRemoteError(e, statusCode, helpLink) {
        return new DeployExternalApiCallError(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, "ZipDeployError", "driver.deploy.error.deployToAzureRemoteFailed", statusCode !== null && statusCode !== void 0 ? statusCode : -1, undefined, undefined, undefined, helpLink);
    }
    static deployStatusError(e, statusCode, helpLink) {
        return new DeployExternalApiCallError(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, "DeployStatusError", 
        // eslint-disable-next-line no-secrets/no-secrets
        "plugins.bot.FailedCheckDeployStatus", statusCode !== null && statusCode !== void 0 ? statusCode : -1, undefined, undefined, helpLink);
    }
    static deployRemoteStatusError() {
        return new DeployExternalApiCallError(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, "DeployStatusError", "driver.deploy.zipDeploymentRemoteStartError", -1);
    }
    static clearStorageError(operateName, errorCode, error, helpLink) {
        var _a;
        return new DeployExternalApiCallError(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, "ClearStorageError", "error.frontend.ClearStorageError", -1, [operateName, (_a = errorCode === null || errorCode === void 0 ? void 0 : errorCode.toString()) !== null && _a !== void 0 ? _a : ""], ["plugins.frontend.checkSystemTimeTip", "plugins.frontend.checkNetworkTip"], typeof error === "string" ? error : JSON.stringify(error), helpLink);
    }
    static uploadToStorageError(path, error, helpLink) {
        return new DeployExternalApiCallError(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, "UploadToStorageError", "error.frontend.UploadToStorageError", -1, [path], ["plugins.frontend.checkSystemTimeTip", "plugins.frontend.checkNetworkTip"], typeof error === "string" ? error : JSON.stringify(error), helpLink);
    }
    static restartWebAppError(error, helpLink) {
        return new DeployExternalApiCallError(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, "RestartWebAppError", "plugins.bot.FailedRestartWebApp", -1, undefined, undefined, typeof error === "string" ? error : JSON.stringify(error), helpLink);
    }
}
exports.DeployExternalApiCallError = DeployExternalApiCallError;
/**
 * parameter in environmental error or user input error
 */
class DeployTimeoutError extends componentError_1.BaseComponentInnerError {
    constructor(name, messageKey, helpLink) {
        super(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, "UserError", name, messageKey, undefined, undefined, helpLink);
    }
    static checkDeployStatusTimeout(helpLink) {
        // eslint-disable-next-line no-secrets/no-secrets
        return new DeployTimeoutError("DeployTimeoutError", 
        // eslint-disable-next-line no-secrets/no-secrets
        "plugins.bot.CheckDeployStatusTimeout", helpLink);
    }
}
exports.DeployTimeoutError = DeployTimeoutError;
/**
 * user input case some logic error
 */
class DeployUserInputError extends componentError_1.BaseComponentInnerError {
    constructor(name, messageKey) {
        super(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, "UserError", name, messageKey);
    }
    static noFilesFindInDistFolder() {
        return new DeployUserInputError("NoFilesFindInDistFolder", "driver.deploy.error.noFileFindInDistributionFolder");
    }
}
exports.DeployUserInputError = DeployUserInputError;
//# sourceMappingURL=deployError.js.map