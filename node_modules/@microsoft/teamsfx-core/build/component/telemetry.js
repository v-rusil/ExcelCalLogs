"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendMigratedErrorEvent = exports.sendMigratedSuccessEvent = exports.sendMigratedStartEvent = exports.sendErrorEvent = exports.sendSuccessEvent = exports.sendStartEvent = exports.getCommonProperties = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const telemetry_1 = require("../common/telemetry");
const globalVars_1 = require("../core/globalVars");
const constants_1 = require("./constants");
const constants_2 = require("./resource/botService/constants");
const constants_3 = require("./constants");
const constants_4 = require("./constants");
const telemetryHelper_1 = require("./resource/botService/telemetryHelper");
function getCommonProperties() {
    const props = {
        [constants_4.TelemetryConstants.properties.appId]: globalVars_1.globalVars.teamsAppId,
        [constants_4.TelemetryConstants.properties.tenantId]: globalVars_1.globalVars.m365TenantId,
    };
    return props;
}
exports.getCommonProperties = getCommonProperties;
function sendStartEvent(eventName, properties, measurements) {
    var _a;
    const props = Object.assign(Object.assign({}, getCommonProperties()), properties);
    (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName + "-start", props, measurements !== null && measurements !== void 0 ? measurements : {});
}
exports.sendStartEvent = sendStartEvent;
function sendSuccessEvent(eventName, properties, measurements) {
    var _a;
    const props = Object.assign(Object.assign(Object.assign({}, getCommonProperties()), properties), { [constants_4.TelemetryConstants.properties.success]: constants_4.TelemetryConstants.values.yes });
    (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, props, measurements !== null && measurements !== void 0 ? measurements : {});
}
exports.sendSuccessEvent = sendSuccessEvent;
function sendErrorEvent(eventName, error, properties, measurements) {
    var _a;
    const errorCode = error.source + "." + error.name;
    const errorType = error instanceof teamsfx_api_1.SystemError
        ? constants_4.TelemetryConstants.values.systemError
        : constants_4.TelemetryConstants.values.userError;
    const props = Object.assign(Object.assign(Object.assign({}, getCommonProperties()), properties), { [constants_4.TelemetryConstants.properties.success]: constants_4.TelemetryConstants.values.no, [constants_4.TelemetryConstants.properties.errorCode]: errorCode, [constants_4.TelemetryConstants.properties.errorType]: errorType, [constants_4.TelemetryConstants.properties.errorMessage]: error.message });
    (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, props, measurements !== null && measurements !== void 0 ? measurements : {}, [
        constants_4.TelemetryConstants.properties.errorMessage,
    ]);
}
exports.sendErrorEvent = sendErrorEvent;
function sendMigratedStartEvent(eventName, context, inputs, properties, measurements) {
    var _a, _b, _c;
    if (!needMigrate(eventName, properties)) {
        return;
    }
    if (eventName === telemetry_1.TelemetryEvent.AddFeature) {
        const componentName = (_a = properties === null || properties === void 0 ? void 0 : properties[telemetry_1.TelemetryProperty.Component]) !== null && _a !== void 0 ? _a : "";
        const props = Object.assign(Object.assign({}, properties), { [telemetry_1.TelemetryProperty.Component]: migrateComponentName(componentName) });
        sendStartEvent(telemetry_1.TelemetryEvent.Scaffold, props, measurements);
        sendStartEvent(telemetry_1.TelemetryEvent.GenerateBicep, props, measurements);
        return;
    }
    if (eventName === telemetry_1.TelemetryEvent.Provision && ((_b = context.envInfo) === null || _b === void 0 ? void 0 : _b.envName) === "local") {
        migrateProvision((props) => {
            sendStartEvent(telemetry_1.TelemetryEvent.LocalDebug, props, measurements);
        }, context, properties);
        return;
    }
    if (eventName === telemetry_1.TelemetryEvent.Provision && ((_c = context.envInfo) === null || _c === void 0 ? void 0 : _c.envName) !== "local") {
        migrateProvision((props) => {
            sendStartEvent(telemetry_1.TelemetryEvent.Provision, props, measurements);
        }, context, properties);
        return;
    }
    if (eventName === telemetry_1.TelemetryEvent.Deploy) {
        migrateDeploy((props) => {
            sendStartEvent(telemetry_1.TelemetryEvent.PreDeploy, props, measurements);
            sendSuccessEvent(telemetry_1.TelemetryEvent.PreDeploy, props, measurements);
            sendStartEvent(telemetry_1.TelemetryEvent.Deploy, props, measurements);
        }, context, inputs, properties);
        return;
    }
}
exports.sendMigratedStartEvent = sendMigratedStartEvent;
function sendMigratedSuccessEvent(eventName, context, inputs, properties, measurements) {
    var _a, _b, _c;
    if (!needMigrate(eventName, properties)) {
        return;
    }
    if (eventName === telemetry_1.TelemetryEvent.AddFeature) {
        const componentName = (_a = properties === null || properties === void 0 ? void 0 : properties[telemetry_1.TelemetryProperty.Component]) !== null && _a !== void 0 ? _a : "";
        let props = Object.assign(Object.assign({}, properties), { [telemetry_1.TelemetryProperty.Component]: migrateComponentName(componentName) });
        if (componentName === constants_4.ComponentNames.TeamsBot) {
            props = fulfillCommonBotProperties(props, context.projectSetting.components.find((component) => component.name === constants_4.ComponentNames.TeamsBot));
        }
        sendSuccessEvent(telemetry_1.TelemetryEvent.Scaffold, props, measurements);
        sendSuccessEvent(telemetry_1.TelemetryEvent.GenerateBicep, props, measurements);
        return;
    }
    if (eventName === telemetry_1.TelemetryEvent.Provision && ((_b = context.envInfo) === null || _b === void 0 ? void 0 : _b.envName) === "local") {
        migrateProvision((props) => {
            sendSuccessEvent(telemetry_1.TelemetryEvent.LocalDebug, props, measurements);
            sendStartEvent(telemetry_1.TelemetryEvent.PostLocalDebug, props, measurements);
            sendSuccessEvent(telemetry_1.TelemetryEvent.PostLocalDebug, props, measurements);
        }, context, properties);
        return;
    }
    if (eventName === telemetry_1.TelemetryEvent.Provision && ((_c = context.envInfo) === null || _c === void 0 ? void 0 : _c.envName) !== "local") {
        migrateProvision((props) => {
            sendSuccessEvent(telemetry_1.TelemetryEvent.Provision, props, measurements);
            sendStartEvent(telemetry_1.TelemetryEvent.PostProvision, props, measurements);
            sendSuccessEvent(telemetry_1.TelemetryEvent.PostProvision, props, measurements);
        }, context, properties);
        return;
    }
    if (eventName === telemetry_1.TelemetryEvent.Deploy) {
        migrateDeploy((props) => sendSuccessEvent(eventName, props, measurements), context, inputs, properties);
        return;
    }
}
exports.sendMigratedSuccessEvent = sendMigratedSuccessEvent;
function sendMigratedErrorEvent(eventName, error, context, inputs, properties, measurements) {
    if (!needMigrate(eventName, properties)) {
        return;
    }
    let props = Object.assign({}, properties);
    let componentName;
    switch (error.source) {
        case "Storage":
            componentName = constants_3.PluginNames.FE;
            break;
        case "WebApp":
            componentName = (inputs === null || inputs === void 0 ? void 0 : inputs["Scenario"]) === constants_4.Scenarios.Tab ? constants_3.PluginNames.FE : constants_3.PluginNames.BOT;
            break;
        case "Functions":
            componentName = (inputs === null || inputs === void 0 ? void 0 : inputs["Scenario"]) === constants_4.Scenarios.Api ? constants_3.PluginNames.FUNC : constants_3.PluginNames.BOT;
            break;
        case "BotService":
        case "BT":
            componentName = constants_3.PluginNames.BOT;
            telemetryHelper_1.TelemetryHelper.fillAppStudioErrorProperty(error.innerError, props);
            break;
    }
    if (componentName) {
        props = Object.assign(Object.assign({}, props), { [telemetry_1.TelemetryProperty.Component]: componentName });
        sendErrorEvent(migrateEventName(eventName, context), error, props, measurements);
    }
}
exports.sendMigratedErrorEvent = sendMigratedErrorEvent;
function needMigrate(eventName, properties) {
    var _a;
    const component = (_a = properties === null || properties === void 0 ? void 0 : properties[telemetry_1.TelemetryProperty.Component]) !== null && _a !== void 0 ? _a : "";
    return ([constants_4.ComponentNames.TeamsApi, constants_4.ComponentNames.TeamsBot, constants_4.ComponentNames.TeamsTab].includes(component) ||
        (component === "core" &&
            eventName !== telemetry_1.TelemetryEvent.AddFeature &&
            eventName !== telemetry_1.TelemetryEvent.CreateProject));
}
function migrateEventName(eventName, context) {
    var _a;
    if (eventName === telemetry_1.TelemetryEvent.AddFeature) {
        return telemetry_1.TelemetryEvent.Scaffold;
    }
    if (eventName === telemetry_1.TelemetryEvent.Provision && ((_a = context.envInfo) === null || _a === void 0 ? void 0 : _a.envName) === "local") {
        return telemetry_1.TelemetryEvent.LocalDebug;
    }
    return eventName;
}
function getMigrateComponents(context) {
    return context.projectSetting.components.filter((component) => [constants_4.ComponentNames.TeamsApi, constants_4.ComponentNames.TeamsBot, constants_4.ComponentNames.TeamsTab].includes(component.name));
}
function migrateComponentName(componentName) {
    switch (componentName) {
        case constants_4.ComponentNames.TeamsApi:
            return constants_3.PluginNames.FUNC;
        case constants_4.ComponentNames.TeamsBot:
            return constants_3.PluginNames.BOT;
        case constants_4.ComponentNames.TeamsTab:
            return constants_3.PluginNames.FE;
        default:
            return componentName;
    }
}
function migrateDeploy(cb, context, inputs, properties) {
    let inputPlugins = inputs[constants_1.AzureSolutionQuestionNames.PluginSelectionDeploy];
    if (!Array.isArray(inputPlugins)) {
        inputPlugins = context.projectSetting.components
            .filter((component) => component.deploy && component.hosting != undefined)
            .map((component) => migrateComponentName(component.name));
    }
    if (Array.isArray(inputPlugins)) {
        inputPlugins.forEach((pluginName) => {
            let props = Object.assign(Object.assign({}, properties), { [telemetry_1.TelemetryProperty.Component]: migrateComponentName(pluginName) });
            if (pluginName === constants_3.PluginNames.BOT) {
                props = fulfillCommonBotProperties(props, context.projectSetting.components.find((component) => component.name === constants_4.ComponentNames.TeamsBot));
            }
            cb(props);
        });
    }
}
function migrateProvision(cb, context, properties) {
    const components = getMigrateComponents(context);
    components.forEach((component) => {
        let props = Object.assign(Object.assign({}, properties), { [telemetry_1.TelemetryProperty.Component]: migrateComponentName(component.name) });
        props = fulfillCommonBotProperties(props, component);
        cb(props);
    });
}
function fulfillCommonBotProperties(props, component) {
    if ((component === null || component === void 0 ? void 0 : component.name) === constants_4.ComponentNames.TeamsBot) {
        props = Object.assign(Object.assign({}, props), { [constants_2.TelemetryKeys.HostType]: (component === null || component === void 0 ? void 0 : component.hosting) === constants_4.ComponentNames.Function ? "azure-function" : "app-service", [constants_2.TelemetryKeys.BotCapabilities]: (component === null || component === void 0 ? void 0 : component.capabilities)
                ? JSON.stringify(component.capabilities)
                : "" });
    }
    return props;
}
//# sourceMappingURL=telemetry.js.map