import { Effect } from "@microsoft/teamsfx-api";
export declare class ProgressTitles {
    static readonly scaffoldTab: string;
    static readonly scaffoldBot: string;
    static readonly scaffoldApi: string;
    static readonly buildingTab: string;
    static readonly buildingBot: string;
    static readonly buildingApi: string;
    static readonly provisionBot: string;
    static readonly generateTemplate: string;
    static readonly generateSample: string;
    static readonly configureStorage: string;
    static readonly deploying: (component: string, scenario?: string | undefined) => string;
}
export declare class ProgressMessages {
    static readonly scaffoldTab: string;
    static readonly scaffoldBot: string;
    static readonly scaffoldApi: string;
    static readonly buildingTab: string;
    static readonly buildingBot: string;
    static readonly buildingApi: string;
    static readonly packingCode: string;
    static readonly enableStaticWebsite: string;
    static readonly provisionBot: string;
    static readonly generateTemplate: () => string;
    static readonly generateSample: () => string;
    static readonly getDeploymentSrcAndDest: string;
    static readonly clearStorageAccount: string;
    static readonly uploadTabToStorage: string;
    static readonly getAzureAccountInfoForDeploy: string;
    static readonly getAzureUploadEndpoint: string;
    static readonly uploadZipFileToAzure: string;
    static readonly checkAzureDeployStatus: string;
    static readonly restartAzureFunctionApp: string;
    static readonly restartAzureService: string;
    static readonly configureAzureStorageEnableStaticWebsite: string;
    static readonly checkAzureStorageEnableStaticWebsite: string;
    static readonly azureStorageStaticWebsiteAlreadyEnabled: string;
    static readonly enableAzureStorageStaticWebsite: string;
    static readonly getAzureStorageAccountInfo: string;
    static readonly clearStorageExistsBlobs: string;
    static readonly uploadFilesToStorage: string;
}
export declare class LogMessages {
    static readonly updateFunctionAppSettings: string;
    static readonly enableStaticWebsite: string;
    static readonly getTemplateFrom: (url: string) => string;
    static readonly getTemplateFromLocal: string;
    static readonly projectScaffoldAt: (basePath: string) => string;
    static readonly failedToInstallDotnet: (error: Error) => string;
    static readonly askFunctionName: string;
    static readonly FailedSaveEnv: (envPath: string) => string;
    static readonly FailedLoadEnv: (envPath: string) => string;
}
export interface LocalizedMessage {
    default: string;
    localized: string;
}
export declare const getLocalizedMessage: (key: string, ...params: any[]) => LocalizedMessage;
export declare function concatErrorMessageWithSuggestions(message: LocalizedMessage, suggestions: LocalizedMessage[]): LocalizedMessage;
export declare class ErrorMessage {
    static readonly programmingLanguageInvalid: string;
    static readonly SomethingIsMissing: (something: string) => LocalizedMessage;
    static readonly SomethingIsNotExisting: (something: string) => LocalizedMessage;
    static readonly WorkingDirIsMissing: LocalizedMessage;
    static readonly invalidFunctionName: string;
    static readonly functionAlreadyExists: string;
    static readonly RetryTheCurrentStep: LocalizedMessage;
    static readonly RecreateTheProject: LocalizedMessage;
    static readonly CheckOutputLogAndTryToFix: LocalizedMessage;
    static readonly ReopenWorkingDir: (path?: string) => LocalizedMessage;
    static readonly RunFailedCommand: (command: string, path: string) => LocalizedMessage;
    static readonly CheckCommandOutputAndTryToFixIt: LocalizedMessage;
}
export declare class Plans {
    static readonly scaffold: (scenario: string, folder: string) => Effect;
    static readonly buildProject: (folder: string) => Effect;
    static readonly deploy: (component: string, folder: string) => Effect;
    static readonly enableStaticWebsite: () => Effect;
    static readonly createAADforBot: () => Effect;
    static readonly registerBot: () => Effect;
    static readonly updateBotEndpoint: () => Effect;
    static readonly generateSourceCodeAndConfig: (feature: string) => Effect;
    static readonly generateBicepAndConfig: (feature: string) => Effect;
    static readonly addFeature: (feature: string) => Effect;
}
//# sourceMappingURL=messages.d.ts.map