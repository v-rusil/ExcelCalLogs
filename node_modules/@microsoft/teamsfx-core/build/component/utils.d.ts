import { Bicep, CallServiceEffect, Component, ConfigurationBicep, ContextV3, FileEffect, FxError, Inputs, InputsWithProjectPath, Json, ProjectSettingsV3, ProvisionBicep, Result, TelemetryReporter, UserInteraction, v3 } from "@microsoft/teamsfx-api";
import { DriverContext } from "./driver/interface/commonArgs";
export declare function persistProvisionBicep(projectPath: string, provisionBicep: ProvisionBicep): Promise<Result<any, FxError>>;
export declare function persistProvisionBicepPlans(projectPath: string, provisionBicep: ProvisionBicep): Promise<string[]>;
export declare function persistConfigBicep(projectPath: string, configBicep: ConfigurationBicep): Promise<Result<any, FxError>>;
export declare function persistConfigBicepPlans(projectPath: string, provisionBicep: ProvisionBicep): Promise<string[]>;
export declare function persistParamsBicepPlans(projectPath: string, params: Record<string, string>): string[];
export declare function readParametersJson(projectPath: string, env: string): Promise<Json | undefined>;
export declare function writeParametersJson(projectPath: string, env: string, json: Json): Promise<void>;
export declare function persistParams(projectPath: string, appName: string, params?: Record<string, string>): Promise<Result<any, FxError>>;
export declare class BicepUtils {
    persistBiceps(projectPath: string, appName: string, biceps: Bicep[]): Promise<Result<any, FxError>>;
}
export declare const bicepUtils: BicepUtils;
export declare function persistBicep(projectPath: string, appName: string, bicep: Bicep): Promise<Result<any, FxError>>;
export declare function persistBicepPlans(projectPath: string, bicep: Bicep): Promise<string[]>;
export declare function fileEffectPlanStrings(fileEffect: FileEffect): string[];
export declare function serviceEffectPlanString(serviceEffect: CallServiceEffect): string;
export declare function createFilesEffects(files: string[], operateIfExists?: "replace" | "skip", remarks?: string): FileEffect[];
export declare function createFileEffect(file: string, operateIfExists?: "replace" | "skip" | "append", remarks?: string): FileEffect;
export declare function appendFileEffect(file: string, remarks?: string): FileEffect;
export declare function fileEffectPlanString(effect: FileEffect): string | undefined;
export declare function newProjectSettingsV3(): ProjectSettingsV3;
export declare function createContextV3(projectSettings?: ProjectSettingsV3): ContextV3;
export declare function createDriverContext(inputs: Inputs): DriverContext;
export declare function normalizeName(appName: string): string;
export declare function generateResourceBaseName(appName: string, envName: string): string;
export declare function isInComponentConnection(component: Component, item: string): boolean;
export declare function getHostingComponent(component: Component, projectSettings: ProjectSettingsV3): Component | undefined;
export declare function isLocalEnv(context: ContextV3): boolean;
export declare function generateConfigBiceps(context: ContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
export declare const ComponentConnections: {
    [x: string]: string[];
};
export declare function ensureComponentConnections(settingsV3: ProjectSettingsV3): void;
export declare function resetEnvInfoWhenSwitchM365(envInfo: v3.EnvInfoV3): void;
export declare function addFeatureNotify(inputs: Inputs, ui: UserInteraction, type: "Capability" | "Resource", features: string[]): void;
export declare function isCSharpProject(programmingLanguage: string | undefined): boolean;
export declare function scaffoldRootReadme(projectSettings: ProjectSettingsV3, projectPath: string): Promise<void>;
export declare function sendErrorTelemetryThenReturnError(eventName: string, error: FxError, reporter?: TelemetryReporter, properties?: {
    [p: string]: string;
}, measurements?: {
    [p: string]: number;
}, errorProps?: string[]): FxError;
//# sourceMappingURL=utils.d.ts.map