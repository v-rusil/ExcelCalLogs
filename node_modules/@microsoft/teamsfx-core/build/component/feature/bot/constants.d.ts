export declare const BotCapabilities: {
    readonly NOTIFICATION: "notification";
    readonly COMMAND_AND_RESPONSE: "command-response";
    readonly WORKFLOW: "workflow";
    readonly BOT: "bot";
    readonly MESSAGE_EXTENSION: "message-extension";
    readonly M365_SEARCH_APP: "m365-search-app";
};
export declare type BotCapability = typeof BotCapabilities[keyof typeof BotCapabilities];
export declare enum TemplateProjectsScenarios {
    DEFAULT_SCENARIO_NAME = "default",
    NOTIFICATION_RESTIFY_SCENARIO_NAME = "notification-restify",
    NOTIFICATION_WEBAPI_SCENARIO_NAME = "notification-webapi",
    NOTIFICATION_FUNCTION_BASE_SCENARIO_NAME = "notification-function-base",
    NOTIFICATION_FUNCTION_TRIGGER_HTTP_SCENARIO_NAME = "notification-trigger-http",
    NOTIFICATION_FUNCTION_TRIGGER_TIMER_SCENARIO_NAME = "notification-trigger-timer",
    COMMAND_AND_RESPONSE_SCENARIO_NAME = "command-and-response",
    WORKFLOW_SCENARIO_NAME = "workflow",
    M365_SCENARIO_NAME = "m365"
}
export declare const TriggerTemplateScenarioMappings: {
    readonly http: TemplateProjectsScenarios.NOTIFICATION_FUNCTION_TRIGGER_HTTP_SCENARIO_NAME;
    readonly timer: TemplateProjectsScenarios.NOTIFICATION_FUNCTION_TRIGGER_TIMER_SCENARIO_NAME;
};
export declare class QuestionNames {
    static readonly CAPABILITIES = "capabilities";
    static readonly BOT_HOST_TYPE_TRIGGER = "bot-host-type-trigger";
}
export declare const NotificationTriggers: {
    readonly HTTP: "http";
    readonly TIMER: "timer";
};
export declare type NotificationTrigger = typeof NotificationTriggers[keyof typeof NotificationTriggers];
export declare type BotTrigger = NotificationTrigger;
//# sourceMappingURL=constants.d.ts.map