// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleHandler = void 0;
const tslib_1 = require("tslib");
const path = tslib_1.__importStar(require("path"));
const fs = tslib_1.__importStar(require("fs-extra"));
const constants_1 = require("./constants");
const folder_1 = require("../../../folder");
const result_1 = require("./result");
const constants_2 = require("../../../common/constants");
const errors_1 = require("./errors");
const utils_1 = require("./utils");
const tools_1 = require("../../../common/tools");
class SampleHandler {
    constructor(projectPath, languageType, component) {
        this.projectRoot = projectPath;
        this.languageExt = languageType === constants_1.LanguageType.JS ? constants_1.FileType.JS : constants_1.FileType.TS;
        this.component = component;
    }
    async generateSampleCode(config) {
        const fileSuffix = this.languageExt;
        const baseDirectory = path.join(folder_1.getTemplatesFolder(), "plugins", "resource", "apiconnector", "sample");
        const templateDirectory = path.join(baseDirectory, fileSuffix);
        const headerCommentTemplateFilePath = path.join(baseDirectory, constants_1.Constants.headerCommentTemplate);
        const footerCommentTemplateFilePath = path.join(baseDirectory, constants_1.Constants.footerCommentTemplate);
        const templateName = config.AuthConfig.AuthType + constants_1.Constants.templateEx;
        const templateFilePath = path.join(templateDirectory, templateName);
        try {
            const footerCommentString = await fs.readFile(footerCommentTemplateFilePath, constants_2.ConstantString.UTF8Encoding);
            const headerCommentString = await fs.readFile(headerCommentTemplateFilePath, constants_2.ConstantString.UTF8Encoding);
            let templateString = await fs.readFile(templateFilePath, constants_2.ConstantString.UTF8Encoding);
            templateString = `${headerCommentString}\n${templateString}\n${footerCommentString}`;
            const context = {
                config: config,
                capitalName: config.APIName.toUpperCase(),
                component: this.component,
                languageExt: this.languageExt,
            };
            const sampleFileName = config.APIName + "." + fileSuffix;
            const componentPath = path.join(this.projectRoot, this.component);
            const sampleDirPath = utils_1.getSampleDirPath(componentPath);
            fs.ensureDir(sampleDirPath);
            const sampleFilePath = path.join(sampleDirPath, sampleFileName);
            if (await fs.pathExists(sampleFilePath)) {
                await fs.remove(sampleFilePath);
            }
            const sampleFile = tools_1.compileHandlebarsTemplateString(templateString, context);
            await fs.writeFile(sampleFilePath, sampleFile);
            return {
                changeType: result_1.FileChangeType.Create,
                filePath: sampleFilePath,
            };
        }
        catch (error) {
            throw result_1.ResultFactory.SystemError(errors_1.ErrorMessage.SampleCodeCreateFailError.name, errors_1.ErrorMessage.SampleCodeCreateFailError.message(templateFilePath, error.message));
        }
    }
}
exports.SampleHandler = SampleHandler;
//# sourceMappingURL=sampleHandler.js.map