// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvHandler = exports.ApiDataManager = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const localEnvProvider_1 = require("../../../common/local/localEnvProvider");
const result_1 = require("./result");
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
class ApiDataManager {
    constructor() {
        this.apiConnector = {};
    }
    updateLocalApiEnvs(localEnvs) {
        const customEnvs = localEnvs.customizedLocalEnvs;
        for (const item in this.apiConnector) {
            const apis = this.apiConnector[item];
            for (const [key, value] of Array.from(apis)) {
                if (customEnvs[key]) {
                    throw result_1.ResultFactory.UserError(errors_1.ErrorMessage.envVarExistError.name, errors_1.ErrorMessage.envVarExistError.message(key));
                }
                else {
                    customEnvs[key] = value;
                }
            }
        }
        localEnvs.customizedLocalEnvs = customEnvs;
        return localEnvs;
    }
    addApiEnvs(config) {
        const apiName = config.APIName.toUpperCase();
        if (!this.apiConnector[apiName]) {
            this.apiConnector[apiName] = new Map();
        }
        const endPoint = constants_1.Constants.envPrefix + apiName + "_ENDPOINT";
        this.apiConnector[apiName].set(endPoint, config.EndPoint);
        if (config.AuthConfig.AuthType === constants_1.AuthType.BASIC) {
            this.addBasicEnvs(config);
        }
        else if (config.AuthConfig.AuthType === constants_1.AuthType.AAD) {
            this.addAADEnvs(config);
        }
        else if (config.AuthConfig.AuthType === constants_1.AuthType.APIKEY) {
            this.addAPIKeyEnvs(config);
        }
    }
    addBasicEnvs(config) {
        const apiName = config.APIName.toUpperCase();
        const apiConfig = this.apiConnector[apiName];
        const userName = constants_1.Constants.envPrefix + apiName + "_USERNAME";
        const passWd = constants_1.Constants.envPrefix + apiName + "_PASSWORD";
        const authConfig = config.AuthConfig;
        apiConfig.set(userName, authConfig.UserName);
        apiConfig.set(passWd, "");
    }
    addAADEnvs(config) {
        const apiName = config.APIName.toUpperCase();
        const apiConfig = this.apiConnector[apiName];
        const authConfig = config.AuthConfig;
        if (!authConfig.ReuseTeamsApp) {
            const tenantId = constants_1.Constants.envPrefix + apiName + "_TENANT_ID";
            const clientId = constants_1.Constants.envPrefix + apiName + "_CLIENT_ID";
            const clientSecret = constants_1.Constants.envPrefix + apiName + "_CLIENT_SECRET";
            apiConfig.set(tenantId, authConfig.TenantId);
            apiConfig.set(clientId, authConfig.ClientId);
            apiConfig.set(clientSecret, "");
        }
    }
    addAPIKeyEnvs(config) {
        const apiName = config.APIName.toUpperCase();
        const apiConfig = this.apiConnector[apiName];
        const apiKey = constants_1.Constants.envPrefix + apiName + "_API_KEY";
        apiConfig.set(apiKey, "");
    }
}
exports.ApiDataManager = ApiDataManager;
class EnvHandler {
    constructor(workspaceFolder, componentType) {
        this.projectRoot = workspaceFolder;
        this.componentType = componentType;
        this.apiDataManager = new ApiDataManager();
    }
    updateEnvs(config) {
        this.apiDataManager.addApiEnvs(config);
    }
    async saveLocalEnvFile() {
        const srcFile = path.join(this.projectRoot, this.componentType, constants_1.Constants.envFileName);
        let fileChangeType = result_1.FileChangeType.Update;
        if (!(await fs.pathExists(srcFile))) {
            await fs.createFile(srcFile);
            fileChangeType = result_1.FileChangeType.Create;
        }
        // update localEnvs
        try {
            const provider = new localEnvProvider_1.LocalEnvProvider(this.projectRoot);
            if (this.componentType === constants_1.ComponentType.BOT) {
                let localEnvsBot = await provider.loadBotLocalEnvs();
                localEnvsBot = this.updateLocalApiEnvs(localEnvsBot);
                await provider.saveLocalEnvs(undefined, undefined, localEnvsBot);
            }
            else if (this.componentType === constants_1.ComponentType.API) {
                let localEnvsBE = await provider.loadBackendLocalEnvs();
                localEnvsBE = this.updateLocalApiEnvs(localEnvsBE);
                await provider.saveLocalEnvs(undefined, localEnvsBE, undefined);
            }
        }
        catch (err) {
            if (err instanceof teamsfx_api_1.UserError) {
                throw err;
            }
            throw result_1.ResultFactory.SystemError(errors_1.ErrorMessage.ApiConnectorFileCreateFailError.name, errors_1.ErrorMessage.ApiConnectorFileCreateFailError.message(srcFile));
        }
        return {
            changeType: fileChangeType,
            filePath: srcFile,
        }; // return modified env file
    }
    updateLocalApiEnvs(localEnvs) {
        const res = this.apiDataManager.updateLocalApiEnvs(localEnvs);
        return res;
    }
}
exports.EnvHandler = EnvHandler;
//# sourceMappingURL=envHandler.js.map