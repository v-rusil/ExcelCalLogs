import { ApiConnectionMsg } from "./result";
export declare class ErrorMessage {
    static getMessages(key: string, ...params: any[]): ApiConnectionMsg;
    static readonly InvalidProjectError: {
        name: string;
        message: () => ApiConnectionMsg;
    };
    static readonly ApiConnectorInputError: {
        name: string;
        message: (key: string) => ApiConnectionMsg;
    };
    static readonly ApiConnectorPathError: {
        name: string;
        message: (pathName: string) => ApiConnectionMsg;
    };
    static readonly ApiConnectorFileCreateFailError: {
        name: string;
        message: (pathName: string) => ApiConnectionMsg;
    };
    static readonly ApiConnectorRouteError: {
        name: string;
        message: (funcName: string) => ApiConnectionMsg;
    };
    static readonly SampleCodeCreateFailError: {
        name: string;
        message: (pathName: string, reason: string) => ApiConnectionMsg;
    };
    static readonly NoValidCompoentExistError: {
        name: string;
        message: () => ApiConnectionMsg;
    };
    static readonly NoActivePluginsExistError: {
        name: string;
        message: () => ApiConnectionMsg;
    };
    static readonly generateApiConFilesError: {
        name: string;
        message: (reason: string) => ApiConnectionMsg;
    };
    static readonly sdkVersionImcompatibleError: {
        name: string;
        message: (component: string, localVersion: string, targetVersion: string) => ApiConnectionMsg;
    };
    static readonly localPkgFileNotExistError: {
        name: string;
        message: (component: string) => ApiConnectionMsg;
    };
    static readonly componentNotExistError: {
        name: string;
        message: (component: string) => ApiConnectionMsg;
    };
    static readonly envVarExistError: {
        name: string;
        message: (varName: string) => ApiConnectionMsg;
    };
}
//# sourceMappingURL=errors.d.ts.map