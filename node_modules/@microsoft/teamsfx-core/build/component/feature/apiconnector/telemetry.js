"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryUtils = exports.Telemetry = void 0;
const globalVars_1 = require("../../../core/globalVars");
class Telemetry {
}
exports.Telemetry = Telemetry;
Telemetry.componentName = "fx-resource-api-connector";
Telemetry.startSuffix = "-start";
Telemetry.valueYes = "yes";
Telemetry.valueNo = "no";
Telemetry.userError = "user";
Telemetry.systemError = "system";
Telemetry.stage = {
    questionModel: "question-model",
    scaffold: "scaffold",
    updatePkg: "update-package",
};
Telemetry.properties = {
    component: "component",
    success: "success",
    errorCode: "error-code",
    errorType: "error-type",
    errorMessage: "error-message",
    appid: "appid",
    authType: "auth-type",
    reuseTeamsApp: "reuse-teams-app",
    keyLocation: "key-location",
    componentType: "component-type",
};
class TelemetryUtils {
    static init(telemetryReporter) {
        TelemetryUtils.telemetryReporter = telemetryReporter;
    }
    static sendEvent(eventName, success, properties, measurements) {
        var _a;
        if (!properties) {
            properties = {};
        }
        if (success) {
            properties[Telemetry.properties.success] = Telemetry.valueYes;
        }
        this.addProperties(properties);
        (_a = TelemetryUtils.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(eventName, errorCode, errorType, errorMessage, properties, measurements) {
        var _a;
        if (!properties) {
            properties = {};
        }
        properties[Telemetry.properties.success] = Telemetry.valueNo;
        properties[Telemetry.properties.errorCode] = errorCode;
        properties[Telemetry.properties.errorType] = errorType;
        properties[Telemetry.properties.errorMessage] = errorMessage;
        this.addProperties(properties);
        (_a = TelemetryUtils.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, properties, measurements);
    }
    static addProperties(properties) {
        properties[Telemetry.properties.component] = Telemetry.componentName;
        const appId = globalVars_1.globalVars.teamsAppId;
        if (appId) {
            properties[Telemetry.properties.appid] = appId;
        }
        else {
            properties[Telemetry.properties.appid] = "";
        }
    }
}
exports.TelemetryUtils = TelemetryUtils;
//# sourceMappingURL=telemetry.js.map