// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notification = exports.concatLines = exports.checkInputEmpty = exports.sendErrorTelemetry = exports.removeFileIfExist = exports.copyFileIfExist = exports.getSampleDirPath = exports.getSampleFileName = exports.generateTempFolder = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs = tslib_1.__importStar(require("fs-extra"));
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const result_1 = require("./result");
const localizeUtils_1 = require("../../../common/localizeUtils");
const path_1 = tslib_1.__importDefault(require("path"));
const telemetry_1 = require("./telemetry");
function generateTempFolder() {
    const timestamp = Date.now();
    const backupFolderName = "ApiConnectorBackup-" + timestamp;
    return backupFolderName;
}
exports.generateTempFolder = generateTempFolder;
function getSampleFileName(apiName, languageType) {
    const languageExt = languageType === constants_1.LanguageType.JS ? constants_1.FileType.JS : constants_1.FileType.TS;
    return apiName + "." + languageExt;
}
exports.getSampleFileName = getSampleFileName;
function getSampleDirPath(componentPath) {
    let basePath = componentPath;
    if (fs.pathExistsSync(path_1.default.join(basePath, "src"))) {
        basePath = path_1.default.join(basePath, "src");
    }
    const sampleDirPath = path_1.default.join(basePath, constants_1.Constants.sampleCodeDir);
    return sampleDirPath;
}
exports.getSampleDirPath = getSampleDirPath;
async function copyFileIfExist(srcFile, targetFile) {
    if (await fs.pathExists(srcFile)) {
        await fs.copyFile(srcFile, targetFile);
    }
}
exports.copyFileIfExist = copyFileIfExist;
async function removeFileIfExist(file) {
    if (await fs.pathExists(file)) {
        await fs.remove(file);
    }
}
exports.removeFileIfExist = removeFileIfExist;
function sendErrorTelemetry(thrownErr, stage) {
    const errorCode = thrownErr.source + "." + thrownErr.name;
    const errorType = thrownErr instanceof teamsfx_api_1.SystemError ? telemetry_1.Telemetry.systemError : telemetry_1.Telemetry.userError;
    const errorMessage = thrownErr.message;
    telemetry_1.TelemetryUtils.sendErrorEvent(stage, errorCode, errorType, errorMessage);
    return thrownErr;
}
exports.sendErrorTelemetry = sendErrorTelemetry;
function checkInputEmpty(inputs, ...keys) {
    for (const key of keys) {
        if (!inputs[key]) {
            throw result_1.ResultFactory.SystemError(errors_1.ErrorMessage.ApiConnectorInputError.name, errors_1.ErrorMessage.ApiConnectorInputError.message(key));
        }
    }
}
exports.checkInputEmpty = checkInputEmpty;
function concatLines(line, interval = " ") {
    return line.reduce((prev, cur) => {
        return prev + interval + cur;
    });
}
exports.concatLines = concatLines;
class Notification {
    static GetBasicString(projectPath, apiName, components, languageType) {
        const fileName = getSampleFileName(apiName, languageType);
        const generatedFiles = concatLines(components.map((item) => {
            const sampleDirPath = getSampleDirPath(path_1.default.join(projectPath, item));
            return path_1.default.join(path_1.default.relative(projectPath, sampleDirPath), fileName);
        }), " and ");
        return localizeUtils_1.getLocalizedString("plugins.apiConnector.Notification.GenerateFiles", generatedFiles);
    }
    static GetLinkNotification() {
        return localizeUtils_1.getLocalizedString("plugins.apiConnector.Notification.LinkNotification", Notification.READ_MORE_URL);
    }
    static getNotificationMsg(projectPath, config, languageType) {
        const apiName = config.APIName;
        const retMsg = Notification.GetBasicString(projectPath, apiName, config.ComponentType, languageType);
        return retMsg;
    }
}
exports.Notification = Notification;
Notification.READ_MORE = () => localizeUtils_1.getLocalizedString("core.Notification.ReadMore");
Notification.READ_MORE_URL = "https://aka.ms/teamsfx-connect-api";
//# sourceMappingURL=utils.js.map