"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sql = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const workflow_1 = require("../workflow");
require("../connection/azureWebAppConfig");
require("../resource/azureSql");
require("../resource/identity");
const constants_1 = require("../constants");
const projectSettingsHelperV3_1 = require("../../common/projectSettingsHelperV3");
const utils_1 = require("../../common/utils");
const utils_2 = require("../utils");
const lodash_1 = require("lodash");
const constants_2 = require("../constants");
let Sql = class Sql {
    constructor() {
        this.name = "sql";
    }
    async add(context, inputs) {
        const addedResources = [];
        const sqlComponent = workflow_1.getComponent(context.projectSetting, constants_1.ComponentNames.AzureSQL);
        if (projectSettingsHelperV3_1.hasTab(context.projectSetting) && !projectSettingsHelperV3_1.hasApi(context.projectSetting)) {
            const teamsApi = typedi_1.Container.get(constants_1.ComponentNames.TeamsApi);
            const res = await teamsApi.add(context, inputs);
            if (res.isErr())
                return teamsfx_api_1.err(res.error);
            addedResources.push(constants_2.AzureResourceFunction.id);
        }
        const projectSettings = context.projectSetting;
        const remarks = [];
        if (!sqlComponent) {
            remarks.push("config 'azure-sql' in projectSettings");
            projectSettings.components.push({
                name: "azure-sql",
                provision: true,
            });
        }
        // generate bicep
        // bicep.init
        {
            const bicepComponent = typedi_1.Container.get("bicep");
            const res = await bicepComponent.init(inputs.projectPath);
            if (res.isErr())
                return teamsfx_api_1.err(res.error);
        }
        // sql bicep
        {
            const provisionType = sqlComponent ? "database" : "server";
            const clonedInputs = lodash_1.cloneDeep(inputs);
            clonedInputs.provisionType = provisionType;
            const sqlResource = typedi_1.Container.get(constants_1.ComponentNames.AzureSQL);
            const res = await sqlResource.generateBicep(context, clonedInputs);
            if (res.isErr())
                return teamsfx_api_1.err(res.error);
            const bicepRes = await utils_2.bicepUtils.persistBiceps(inputs.projectPath, utils_1.convertToAlphanumericOnly(context.projectSetting.appName), res.value);
            if (bicepRes.isErr())
                return bicepRes;
            remarks.push("generate sql bicep");
        }
        // generate config bicep
        {
            const res = await utils_2.generateConfigBiceps(context, inputs);
            if (res.isErr())
                return teamsfx_api_1.err(res.error);
            remarks.push("generate config biceps");
        }
        addedResources.push(constants_2.AzureResourceSQL.id);
        utils_2.addFeatureNotify(inputs, context.userInteraction, "Resource", addedResources);
        return teamsfx_api_1.ok(undefined);
    }
};
Sql = tslib_1.__decorate([
    typedi_1.Service("sql")
], Sql);
exports.Sql = Sql;
//# sourceMappingURL=sql.js.map