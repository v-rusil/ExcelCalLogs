"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExistingTemplatesStat = void 0;
const tslib_1 = require("tslib");
const factory_1 = require("./provider/factory");
const questions_1 = require("./questions");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
class ExistingTemplatesStat {
    constructor(projectPath, envNames) {
        this.existence = new Map([]);
        this.existence.clear();
        this.envNames = envNames;
        this.projectPath = projectPath;
    }
    static getInstance(projectPath, envNames) {
        if (!ExistingTemplatesStat.instance) {
            ExistingTemplatesStat.instance = new ExistingTemplatesStat(projectPath, envNames);
        }
        return ExistingTemplatesStat.instance;
    }
    notExisting(...args) {
        const key = ExistingTemplatesStat.genKey(...args);
        return !this.existence.get(key);
    }
    availableEnvOptions() {
        return this.envNames
            .filter((envName) => !this.existence.get(envName))
            .map((envName) => {
            return { id: envName, label: envName };
        });
    }
    availableProviderOptions(envName) {
        return questions_1.providerOptions.filter((providerOption) => {
            return !this.existence.get(ExistingTemplatesStat.genKey(envName, providerOption.id));
        });
    }
    availableTemplateOptions(envName, provider) {
        return questions_1.templateOptions().filter((templateOption) => {
            return !this.existence.get(ExistingTemplatesStat.genKey(envName, provider, templateOption.id));
        });
    }
    async scan() {
        // (envName, provider, template) -> existing (true or false)
        // (envName,) -> allExisting (true or false)
        // (envName, provider) -> allExisting (true or false)
        this.existence.clear();
        for (const envName of this.envNames) {
            let envAllExisting = true;
            for (const provider of questions_1.providerOptions) {
                const providerInstance = factory_1.CICDProviderFactory.create(provider.id);
                let providerAllExisting = true;
                for (const template of questions_1.templateOptions()) {
                    const existing = await fs.pathExists(path.join(this.projectPath, providerInstance.scaffoldTo, providerInstance.targetTemplateName(template.id, envName)));
                    this.existence.set(ExistingTemplatesStat.genKey(envName, provider.id, template.id), existing);
                    if (!existing) {
                        providerAllExisting = false;
                    }
                }
                this.existence.set(ExistingTemplatesStat.genKey(envName, provider.id), providerAllExisting);
                if (!providerAllExisting) {
                    envAllExisting = false;
                }
            }
            this.existence.set(envName, envAllExisting);
        }
    }
}
exports.ExistingTemplatesStat = ExistingTemplatesStat;
ExistingTemplatesStat.genKey = (...args) => {
    return args.join("_");
};
//# sourceMappingURL=existingTemplatesStat.js.map