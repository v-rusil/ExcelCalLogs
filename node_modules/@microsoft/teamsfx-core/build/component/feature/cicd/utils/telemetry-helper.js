"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.telemetryHelper = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../constants");
class telemetryHelper {
    static fillCommonProperty(ctx, envInfo, properties) {
        var _a, _b;
        properties[constants_1.TelemetryKeys.Component] = constants_1.PluginCICD.PLUGIN_NAME;
        properties[constants_1.TelemetryKeys.AppId] =
            ((_b = (_a = envInfo === null || envInfo === void 0 ? void 0 : envInfo.state) === null || _a === void 0 ? void 0 : _a[constants_1.PluginSolution.PLUGIN_NAME]) === null || _b === void 0 ? void 0 : _b[constants_1.PluginSolution.REMOTE_TEAMS_APPID]) || "";
    }
    static sendStartEvent(ctx, envInfo, eventName, properties = {}, measurements = {}) {
        var _a;
        properties[constants_1.TelemetryKeys.Success] = constants_1.TelemetryValues.Success;
        this.fillCommonProperty(ctx, envInfo, properties);
        (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(`${eventName}-start`, properties, measurements);
    }
    static sendSuccessEvent(ctx, envInfo, eventName, properties = {}, measurements = {}) {
        var _a;
        properties[constants_1.TelemetryKeys.Success] = constants_1.TelemetryValues.Success;
        this.fillCommonProperty(ctx, envInfo, properties);
        (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(ctx, envInfo, eventName, e, properties = {}, measurements = {}) {
        var _a;
        properties[constants_1.TelemetryKeys.Success] = constants_1.TelemetryValues.Fail;
        properties[constants_1.TelemetryKeys.ErrorMessage] = e.message;
        properties[constants_1.TelemetryKeys.ErrorCode] = e.name;
        this.fillCommonProperty(ctx, envInfo, properties);
        if (e instanceof teamsfx_api_1.SystemError) {
            properties[constants_1.TelemetryKeys.ErrorType] = constants_1.TelemetryValues.SystemError;
        }
        else if (e instanceof teamsfx_api_1.UserError) {
            properties[constants_1.TelemetryKeys.ErrorType] = constants_1.TelemetryValues.UserError;
        }
        (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, properties, measurements);
    }
    static sendResultEvent(ctx, envInfo, eventName, result, properties = {}, measurements = {}) {
        result.match(() => this.sendSuccessEvent(ctx, envInfo, eventName, properties, measurements), (e) => this.sendErrorEvent(ctx, envInfo, eventName, e, properties, measurements));
    }
}
exports.telemetryHelper = telemetryHelper;
//# sourceMappingURL=telemetry-helper.js.map