"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SsoScenario = exports.canAddSso = exports.SSO = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const localizeUtils_1 = require("../../common/localizeUtils");
const projectSettingsHelperV3_1 = require("../../common/projectSettingsHelperV3");
const utils_1 = require("../../common/utils");
const telemetry_1 = require("../../core/telemetry");
const constants_1 = require("../constants");
const constants_2 = require("../constants");
require("../connection/azureWebAppConfig");
const constants_3 = require("../constants");
const debug_1 = require("../debug");
const ManifestUtils_1 = require("../resource/appManifest/utils/ManifestUtils");
require("../resource/azureSql");
require("../resource/identity");
const utils_2 = require("../utils");
const workflow_1 = require("../workflow");
const tools_1 = require("../../common/tools");
const utils_3 = require("../resource/aadApp/utils");
let SSO = class SSO {
    constructor() {
        this.name = "sso";
    }
    async add(context, inputs) {
        if (tools_1.isV3Enabled()) {
            return addSsoV3(context, inputs);
        }
        context.telemetryReporter.sendTelemetryEvent(constants_1.SolutionTelemetryEvent.AddSsoStart, {
            [constants_1.SolutionTelemetryProperty.Component]: constants_1.SolutionTelemetryComponentName,
        });
        const scenario = this.getScenario(inputs);
        const updates = getUpdateComponents(context.projectSetting, scenario);
        // generate manifest
        const aadApp = typedi_1.Container.get(constants_3.ComponentNames.AadApp);
        {
            const res = await aadApp.generateManifest(context, inputs);
            if (res.isErr()) {
                return teamsfx_api_1.err(telemetry_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.AddSso, res.error, context.telemetryReporter));
            }
        }
        // config sso
        if (updates.aad) {
            context.projectSetting.components.push({
                name: constants_3.ComponentNames.AadApp,
                provision: true,
                deploy: true,
            });
        }
        if (updates.tab) {
            const teamsTabComponent = workflow_1.getComponent(context.projectSetting, constants_3.ComponentNames.TeamsTab);
            teamsTabComponent.sso = true;
        }
        if (updates.bot) {
            const teamsBotComponent = workflow_1.getComponent(context.projectSetting, constants_3.ComponentNames.TeamsBot);
            teamsBotComponent.sso = true;
        }
        // generate bicep
        {
            const res = await aadApp.generateBicep(context, inputs);
            if (res.isErr())
                return teamsfx_api_1.err(res.error);
            const bicepRes = await utils_2.bicepUtils.persistBiceps(inputs.projectPath, utils_1.convertToAlphanumericOnly(context.projectSetting.appName), res.value);
            if (bicepRes.isErr()) {
                return teamsfx_api_1.err(telemetry_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.AddSso, bicepRes.error, context.telemetryReporter));
            }
        }
        // generate auth files
        if (scenario !== SsoScenario.Create) {
            const isExistingTabAppRes = await ManifestUtils_1.manifestUtils.isExistingTab(inputs, context);
            if (isExistingTabAppRes.isErr())
                return teamsfx_api_1.err(isExistingTabAppRes.error);
            const res = await aadApp.generateAuthFiles(context, inputs, updates.tab || isExistingTabAppRes.value, updates.bot);
            if (res.isErr()) {
                return teamsfx_api_1.err(telemetry_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.AddSso, res.error, context.telemetryReporter));
            }
        }
        // update app manifest
        {
            const capabilities = [{ name: "WebApplicationInfo" }];
            const appManifest = typedi_1.Container.get(constants_3.ComponentNames.AppManifest);
            const res = await appManifest.addCapability(inputs, capabilities);
            if (res.isErr()) {
                return teamsfx_api_1.err(telemetry_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.AddSso, res.error, context.telemetryReporter));
            }
        }
        // local debug settings
        {
            const res = await debug_1.generateLocalDebugSettings(context, inputs);
            if (res.isErr()) {
                return teamsfx_api_1.err(telemetry_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.AddSso, res.error, context.telemetryReporter));
            }
        }
        // generate config bicep
        {
            const res = await utils_2.generateConfigBiceps(context, inputs);
            if (res.isErr()) {
                return teamsfx_api_1.err(telemetry_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.AddSso, res.error, context.telemetryReporter));
            }
        }
        // show notification
        if (inputs.platform == teamsfx_api_1.Platform.VSCode && scenario !== SsoScenario.Create) {
            context.userInteraction
                .showMessage("info", localizeUtils_1.getLocalizedString("core.addSso.learnMore", constants_1.AddSsoParameters.LearnMore()), false, constants_1.AddSsoParameters.LearnMore())
                .then((result) => {
                var _a;
                const userSelected = result.isOk() ? result.value : undefined;
                if (userSelected === constants_1.AddSsoParameters.LearnMore()) {
                    (_a = context.userInteraction) === null || _a === void 0 ? void 0 : _a.openUrl(constants_1.AddSsoParameters.LearnMoreUrl);
                    context.telemetryReporter.sendTelemetryEvent(constants_1.SolutionTelemetryEvent.AddSsoReadme, {
                        [constants_1.SolutionTelemetryProperty.Component]: constants_1.SolutionTelemetryComponentName,
                    });
                }
            });
        }
        else if (inputs.platform == teamsfx_api_1.Platform.CLI && scenario !== SsoScenario.Create) {
            await context.userInteraction.showMessage("info", localizeUtils_1.getLocalizedString("core.addSso.learnMore", constants_1.AddSsoParameters.LearnMoreUrl), false);
        }
        context.telemetryReporter.sendTelemetryEvent(constants_1.SolutionTelemetryEvent.AddSso, {
            [constants_1.SolutionTelemetryProperty.Component]: constants_1.SolutionTelemetryComponentName,
            [constants_1.SolutionTelemetryProperty.Success]: constants_3.TelemetryConstants.values.yes,
            [constants_1.SolutionTelemetryProperty.AddTabSso]: updates.tab
                ? constants_3.TelemetryConstants.values.yes
                : constants_3.TelemetryConstants.values.no,
            [constants_1.SolutionTelemetryProperty.AddBotSso]: updates.bot
                ? constants_3.TelemetryConstants.values.yes
                : constants_3.TelemetryConstants.values.no,
        });
        return teamsfx_api_1.ok({
            func: constants_1.AddSsoParameters.AddSso,
            capabilities: [
                ...(updates.tab ? [constants_1.AddSsoParameters.Tab] : []),
                ...(updates.bot ? [constants_1.AddSsoParameters.Bot] : []),
            ],
        });
    }
    getScenario(inputs) {
        let res = SsoScenario.AddSso;
        if (inputs.stage === teamsfx_api_1.Stage.create) {
            res = SsoScenario.Create;
        }
        if (inputs.stage === teamsfx_api_1.Stage.addFeature) {
            if (inputs[constants_2.AzureSolutionQuestionNames.Features] === constants_2.AzureResourceFunctionNewUI.id) {
                res = SsoScenario.AddFunction;
            }
            else if (inputs[constants_2.AzureSolutionQuestionNames.Features] === constants_2.SingleSignOnOptionItem.id) {
                res = SsoScenario.AddSso;
            }
        }
        return res;
    }
};
SSO = tslib_1.__decorate([
    typedi_1.Service("sso")
], SSO);
exports.SSO = SSO;
async function addSsoV3(context, inputs) {
    context.telemetryReporter.sendTelemetryEvent(constants_1.SolutionTelemetryEvent.AddSsoStart, {
        [constants_1.SolutionTelemetryProperty.Component]: constants_1.SolutionTelemetryComponentName,
    });
    const res = await utils_3.createAuthFiles(inputs, constants_1.Language.CSharp, false, false, true);
    if (res.isErr()) {
        return teamsfx_api_1.err(telemetry_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.AddSso, res.error, context.telemetryReporter));
    }
    context.telemetryReporter.sendTelemetryEvent(constants_1.SolutionTelemetryEvent.AddSso, {
        [constants_1.SolutionTelemetryProperty.Component]: constants_1.SolutionTelemetryComponentName,
        [constants_1.SolutionTelemetryProperty.Success]: constants_3.TelemetryConstants.values.yes,
    });
    return teamsfx_api_1.ok(undefined);
}
/**
 * Check the components that should be update when add sso based on the project setting.
 * 1. it is triggered by enabled-sso tab project in create stage. Update tab and aad components.
 * 2. mini app is an existing tab app. Update aad only.
 * 3. general project. Check the tab and bot components.
 *    for bot component, message-extension and function hosting doesnot support sso.
 */
function getUpdateComponents(projectSetting, scenario) {
    if (scenario === SsoScenario.Create) {
        return {
            tab: true,
            aad: true,
        };
    }
    const hasAad = projectSettingsHelperV3_1.hasAAD(projectSetting);
    if (projectSettingsHelperV3_1.isMiniApp(projectSetting)) {
        return {
            aad: !hasAad,
        };
    }
    let needsBot = false;
    let needsTab = false;
    const teamsBotComponent = workflow_1.getComponent(projectSetting, constants_3.ComponentNames.TeamsBot);
    if (teamsBotComponent &&
        !teamsBotComponent.sso &&
        teamsBotComponent.hosting !== constants_3.ComponentNames.Function) {
        needsBot = true;
    }
    const teamsTabComponent = workflow_1.getComponent(projectSetting, constants_3.ComponentNames.TeamsTab);
    if (teamsTabComponent && !teamsTabComponent.sso) {
        needsTab = true;
    }
    return {
        bot: needsBot,
        tab: needsTab,
        aad: !hasAad,
    };
}
function canAddSso(projectSettings, returnError = false) {
    const hasAad = projectSettingsHelperV3_1.hasAAD(projectSettings);
    if (projectSettingsHelperV3_1.isMiniApp(projectSettings)) {
        return !hasAad;
    }
    const update = getUpdateComponents(projectSettings, SsoScenario.AddSso);
    if (update.tab || update.bot) {
        return true;
    }
    else {
        const aadComponent = workflow_1.getComponent(projectSettings, constants_3.ComponentNames.AadApp);
        const teamsBotComponent = workflow_1.getComponent(projectSettings, constants_3.ComponentNames.TeamsBot);
        if (teamsBotComponent) {
            if (teamsBotComponent.hosting === constants_3.ComponentNames.Function) {
                return returnError
                    ? teamsfx_api_1.err(new teamsfx_api_1.SystemError(constants_1.SolutionSource, constants_1.SolutionError.AddSsoNotSupported, localizeUtils_1.getLocalizedString("core.addSso.functionNotSupport")))
                    : false;
            }
        }
        if (aadComponent) {
            return returnError
                ? teamsfx_api_1.err(new teamsfx_api_1.SystemError(constants_1.SolutionSource, constants_1.SolutionError.SsoEnabled, localizeUtils_1.getLocalizedString("core.addSso.ssoEnabled")))
                : false;
        }
        return false;
    }
}
exports.canAddSso = canAddSso;
var SsoScenario;
(function (SsoScenario) {
    SsoScenario["Create"] = "create";
    SsoScenario["AddFunction"] = "addFunction";
    SsoScenario["AddSso"] = "addSso";
})(SsoScenario = exports.SsoScenario || (exports.SsoScenario = {}));
//# sourceMappingURL=sso.js.map