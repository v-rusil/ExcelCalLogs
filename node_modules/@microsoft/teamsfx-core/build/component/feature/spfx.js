"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddSPFxQuestionNode = exports.getSPFxScaffoldQuestion = exports.SPFxTab = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const globalVars_1 = require("../../core/globalVars");
const question_1 = require("../../core/question");
const questions_1 = require("../../component/resource/spfx/utils/questions");
const constants_1 = require("../constants");
const debug_1 = require("../debug");
const utils_1 = require("../utils");
const featureFlags_1 = require("../../common/featureFlags");
const constants_2 = require("../constants");
const workflow_1 = require("../workflow");
let SPFxTab = class SPFxTab {
    constructor() {
        this.name = constants_1.ComponentNames.SPFxTab;
    }
    async add(context, inputs) {
        const projectSettings = context.projectSetting;
        const spfxTabConfig = workflow_1.getComponent(projectSettings, constants_1.ComponentNames.SPFx);
        if (!spfxTabConfig) {
            // add teams-tab
            projectSettings.components.push({
                name: "teams-tab",
                hosting: constants_1.ComponentNames.SPFx,
                deploy: true,
                folder: inputs.folder || "SPFx",
                build: true,
            });
            // add hosting component
            projectSettings.components.push({
                name: constants_1.ComponentNames.SPFx,
                provision: true,
            });
        }
        projectSettings.programmingLanguage =
            projectSettings.programmingLanguage || inputs[question_1.CoreQuestionNames.ProgrammingLanguage];
        globalVars_1.globalVars.isVS = inputs[question_1.CoreQuestionNames.ProgrammingLanguage] === "csharp";
        const effects = ["config 'teams-tab' in projectSettings"];
        {
            const spfxCode = typedi_1.Container.get(constants_1.ComponentNames.SPFxTabCode);
            const res = await spfxCode.generate(context, inputs);
            if (res.isErr())
                return teamsfx_api_1.err(res.error);
            effects.push("scaffold spfx code");
        }
        {
            const res = await debug_1.generateLocalDebugSettings(context, inputs);
            if (res.isErr())
                return teamsfx_api_1.err(res.error);
            effects.push("generate debug settings");
        }
        if (featureFlags_1.isSPFxMultiTabEnabled()) {
            await utils_1.scaffoldRootReadme(context.projectSetting, inputs.projectPath);
        }
        utils_1.addFeatureNotify(inputs, context.userInteraction, "Capability", [inputs.features]);
        return teamsfx_api_1.ok(undefined);
    }
};
SPFxTab = tslib_1.__decorate([
    typedi_1.Service(constants_1.ComponentNames.SPFxTab)
], SPFxTab);
exports.SPFxTab = SPFxTab;
function getSPFxScaffoldQuestion() {
    const spfx_frontend_host = new teamsfx_api_1.QTreeNode({
        type: "group",
    });
    const spfx_version_check = new teamsfx_api_1.QTreeNode(questions_1.versionCheckQuestion);
    spfx_frontend_host.addChild(spfx_version_check);
    const spfx_framework_type = new teamsfx_api_1.QTreeNode(questions_1.frameworkQuestion);
    spfx_version_check.addChild(spfx_framework_type);
    const spfx_webpart_name = new teamsfx_api_1.QTreeNode(questions_1.webpartNameQuestion);
    spfx_version_check.addChild(spfx_webpart_name);
    return spfx_frontend_host;
}
exports.getSPFxScaffoldQuestion = getSPFxScaffoldQuestion;
async function getAddSPFxQuestionNode(projectPath) {
    var _a;
    const spfx_add_feature = new teamsfx_api_1.QTreeNode({
        type: "group",
    });
    spfx_add_feature.condition = { equals: constants_2.TabSPFxNewUIItem().id };
    const spfx_version_check = new teamsfx_api_1.QTreeNode(questions_1.versionCheckQuestion);
    spfx_add_feature.addChild(spfx_version_check);
    if (projectPath) {
        const yorcPath = path.join(projectPath, "SPFx", ".yo-rc.json");
        if (await fs_extra_1.default.pathExists(yorcPath)) {
            const yorc = await fs_extra_1.default.readJson(yorcPath);
            const template = (_a = yorc["@microsoft/generator-sharepoint"]) === null || _a === void 0 ? void 0 : _a.template;
            if (template === undefined || template === "") {
                const spfx_framework_type = new teamsfx_api_1.QTreeNode(questions_1.frameworkQuestion);
                spfx_version_check.addChild(spfx_framework_type);
            }
        }
        else {
            const spfx_framework_type = new teamsfx_api_1.QTreeNode(questions_1.frameworkQuestion);
            spfx_version_check.addChild(spfx_framework_type);
        }
    }
    const spfx_webpart_name = new teamsfx_api_1.QTreeNode(questions_1.webpartNameQuestion);
    spfx_version_check.addChild(spfx_webpart_name);
    return teamsfx_api_1.ok(spfx_add_feature);
}
exports.getAddSPFxQuestionNode = getAddSPFxQuestionNode;
//# sourceMappingURL=spfx.js.map