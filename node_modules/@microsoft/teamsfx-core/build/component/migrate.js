"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertManifestTemplateToV2 = exports.convertManifestTemplateToV3 = exports.convertProjectSettingsV3ToV2 = exports.convertProjectSettingsV2ToV3 = exports.convertEnvStateV2ToV3 = exports.convertEnvStateMapV3ToV2 = exports.convertEnvStateV3ToV2 = exports.ComponentName2pluginName = exports.pluginName2ComponentName = exports.APP_MANIFEST_KEY = exports.SIMPLE_AUTH_STATE_KEY = exports.BOT_STATE_KEY = exports.TAB_STATE_KEY = exports.AAD_STATE_KEY = exports.API_STATE_KEY = exports.APIM_STATE_KEY = exports.EnvStateMigrationComponentNames = void 0;
const fs_extra_1 = require("fs-extra");
const lodash_1 = require("lodash");
const path_1 = require("path");
const projectSettingsHelper_1 = require("../common/projectSettingsHelper");
const projectSettingsHelperV3_1 = require("../common/projectSettingsHelperV3");
const constants_1 = require("./constants");
const constants_2 = require("./constants");
const utils_1 = require("./utils");
const workflow_1 = require("./workflow");
exports.EnvStateMigrationComponentNames = [
    ["solution", "solution"],
    ["fx-resource-appstudio", constants_2.ComponentNames.AppManifest],
    ["fx-resource-identity", constants_2.ComponentNames.Identity],
    ["fx-resource-azure-sql", constants_2.ComponentNames.AzureSQL],
    ["fx-resource-aad-app-for-teams", constants_2.ComponentNames.AadApp],
    ["fx-resource-function", constants_2.ComponentNames.TeamsApi],
    ["fx-resource-apim", constants_2.ComponentNames.APIM],
    ["fx-resource-key-vault", constants_2.ComponentNames.KeyVault],
    ["fx-resource-bot", constants_2.ComponentNames.TeamsBot],
    ["fx-resource-frontend-hosting", constants_2.ComponentNames.TeamsTab],
    ["fx-resource-simple-auth", constants_2.ComponentNames.SimpleAuth],
];
exports.APIM_STATE_KEY = constants_2.ComponentNames.APIM;
exports.API_STATE_KEY = constants_2.ComponentNames.TeamsApi;
exports.AAD_STATE_KEY = constants_2.ComponentNames.AadApp;
exports.TAB_STATE_KEY = constants_2.ComponentNames.TeamsTab;
exports.BOT_STATE_KEY = constants_2.ComponentNames.TeamsBot;
exports.SIMPLE_AUTH_STATE_KEY = constants_2.ComponentNames.SimpleAuth;
exports.APP_MANIFEST_KEY = constants_2.ComponentNames.AppManifest;
function pluginName2ComponentName(pluginName) {
    const map = new Map();
    exports.EnvStateMigrationComponentNames.forEach((e) => {
        map.set(e[0], e[1]);
    });
    return map.get(pluginName) || pluginName;
}
exports.pluginName2ComponentName = pluginName2ComponentName;
function ComponentName2pluginName(componentName) {
    const map = new Map();
    exports.EnvStateMigrationComponentNames.forEach((e) => {
        map.set(e[1], e[0]);
    });
    return map.get(componentName) || componentName;
}
exports.ComponentName2pluginName = ComponentName2pluginName;
/**
 * convert envState from V3 to V2
 */
function convertEnvStateV3ToV2(envStateV3) {
    const envStateV2 = {};
    const component2plugin = new Map();
    exports.EnvStateMigrationComponentNames.forEach((e) => {
        component2plugin.set(e[1], e[0]);
    });
    for (const componentName of Object.keys(envStateV3)) {
        const pluginName = component2plugin.get(componentName);
        if (pluginName) {
            envStateV2[pluginName] = envStateV3[componentName];
        }
    }
    return envStateV2;
}
exports.convertEnvStateV3ToV2 = convertEnvStateV3ToV2;
/**
 * convert envState Map from V3 key to V2 key
 */
function convertEnvStateMapV3ToV2(envStateV3) {
    const envStateV2 = new Map();
    const component2plugin = new Map();
    exports.EnvStateMigrationComponentNames.forEach((e) => {
        component2plugin.set(e[1], e[0]);
    });
    for (const componentName of envStateV3.keys()) {
        const pluginName = component2plugin.get(componentName);
        if (pluginName) {
            envStateV2.set(pluginName, envStateV3.get(componentName));
        }
    }
    return envStateV2;
}
exports.convertEnvStateMapV3ToV2 = convertEnvStateMapV3ToV2;
/**
 * convert envState from V2 to V3
 */
function convertEnvStateV2ToV3(envStateV2) {
    const envStateV3 = {};
    const plugin2component = new Map();
    exports.EnvStateMigrationComponentNames.forEach((e) => {
        plugin2component.set(e[0], e[1]);
    });
    for (const pluginName of Object.keys(envStateV2)) {
        const componentName = plugin2component.get(pluginName);
        if (componentName) {
            envStateV3[componentName] = envStateV2[pluginName];
        }
    }
    return envStateV3;
}
exports.convertEnvStateV2ToV3 = convertEnvStateV2ToV3;
function convertProjectSettingsV2ToV3(settingsV2, projectPath) {
    var _a, _b, _c, _d;
    const settingsV3 = lodash_1.cloneDeep(settingsV2);
    const solutionSettings = settingsV2.solutionSettings;
    if (solutionSettings && (!settingsV3.components || settingsV3.components.length === 0)) {
        settingsV3.components = [];
        const isVS = projectSettingsHelper_1.isVSProject(settingsV2);
        const hasAAD = solutionSettings.activeResourcePlugins.includes("fx-resource-aad-app-for-teams");
        if (hasAAD) {
            settingsV3.components.push({
                name: constants_2.ComponentNames.AadApp,
                provision: true,
                deploy: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-frontend-hosting")) {
            const hostingComponent = isVS ? constants_2.ComponentNames.AzureWebApp : constants_2.ComponentNames.AzureStorage;
            const existsAuthStartFile = fs_extra_1.pathExistsSync(path_1.join(projectPath, "tabs", "public", "auth-start.html"));
            const tabSSO = solutionSettings.capabilities.includes("TabSSO") ||
                solutionSettings.capabilities.includes("SSO") ||
                existsAuthStartFile;
            if (isVS) {
                const teamsTab = {
                    hosting: hostingComponent,
                    name: "teams-tab",
                    build: true,
                    provision: true,
                    folder: "",
                    artifactFolder: "bin\\Release\\net6.0\\win-x86\\publish",
                    sso: tabSSO,
                    deploy: true,
                };
                settingsV3.components.push(teamsTab);
            }
            else {
                const teamsTab = {
                    hosting: hostingComponent,
                    name: "teams-tab",
                    build: true,
                    provision: true,
                    folder: "tabs",
                    sso: tabSSO,
                    deploy: true,
                };
                settingsV3.components.push(teamsTab);
            }
            const hostingConfig = workflow_1.getComponent(settingsV3, hostingComponent);
            if (hostingConfig) {
                hostingConfig.connections = hostingConfig.connections || [];
                hostingConfig.connections.push("teams-tab");
            }
            else {
                settingsV3.components.push({
                    name: hostingComponent,
                    connections: ["teams-tab"],
                    provision: true,
                });
            }
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-spfx")) {
            const teamsTab = {
                hosting: "spfx",
                name: "teams-tab",
                build: true,
                provision: true,
                folder: "SPFx",
                deploy: true,
            };
            settingsV3.components.push(teamsTab);
            settingsV3.components.push({
                name: "spfx",
                provision: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-bot")) {
            const hostType = (_b = (_a = settingsV2.pluginSettings) === null || _a === void 0 ? void 0 : _a["fx-resource-bot"]) === null || _b === void 0 ? void 0 : _b["host-type"];
            let botCapabilities = (_d = (_c = settingsV2.pluginSettings) === null || _c === void 0 ? void 0 : _c["fx-resource-bot"]) === null || _d === void 0 ? void 0 : _d["capabilities"];
            if (solutionSettings.capabilities.includes(constants_1.MessageExtensionNewUIItem().id) &&
                !(botCapabilities === null || botCapabilities === void 0 ? void 0 : botCapabilities.includes("message-extension"))) {
                botCapabilities = botCapabilities || [];
                botCapabilities.push("message-extension");
            }
            const isHostingFunction = hostType === "azure-functions";
            const hostingComponent = isHostingFunction
                ? constants_2.ComponentNames.Function
                : constants_2.ComponentNames.AzureWebApp;
            if (isVS) {
                const teamsBot = {
                    name: "teams-bot",
                    hosting: hostingComponent,
                    build: true,
                    provision: true,
                    folder: "",
                    artifactFolder: "bin\\Release\\net6.0\\win-x86\\publish",
                    capabilities: botCapabilities,
                    sso: solutionSettings.capabilities.includes("BotSSO"),
                    deploy: true,
                };
                settingsV3.components.push(teamsBot);
            }
            else {
                const teamsBot = {
                    hosting: hostingComponent,
                    name: "teams-bot",
                    build: true,
                    provision: true,
                    folder: "bot",
                    capabilities: botCapabilities,
                    sso: solutionSettings.capabilities.includes("BotSSO"),
                    deploy: true,
                };
                settingsV3.components.push(teamsBot);
            }
            const hostingConfig = workflow_1.getComponent(settingsV3, hostingComponent);
            if (hostingConfig) {
                hostingConfig.connections = hostingConfig.connections || [];
                hostingConfig.connections.push("teams-bot");
            }
            else {
                settingsV3.components.push({
                    name: hostingComponent,
                    connections: ["teams-bot"],
                    provision: true,
                    scenario: "Bot",
                });
            }
            settingsV3.components.push({
                name: constants_2.ComponentNames.BotService,
                provision: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-identity")) {
            settingsV3.components.push({
                name: constants_2.ComponentNames.Identity,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-key-vault")) {
            settingsV3.components.push({
                name: constants_2.ComponentNames.KeyVault,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-azure-sql")) {
            settingsV3.components.push({
                name: constants_2.ComponentNames.AzureSQL,
                provision: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-apim")) {
            settingsV3.components.push({
                name: constants_2.ComponentNames.APIM,
                provision: true,
                deploy: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-simple-auth")) {
            settingsV3.components.push({
                name: constants_2.ComponentNames.SimpleAuth,
                provision: true,
            });
        }
        if (solutionSettings.activeResourcePlugins.includes("fx-resource-function")) {
            settingsV3.components.push({
                name: constants_2.ComponentNames.TeamsApi,
                hosting: constants_2.ComponentNames.Function,
                functionNames: [settingsV2.defaultFunctionName || "getUserProfile"],
                build: true,
                folder: "api",
                deploy: true,
                artifactFolder: "api",
            });
            settingsV3.components.push({
                name: constants_2.ComponentNames.Function,
                scenario: "Api",
            });
        }
        utils_1.ensureComponentConnections(settingsV3);
    }
    return settingsV3;
}
exports.convertProjectSettingsV2ToV3 = convertProjectSettingsV2ToV3;
function convertProjectSettingsV3ToV2(settingsV3) {
    var _a;
    const settingsV2 = lodash_1.cloneDeep(settingsV3);
    if (((_a = settingsV3.components) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        const hostType = projectSettingsHelperV3_1.hasAzureResourceV3(settingsV3) ? "Azure" : "SPFx";
        settingsV2.solutionSettings = {
            name: "fx-solution-azure",
            version: "1.0.0",
            hostType: hostType,
            azureResources: [],
            capabilities: [],
            activeResourcePlugins: [
                "fx-resource-local-debug",
                "fx-resource-appstudio",
                "fx-resource-cicd",
            ],
        };
        if (hostType === "Azure") {
            settingsV2.solutionSettings.activeResourcePlugins.push("fx-resource-api-connector");
        }
        const aad = workflow_1.getComponent(settingsV3, constants_2.ComponentNames.AadApp);
        const teamsTab = workflow_1.getComponent(settingsV3, constants_2.ComponentNames.TeamsTab);
        const teamsBot = workflow_1.getComponent(settingsV3, constants_2.ComponentNames.TeamsBot);
        if (aad) {
            settingsV2.solutionSettings.activeResourcePlugins.push("fx-resource-aad-app-for-teams");
            if (!teamsTab && !teamsBot && !settingsV2.solutionSettings.capabilities.includes("TabSSO")) {
                settingsV2.solutionSettings.capabilities.push("TabSSO");
            }
        }
        if (teamsTab) {
            settingsV2.solutionSettings.capabilities.push("Tab");
            if (teamsTab.sso) {
                if (!settingsV2.solutionSettings.capabilities.includes("TabSSO")) {
                    settingsV2.solutionSettings.capabilities.push("TabSSO");
                }
            }
            if (teamsTab.hosting === "spfx") {
                settingsV2.solutionSettings.activeResourcePlugins.push("fx-resource-spfx");
            }
            else {
                settingsV2.solutionSettings.activeResourcePlugins.push("fx-resource-frontend-hosting");
            }
        }
        if (teamsBot) {
            const botCapabilities = teamsBot === null || teamsBot === void 0 ? void 0 : teamsBot.capabilities;
            if ((botCapabilities && botCapabilities.length === 0) ||
                (botCapabilities === null || botCapabilities === void 0 ? void 0 : botCapabilities.includes("bot")) ||
                (botCapabilities === null || botCapabilities === void 0 ? void 0 : botCapabilities.includes("command-response"))) {
                settingsV2.solutionSettings.capabilities.push("Bot");
                if (teamsBot.sso) {
                    settingsV2.solutionSettings.capabilities.push("BotSSO");
                }
            }
            if ((botCapabilities === null || botCapabilities === void 0 ? void 0 : botCapabilities.includes("message-extension")) &&
                !settingsV2.solutionSettings.capabilities.includes(constants_1.MessageExtensionNewUIItem().id)) {
                settingsV2.solutionSettings.capabilities.push(constants_1.MessageExtensionNewUIItem().id);
            }
            settingsV2.solutionSettings.activeResourcePlugins.push("fx-resource-bot");
            const hostType = teamsBot.hosting === constants_2.ComponentNames.AzureWebApp ? "app-service" : "azure-function";
            settingsV2.pluginSettings = {
                "fx-resource-bot": {
                    "host-type": hostType,
                    capabilities: botCapabilities,
                },
            };
        }
        if (workflow_1.getComponent(settingsV3, constants_2.ComponentNames.Identity)) {
            settingsV2.solutionSettings.activeResourcePlugins.push("fx-resource-identity");
        }
        if (workflow_1.getComponent(settingsV3, constants_2.ComponentNames.SimpleAuth)) {
            settingsV2.solutionSettings.activeResourcePlugins.push("fx-resource-simple-auth");
        }
        if (workflow_1.getComponent(settingsV3, constants_2.ComponentNames.KeyVault)) {
            settingsV2.solutionSettings.activeResourcePlugins.push("fx-resource-key-vault");
            settingsV2.solutionSettings.azureResources.push("keyvault");
        }
        if (workflow_1.getComponent(settingsV3, constants_2.ComponentNames.AzureSQL)) {
            settingsV2.solutionSettings.activeResourcePlugins.push("fx-resource-azure-sql");
            settingsV2.solutionSettings.azureResources.push("sql");
        }
        if (workflow_1.getComponent(settingsV3, constants_2.ComponentNames.APIM)) {
            settingsV2.solutionSettings.activeResourcePlugins.push("fx-resource-apim");
            settingsV2.solutionSettings.azureResources.push("apim");
        }
        const teamsApi = workflow_1.getComponent(settingsV3, constants_2.ComponentNames.TeamsApi);
        if (teamsApi) {
            settingsV2.solutionSettings.activeResourcePlugins.push("fx-resource-function");
            settingsV2.defaultFunctionName =
                teamsApi.functionNames && teamsApi.functionNames.length > 0
                    ? teamsApi.functionNames[0]
                    : "getUserProfile";
            settingsV2.solutionSettings.azureResources.push("function");
        }
    }
    return settingsV2;
}
exports.convertProjectSettingsV3ToV2 = convertProjectSettingsV3ToV2;
function convertManifestTemplateToV3(content) {
    for (const pluginAndComponentArray of exports.EnvStateMigrationComponentNames) {
        const pluginName = pluginAndComponentArray[0];
        const componentName = pluginAndComponentArray[1];
        if (pluginName !== componentName)
            content = content.replace(new RegExp(`state.${pluginName}`, "g"), `state.${componentName}`);
    }
    return content;
}
exports.convertManifestTemplateToV3 = convertManifestTemplateToV3;
function convertManifestTemplateToV2(content) {
    for (const pluginAndComponentArray of exports.EnvStateMigrationComponentNames) {
        const pluginName = pluginAndComponentArray[0];
        const componentName = pluginAndComponentArray[1];
        if (pluginName !== componentName)
            content = content.replace(new RegExp(`state.${componentName}`, "g"), `state.${pluginName}`);
    }
    return content;
}
exports.convertManifestTemplateToV2 = convertManifestTemplateToV2;
//# sourceMappingURL=migrate.js.map