"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelperMethods = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const fse = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const unzip = tslib_1.__importStar(require("unzipper"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const ManifestUtils_1 = require("../../resource/appManifest/utils/ManifestUtils");
const zipFile = "project.zip";
class HelperMethods {
    static async downloadProjectTemplateZipFile(projectFolder, projectRepo, projectBranch) {
        const projectTemplateZipFile = `${projectRepo}/archive/${projectBranch}.zip`;
        return axios_1.default
            .get(projectTemplateZipFile, {
            responseType: "stream",
        })
            .then((response) => {
            return new Promise((resolve, reject) => {
                response.data
                    .pipe(fs_1.default.createWriteStream(`${projectFolder}/${zipFile}`))
                    .on("error", function (err) {
                    reject(`Unable to download project zip file for "${projectTemplateZipFile}".\n${err}`);
                })
                    .on("close", async () => {
                    await HelperMethods.unzipProjectTemplate(projectFolder);
                    resolve();
                });
            });
        })
            .catch((err) => {
            console.log(`Unable to download project zip file for "${projectTemplateZipFile}".\n${err}`);
        });
    }
    static async unzipProjectTemplate(projectFolder) {
        return new Promise(async (resolve, reject) => {
            // TODO: Verify file exists
            const readStream = fs_1.default.createReadStream(`${projectFolder}/${zipFile}`);
            readStream
                .pipe(unzip.Extract({ path: projectFolder }))
                .on("error", function (err) {
                reject(`Unable to unzip project zip file for "${projectFolder}".\n${err}`);
            })
                .on("close", async () => {
                HelperMethods.moveUnzippedFiles(projectFolder);
                resolve();
            });
        });
    }
    static moveUnzippedFiles(projectFolder) {
        // delete original zip file
        const zipFilePath = path.resolve(`${projectFolder}/${zipFile}`);
        if (fs_1.default.existsSync(zipFilePath)) {
            fs_1.default.unlinkSync(zipFilePath);
        }
        // get path to unzipped folder
        const unzippedFolder = fs_1.default.readdirSync(projectFolder).filter(function (file) {
            return fs_1.default.statSync(`${projectFolder}/${file}`).isDirectory();
        });
        // construct paths to move files out of unzipped folder into project root folder
        const fromFolder = path.resolve(`${projectFolder}/${unzippedFolder[0]}`);
        HelperMethods.copyAddinFiles(fromFolder, projectFolder);
        // delete project zipped folder
        fs_1.default.rmSync(fromFolder, { recursive: true, force: true });
    }
    static copyAddinFiles(fromFolder, toFolder) {
        fse.copySync(fromFolder, toFolder, {
            filter: (path) => !path.includes("node_modules"),
        });
    }
    static async updateManifest(projectRoot, addinManifestPath) {
        // Read add-in manifest file
        const addinManifest = await teamsfx_api_1.ManifestUtil.loadFromPath(addinManifestPath);
        // Open project manifest file
        const manifestTemplatePath = await ManifestUtils_1.manifestUtils.getTeamsAppManifestPath(projectRoot);
        const manifest = await teamsfx_api_1.ManifestUtil.loadFromPath(manifestTemplatePath);
        // Update project manifest
        manifest.extensions = addinManifest.extensions;
        manifest.authorization = addinManifest.authorization;
        // Safe project manifest
        await teamsfx_api_1.ManifestUtil.writeToPath(manifestTemplatePath, manifest);
    }
}
exports.HelperMethods = HelperMethods;
//# sourceMappingURL=helperMethods.js.map