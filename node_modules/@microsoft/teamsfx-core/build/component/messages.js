"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plans = exports.ErrorMessage = exports.concatErrorMessageWithSuggestions = exports.getLocalizedMessage = exports.LogMessages = exports.ProgressMessages = exports.ProgressTitles = void 0;
const localizeUtils_1 = require("../common/localizeUtils");
class ProgressTitles {
}
exports.ProgressTitles = ProgressTitles;
ProgressTitles.scaffoldTab = localizeUtils_1.getLocalizedString("core.progress.scaffoldTab");
ProgressTitles.scaffoldBot = localizeUtils_1.getLocalizedString("core.progress.scaffoldBot");
ProgressTitles.scaffoldApi = localizeUtils_1.getLocalizedString("core.progress.scaffoldApi");
ProgressTitles.buildingTab = localizeUtils_1.getLocalizedString("core.progress.buildingTab");
ProgressTitles.buildingBot = localizeUtils_1.getLocalizedString("core.progress.buildingBot");
ProgressTitles.buildingApi = localizeUtils_1.getLocalizedString("core.progress.buildingApi");
ProgressTitles.provisionBot = localizeUtils_1.getLocalizedString("core.progress.provisionBot");
ProgressTitles.generateTemplate = localizeUtils_1.getLocalizedString("core.progress.generateTemplate");
ProgressTitles.generateSample = localizeUtils_1.getLocalizedString("core.progress.generateSample");
ProgressTitles.configureStorage = localizeUtils_1.getLocalizedString("core.progress.configureStorage");
// Deploying Azure Functions [Bot]
ProgressTitles.deploying = (component, scenario) => `Deploying ${component}` + (scenario ? `[${scenario}]` : "");
class ProgressMessages {
}
exports.ProgressMessages = ProgressMessages;
ProgressMessages.scaffoldTab = localizeUtils_1.getLocalizedString("core.progress.scaffoldTab.detail");
ProgressMessages.scaffoldBot = localizeUtils_1.getLocalizedString("core.progress.scaffoldBot.detail");
ProgressMessages.scaffoldApi = localizeUtils_1.getLocalizedString("core.progress.scaffoldApi.detail");
ProgressMessages.buildingTab = localizeUtils_1.getLocalizedString("core.progress.buildingTab.detail");
ProgressMessages.buildingBot = localizeUtils_1.getLocalizedString("core.progress.buildingBot.detail");
ProgressMessages.buildingApi = localizeUtils_1.getLocalizedString("core.progress.buildingApi.detail");
ProgressMessages.packingCode = localizeUtils_1.getLocalizedString("core.progress.packingCode");
ProgressMessages.enableStaticWebsite = localizeUtils_1.getLocalizedString("core.progress.enableStaticWebsite");
ProgressMessages.provisionBot = localizeUtils_1.getLocalizedString("core.progress.provisionBot");
ProgressMessages.generateTemplate = () => localizeUtils_1.getLocalizedString("core.progress.generateTemplate.detail");
ProgressMessages.generateSample = () => localizeUtils_1.getLocalizedString("core.progress.generateSample.detail");
ProgressMessages.getDeploymentSrcAndDest = localizeUtils_1.getLocalizedString("core.progress.getDeploymentSrcAndDest");
ProgressMessages.clearStorageAccount = localizeUtils_1.getLocalizedString("core.progress.clearStorageAccount");
ProgressMessages.uploadTabToStorage = localizeUtils_1.getLocalizedString("core.progress.uploadTabToStorage");
ProgressMessages.getAzureAccountInfoForDeploy = localizeUtils_1.getLocalizedString("core.progress.getAzureAccountInfoForDeploy");
ProgressMessages.getAzureUploadEndpoint = localizeUtils_1.getLocalizedString("core.progress.getAzureUploadEndpoint");
ProgressMessages.uploadZipFileToAzure = localizeUtils_1.getLocalizedString("core.progress.uploadZipFileToAzure");
ProgressMessages.checkAzureDeployStatus = localizeUtils_1.getLocalizedString("core.progress.checkAzureDeployStatus");
ProgressMessages.restartAzureFunctionApp = localizeUtils_1.getLocalizedString("core.progress.restartAzureFunctionApp");
ProgressMessages.restartAzureService = localizeUtils_1.getLocalizedString("core.progress.restartAzureFunctionApp");
ProgressMessages.configureAzureStorageEnableStaticWebsite = localizeUtils_1.getLocalizedString("core.progress.configureAzureStorage");
ProgressMessages.checkAzureStorageEnableStaticWebsite = localizeUtils_1.getLocalizedString("core.progress.checkAzureStorageStaticWebsite");
ProgressMessages.azureStorageStaticWebsiteAlreadyEnabled = localizeUtils_1.getLocalizedString("core.progress.azureStorageStaticWebsiteEnabled");
ProgressMessages.enableAzureStorageStaticWebsite = localizeUtils_1.getLocalizedString("core.progress.enableAzureStorageStaticWebsite");
ProgressMessages.getAzureStorageAccountInfo = localizeUtils_1.getLocalizedString("core.progress.getAzureStorageDeployCredential");
ProgressMessages.clearStorageExistsBlobs = localizeUtils_1.getLocalizedString("core.progress.clearStorageExistsBlobs");
ProgressMessages.uploadFilesToStorage = localizeUtils_1.getLocalizedString("core.progress.uploadFilesToStorage");
class LogMessages {
}
exports.LogMessages = LogMessages;
LogMessages.updateFunctionAppSettings = localizeUtils_1.getLocalizedString("core.log.updateFunctionAppSettings");
LogMessages.enableStaticWebsite = localizeUtils_1.getLocalizedString("core.progress.enableStaticWebsite");
LogMessages.getTemplateFrom = (url) => localizeUtils_1.getLocalizedString("plugins.function.getTemplateFrom", url);
LogMessages.getTemplateFromLocal = localizeUtils_1.getLocalizedString("plugins.function.getTemplateFromLocal");
LogMessages.projectScaffoldAt = (basePath) => localizeUtils_1.getLocalizedString("plugins.function.projectScaffoldAt", basePath);
LogMessages.failedToInstallDotnet = (error) => localizeUtils_1.getLocalizedString("plugins.function.failedToInstallDotnet", error);
LogMessages.askFunctionName = localizeUtils_1.getLocalizedString("plugins.function.askFunctionName");
LogMessages.FailedSaveEnv = (envPath) => localizeUtils_1.getLocalizedString("error.frontend.FailedSaveEnv", envPath);
LogMessages.FailedLoadEnv = (envPath) => localizeUtils_1.getLocalizedString("error.frontend.FailedLoadEnv", envPath);
const getLocalizedMessage = (key, ...params) => ({
    default: localizeUtils_1.getDefaultString(key, params),
    localized: localizeUtils_1.getLocalizedString(key, params),
});
exports.getLocalizedMessage = getLocalizedMessage;
function concatErrorMessageWithSuggestions(message, suggestions) {
    return {
        default: localizeUtils_1.getDefaultString("plugins.baseErrorMessage", message.default, suggestions.map((suggestion) => suggestion.default).join(" ")),
        localized: localizeUtils_1.getLocalizedString("plugins.baseErrorMessage", message.localized, suggestions.map((suggestion) => suggestion.localized).join(" ")),
    };
}
exports.concatErrorMessageWithSuggestions = concatErrorMessageWithSuggestions;
class ErrorMessage {
}
exports.ErrorMessage = ErrorMessage;
ErrorMessage.programmingLanguageInvalid = localizeUtils_1.getLocalizedString("core.error.programmingLanguageInvalid");
ErrorMessage.SomethingIsMissing = (something) => exports.getLocalizedMessage("plugins.bot.SomethingIsMissing", something);
ErrorMessage.SomethingIsNotExisting = (something) => exports.getLocalizedMessage("plugins.bot.SomethingNotExisting", something);
ErrorMessage.WorkingDirIsMissing = exports.getLocalizedMessage("plugins.bot.WorkingDirMissing");
ErrorMessage.invalidFunctionName = localizeUtils_1.getLocalizedString("plugins.function.invalidFunctionName");
ErrorMessage.functionAlreadyExists = localizeUtils_1.getLocalizedString("plugins.function.functionAlreadyExists");
// Suggestions
ErrorMessage.RetryTheCurrentStep = exports.getLocalizedMessage("suggestions.retryTheCurrentStep");
ErrorMessage.RecreateTheProject = exports.getLocalizedMessage("plugins.bot.RecreateProject");
ErrorMessage.CheckOutputLogAndTryToFix = exports.getLocalizedMessage("plugins.bot.CheckLogAndFix");
ErrorMessage.ReopenWorkingDir = (path = "") => exports.getLocalizedMessage("plugins.bot.CheckPathWriteAccess", path);
ErrorMessage.RunFailedCommand = (command, path) => exports.getLocalizedMessage("plugins.bot.RunFailedCommand", command, path);
ErrorMessage.CheckCommandOutputAndTryToFixIt = exports.getLocalizedMessage("plugins.bot.CheckCommandOutput");
class Plans {
}
exports.Plans = Plans;
Plans.scaffold = (scenario, folder) => `scaffold ${scenario} source code in folder: ${folder}`;
Plans.buildProject = (folder) => `build project: ${folder}`;
Plans.deploy = (component, folder) => ({
    type: "service",
    name: "azure",
    remarks: `deploy ${component} in folder: ${folder}`,
});
Plans.enableStaticWebsite = () => ({
    type: "service",
    name: "azure",
    remarks: "configure azure storage (enable static web site)",
});
Plans.createAADforBot = () => ({
    type: "service",
    name: "graph.microsoft.com",
    remarks: "create AAD app for bot service (botId, botPassword)",
});
Plans.registerBot = () => ({
    type: "service",
    name: "teams.microsoft.com",
    remarks: "create bot registration",
});
Plans.updateBotEndpoint = () => ({
    type: "service",
    name: "graph.microsoft.com",
    remarks: "update message endpoint in AppStudio",
});
Plans.generateSourceCodeAndConfig = (feature) => `generate source code and config for ${feature} in project settings`;
Plans.generateBicepAndConfig = (feature) => `generate bicep and config for ${feature} in project settings`;
Plans.addFeature = (feature) => `config ${feature} in project settings`;
//# sourceMappingURL=messages.js.map