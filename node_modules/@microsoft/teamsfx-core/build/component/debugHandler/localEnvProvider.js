// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalEnvProvider = exports.LocalEnvKeys = void 0;
const tslib_1 = require("tslib");
const dotenv = tslib_1.__importStar(require("dotenv"));
const fs = tslib_1.__importStar(require("fs-extra"));
const os = tslib_1.__importStar(require("os"));
const path = tslib_1.__importStar(require("path"));
const constants_1 = require("../../common/local/constants");
exports.LocalEnvKeys = Object.freeze({
    frontend: {
        template: {
            Browser: "BROWSER",
            Https: "HTTPS",
            Port: "PORT",
            SslCrtFile: "SSL_CRT_FILE",
            SslKeyFile: "SSL_KEY_FILE",
        },
        teamsfx: {
            ClientId: "REACT_APP_CLIENT_ID",
            LoginUrl: "REACT_APP_START_LOGIN_PAGE_URL",
            FuncEndpoint: "REACT_APP_FUNC_ENDPOINT",
            FuncName: "REACT_APP_FUNC_NAME",
        },
    },
    backend: {
        teamsfx: {
            ClientId: "M365_CLIENT_ID",
            ClientSecret: "M365_CLIENT_SECRET",
            TenantId: "M365_TENANT_ID",
            AuthorityHost: "M365_AUTHORITY_HOST",
            AllowedAppIds: "ALLOWED_APP_IDS",
            SqlEndpoint: "SQL_ENDPOINT",
            SqlDbName: "SQL_DATABASE_NAME",
            SqlUserName: "SQL_USER_NAME",
            SqlPassword: "SQL_PASSWORD",
            SqlIdentityId: "IDENTITY_ID",
        },
    },
    bot: {
        template: {
            BotId: "BOT_ID",
            BotPassword: "BOT_PASSWORD",
        },
        teamsfx: {
            ClientId: "M365_CLIENT_ID",
            ClientSecret: "M365_CLIENT_SECRET",
            TenantId: "M365_TENANT_ID",
            AuthorityHost: "M365_AUTHORITY_HOST",
            LoginEndpoint: "INITIATE_LOGIN_ENDPOINT",
            ApplicationIdUri: "M365_APPLICATION_ID_URI",
            ApiEndpoint: "API_ENDPOINT",
            SqlEndpoint: "SQL_ENDPOINT",
            SqlDbName: "SQL_DATABASE_NAME",
            SqlUserName: "SQL_USER_NAME",
            SqlPassword: "SQL_PASSWORD",
            SqlIdentityId: "IDENTITY_ID",
        },
    },
    videoFilterApp: {
        template: {
            SslCrtFile: "SSL_CRT_FILE",
            SslKeyFile: "SSL_KEY_FILE",
        },
        teamsfx: {},
    },
});
const frontendTemplateComment = "# TeamsFx will overwrite the following variable values when running debug. They are used by create-react-app.";
const botTemplateComment = "# TeamsFx will overwrite the following variable values when running debug. They are used by the bot code.";
const teamsfxComment = "# TeamsFx will overwrite the following variable values when running debug. They are used by TeamsFx SDK.";
const customizedComment = "# Following variables can be customized or you can add your owns." + os.EOL + "# FOO=BAR";
const videoFilterAppTemplateComment = "# TeamsFx will overwrite the following variable values when running debug. They are used by Vite.";
class LocalEnvProvider {
    constructor(projectPath) {
        this.projectPath = projectPath;
    }
    async loadFrontendLocalEnvs() {
        return await this.loadLocalEnvFile(path.join(this.projectPath, constants_1.FolderName.Frontend, LocalEnvProvider.LocalEnvFileName), Object.values(exports.LocalEnvKeys.frontend.template), Object.values(exports.LocalEnvKeys.frontend.teamsfx));
    }
    async loadBackendLocalEnvs() {
        return await this.loadLocalEnvFile(path.join(this.projectPath, constants_1.FolderName.Function, LocalEnvProvider.LocalEnvFileName), [], Object.values(exports.LocalEnvKeys.backend.teamsfx));
    }
    async loadBotLocalEnvs() {
        return await this.loadLocalEnvFile(path.join(this.projectPath, constants_1.FolderName.Bot, LocalEnvProvider.LocalEnvFileName), Object.values(exports.LocalEnvKeys.bot.template), Object.values(exports.LocalEnvKeys.bot.teamsfx));
    }
    async loadVideoFilterLocalEnvs() {
        return await this.loadLocalEnvFile(path.join(this.projectPath, constants_1.FolderName.VideoFilter, LocalEnvProvider.LocalEnvFileName), Object.values(exports.LocalEnvKeys.videoFilterApp.template), Object.values(exports.LocalEnvKeys.videoFilterApp.teamsfx));
    }
    async saveFrontendLocalEnvs(envs) {
        return await this.saveLocalEnvFile(path.join(this.projectPath, constants_1.FolderName.Frontend), envs, frontendTemplateComment, teamsfxComment, customizedComment);
    }
    async saveBackendLocalEnvs(envs) {
        return await this.saveLocalEnvFile(path.join(this.projectPath, constants_1.FolderName.Function), envs, undefined, teamsfxComment, customizedComment);
    }
    async saveBotLocalEnvs(envs) {
        return await this.saveLocalEnvFile(path.join(this.projectPath, constants_1.FolderName.Bot), envs, botTemplateComment, teamsfxComment, customizedComment);
    }
    async saveVideoFilterLocalEnvs(envs) {
        return await this.saveLocalEnvFile(path.join(this.projectPath, constants_1.FolderName.VideoFilter), envs, videoFilterAppTemplateComment, teamsfxComment, customizedComment);
    }
    async loadLocalEnvFile(path, templateKeys, teamsfxKeys) {
        const result = {
            template: {},
            teamsfx: {},
            customized: {},
        };
        if (await fs.pathExists(path)) {
            const envs = dotenv.parse(await fs.readFile(path));
            const entries = Object.entries(envs);
            for (const [key, value] of entries) {
                if (templateKeys.includes(key)) {
                    result.template[key] = value;
                }
                else if (teamsfxKeys.includes(key)) {
                    result.teamsfx[key] = value;
                }
                else {
                    result.customized[key] = value;
                }
            }
        }
        return result;
    }
    async saveLocalEnvFile(folder, envs, templateComment, teamsfxComment, customizedComment) {
        await fs.ensureDir(folder);
        const envPath = path.join(folder, LocalEnvProvider.LocalEnvFileName);
        await fs.createFile(envPath);
        await fs.writeFile(envPath, "");
        let needEOL = false;
        if (Object.keys(envs.template).length > 0) {
            if (templateComment) {
                await fs.appendFile(envPath, `${templateComment}${os.EOL}`);
            }
            const templateEntries = Object.entries(envs.template);
            for (const [key, value] of templateEntries) {
                await fs.appendFile(envPath, `${key}=${value}${os.EOL}`);
            }
            needEOL = true;
        }
        if (Object.keys(envs.teamsfx).length > 0) {
            if (needEOL) {
                await fs.appendFile(envPath, os.EOL);
            }
            if (teamsfxComment) {
                await fs.appendFile(envPath, `${teamsfxComment}${os.EOL}`);
            }
            const teamsfxEntries = Object.entries(envs.teamsfx);
            for (const [key, value] of teamsfxEntries) {
                await fs.appendFile(envPath, `${key}=${value}${os.EOL}`);
            }
            needEOL = true;
        }
        if (needEOL) {
            await fs.appendFile(envPath, os.EOL);
        }
        if (customizedComment) {
            await fs.appendFile(envPath, `${customizedComment}${os.EOL}`);
        }
        if (Object.keys(envs.customized).length > 0) {
            const customizedEntries = Object.entries(envs.customized);
            for (const [key, value] of customizedEntries) {
                await fs.appendFile(envPath, `${key}=${value}${os.EOL}`);
            }
        }
        return envPath;
    }
}
exports.LocalEnvProvider = LocalEnvProvider;
LocalEnvProvider.LocalEnvFileName = ".env.teamsfx.local";
//# sourceMappingURL=localEnvProvider.js.map