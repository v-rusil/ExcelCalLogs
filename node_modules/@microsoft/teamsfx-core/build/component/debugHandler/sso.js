// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSODebugHandler = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const lodash_1 = require("lodash");
const path = tslib_1.__importStar(require("path"));
const util = tslib_1.__importStar(require("util"));
const uuid_1 = require("uuid");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const projectSettingsHelper_1 = require("../../common/local/projectSettingsHelper");
const projectSettingsHelperV3_1 = require("../../common/projectSettingsHelperV3");
const telemetry_1 = require("../../common/telemetry");
const tools_1 = require("../../common/tools");
const crypto_1 = require("../../core/crypto");
const environment_1 = require("../../core/environment");
const projectSettingsLoader_1 = require("../../core/middleware/projectSettingsLoader");
const constants_1 = require("../constants");
const migrate_1 = require("../migrate");
const error_1 = require("./error");
const localEnvProvider_1 = require("./localEnvProvider");
const aadAppClient_1 = require("../resource/aadApp/aadAppClient");
const tokenProvider_1 = require("../resource/aadApp/utils/tokenProvider");
const configs_1 = require("../resource/aadApp/utils/configs");
const aadAppManifestManager_1 = require("../resource/aadApp/aadAppManifestManager");
const constants_2 = require("../resource/aadApp/constants");
const utils_1 = require("./utils");
const ssoDebugMessages = {
    registeringAAD: "Registering an AAD app for SSO ...",
    configuringAAD: "Configuring AAD app for SSO ...",
    buildingAndSavingAADManifest: "Building and saving AAD manifest ...",
    savingStates: "Saving the states of SSO ...",
    settingEnvs: "Saving the environment variables for SSO ...",
    AADRegistered: "AAD app is registered (%s)",
    useExistingAAD: "Skip registering AAD app but use the existing AAD app from args: %s",
    AADAlreadyRegistered: "Skip registering AAD app as it has already been registered before: %s",
    AADConfigured: "AAD app is configured",
    AADManifestSaved: "AAD app manifest is saved in %s",
    statesSaved: "The states for SSO are saved in %s",
    tabEnvsSet: "The SSO environment variables of tab are saved in %s",
    botEnvsSet: "The SSO environment variables of bot are saved in %s",
    backendEnvsSet: "The SSO environment variables of backend are saved in %s",
};
class SSODebugHandler {
    constructor(projectPath, args, m365TokenProvider, logger, telemetry, ui) {
        this.projectPath = projectPath;
        this.args = args;
        this.m365TokenProvider = m365TokenProvider;
        this.logger = logger;
        this.telemetry = telemetry;
        this.ui = ui;
    }
    getActions() {
        const actions = [];
        actions.push({
            startMessage: ssoDebugMessages.registeringAAD,
            run: this.registerAAD.bind(this),
        });
        actions.push({
            startMessage: ssoDebugMessages.configuringAAD,
            run: this.configureAAD.bind(this),
        });
        actions.push({
            startMessage: ssoDebugMessages.buildingAndSavingAADManifest,
            run: this.buildAndSaveAADManifest.bind(this),
        });
        actions.push({
            startMessage: ssoDebugMessages.savingStates,
            run: this.saveStates.bind(this),
        });
        actions.push({
            startMessage: ssoDebugMessages.settingEnvs,
            run: this.setEnvs.bind(this),
        });
        return actions;
    }
    async validateArgs() {
        if (this.args.objectId !== undefined && this.args.objectId.trim().length === 0) {
            return teamsfx_api_1.err(error_1.DebugArgumentEmptyError("objectId"));
        }
        if (this.args.clientId !== undefined && this.args.clientId.trim().length === 0) {
            return teamsfx_api_1.err(error_1.DebugArgumentEmptyError("clientId"));
        }
        if (this.args.clientSecret !== undefined && this.args.clientSecret.trim().length === 0) {
            return teamsfx_api_1.err(error_1.DebugArgumentEmptyError("clientSecret"));
        }
        if (this.args.accessAsUserScopeId !== undefined &&
            this.args.accessAsUserScopeId.trim().length === 0) {
            return teamsfx_api_1.err(error_1.DebugArgumentEmptyError("accessAsUserScopeId"));
        }
        const existing = this.args.objectId || this.args.clientId || this.args.clientSecret;
        const missing = !this.args.objectId || !this.args.clientId || !this.args.clientSecret;
        if (existing && missing) {
            return teamsfx_api_1.err(error_1.InvalidExistingAADArgsError());
        }
        return teamsfx_api_1.ok([]);
    }
    async registerAAD() {
        try {
            const result = await this.validateArgs();
            if (result.isErr()) {
                return teamsfx_api_1.err(result.error);
            }
            const projectSettingsResult = await projectSettingsLoader_1.loadProjectSettingsByProjectPath(this.projectPath, true);
            if (projectSettingsResult.isErr()) {
                return teamsfx_api_1.err(projectSettingsResult.error);
            }
            // save project settings as the project id may be updated
            const projectSettingsPath = projectSettingsLoader_1.getProjectSettingsPath(this.projectPath);
            await fs_extra_1.default.writeFile(projectSettingsPath, JSON.stringify(projectSettingsResult.value, null, 4));
            this.projectSettingsV3 = projectSettingsResult.value;
            this.cryptoProvider = new crypto_1.LocalCrypto(this.projectSettingsV3.projectId);
            const envInfoResult = await environment_1.environmentManager.loadEnvInfo(this.projectPath, this.cryptoProvider, environment_1.environmentManager.getLocalEnvName(), true);
            if (envInfoResult.isErr()) {
                return teamsfx_api_1.err(envInfoResult.error);
            }
            this.envInfoV3 = envInfoResult.value;
            if (this.envInfoV3.state[constants_1.ComponentNames.AadApp]) {
                const checkResult = await utils_1.checkM365Tenant(this.projectPath, this.projectSettingsV3, this.envInfoV3, this.m365TokenProvider, this.logger, this.telemetry, this.ui, this.cryptoProvider);
                if (checkResult.isErr()) {
                    return teamsfx_api_1.err(checkResult.error);
                }
            }
            this.envInfoV3.state[constants_1.ComponentNames.AadApp] =
                this.envInfoV3.state[constants_1.ComponentNames.AadApp] || {};
            // use existing AAD
            if (this.args.clientId) {
                // set objectId, clientId, clientSecret, oauth2PermissionScopeId from args to state
                this.envInfoV3.state[constants_1.ComponentNames.AadApp].objectId = this.args.objectId;
                this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientId = this.args.clientId;
                this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientSecret = this.args.clientSecret;
                this.envInfoV3.state[constants_1.ComponentNames.AadApp].oauth2PermissionScopeId =
                    this.args.accessAsUserScopeId || uuid_1.v4();
                return teamsfx_api_1.ok([util.format(ssoDebugMessages.useExistingAAD, this.args.clientId)]);
            }
            // set oauth2PermissionScopeId to state
            this.envInfoV3.state[constants_1.ComponentNames.AadApp].oauth2PermissionScopeId =
                this.envInfoV3.state[constants_1.ComponentNames.AadApp].oauth2PermissionScopeId || uuid_1.v4();
            // AAD already registered
            if (this.envInfoV3.state[constants_1.ComponentNames.AadApp].objectId &&
                this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientId) {
                if (!this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientSecret) {
                    await tokenProvider_1.TokenProvider.init({
                        m365: this.m365TokenProvider,
                    });
                    const config = new configs_1.ProvisionConfig(true, false);
                    config.objectId = this.envInfoV3.state[constants_1.ComponentNames.AadApp].objectId;
                    config.clientId = this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientId;
                    await aadAppClient_1.AadAppClient.createAadAppSecret(telemetry_1.TelemetryEvent.DebugSetUpSSO, config);
                    // set clientSecret to state
                    this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientSecret = config.password;
                }
                return teamsfx_api_1.ok([
                    util.format(ssoDebugMessages.AADAlreadyRegistered, this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientId),
                ]);
            }
            await tokenProvider_1.TokenProvider.init({
                m365: this.m365TokenProvider,
            });
            const context = this.constructPluginContext(this.envInfoV3, this.cryptoProvider);
            const manifest = await aadAppManifestManager_1.AadAppManifestManager.loadAadManifest(context);
            const config = new configs_1.ProvisionConfig(true, false);
            await aadAppClient_1.AadAppClient.createAadAppUsingManifest(telemetry_1.TelemetryEvent.DebugSetUpSSO, manifest, config);
            await aadAppClient_1.AadAppClient.createAadAppSecret(telemetry_1.TelemetryEvent.DebugSetUpSSO, config);
            // set objectId, clientId, clientSecret to state
            this.envInfoV3.state[constants_1.ComponentNames.AadApp].objectId = config.objectId;
            this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientId = config.clientId;
            this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientSecret = config.password;
            return teamsfx_api_1.ok([util.format(ssoDebugMessages.AADRegistered, config.objectId)]);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    async configureAAD() {
        try {
            // set applicationIdUris to state
            let applicationIdUri = "api://";
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(this.projectSettingsV3)) {
                const endpoint = this.envInfoV3.state[constants_1.ComponentNames.TeamsTab].endpoint;
                const url = new URL(endpoint);
                applicationIdUri += `${url.host}/`;
                if (!projectSettingsHelper_1.ProjectSettingsHelper.includeBot(this.projectSettingsV3)) {
                    applicationIdUri += this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientId;
                }
            }
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeBot(this.projectSettingsV3)) {
                applicationIdUri += `botid-${this.envInfoV3.state[constants_1.ComponentNames.TeamsBot].botId}`;
            }
            this.envInfoV3.state[constants_1.ComponentNames.AadApp].applicationIdUris = applicationIdUri;
            // set frontendEndpoint to state
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(this.projectSettingsV3)) {
                this.envInfoV3.state[constants_1.ComponentNames.AadApp].frontendEndpoint = "https://localhost";
            }
            // set botId, botEndpoint to state
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeBot(this.projectSettingsV3)) {
                this.envInfoV3.state[constants_1.ComponentNames.AadApp].botId =
                    this.envInfoV3.state[constants_1.ComponentNames.TeamsBot].botId;
                this.envInfoV3.state[constants_1.ComponentNames.AadApp].botEndpoint =
                    this.envInfoV3.state[constants_1.ComponentNames.TeamsBot].siteEndpoint;
            }
            await tokenProvider_1.TokenProvider.init({
                m365: this.m365TokenProvider,
            });
            // set tenantId, oauthHost, oauthAuthority to state
            this.envInfoV3.state[constants_1.ComponentNames.AadApp].tenantId = tokenProvider_1.TokenProvider.tenantId;
            this.envInfoV3.state[constants_1.ComponentNames.AadApp].oauthHost = constants_2.Constants.oauthAuthorityPrefix;
            this.envInfoV3.state[constants_1.ComponentNames.AadApp].oauthAuthority = `${constants_2.Constants.oauthAuthorityPrefix}/${tokenProvider_1.TokenProvider.tenantId}`;
            const context = this.constructPluginContext(this.envInfoV3, this.cryptoProvider);
            const manifest = await aadAppManifestManager_1.AadAppManifestManager.loadAadManifest(context);
            await aadAppClient_1.AadAppClient.updateAadAppUsingManifest(telemetry_1.TelemetryEvent.DebugSetUpSSO, manifest, false);
            return teamsfx_api_1.ok([ssoDebugMessages.AADConfigured]);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    async buildAndSaveAADManifest() {
        try {
            const context = this.constructPluginContext(this.envInfoV3, this.cryptoProvider);
            const manifest = await aadAppManifestManager_1.AadAppManifestManager.loadAadManifest(context);
            await aadAppManifestManager_1.AadAppManifestManager.writeManifestFileToBuildFolder(manifest, context);
            const aadManifestPath = `${context.root}/${teamsfx_api_1.BuildFolderName}/${teamsfx_api_1.AppPackageFolderName}/aad.${context.envInfo.envName}.json`;
            return teamsfx_api_1.ok([util.format(ssoDebugMessages.AADManifestSaved, path.normalize(aadManifestPath))]);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    async saveStates() {
        try {
            const statePath = await environment_1.environmentManager.writeEnvState(lodash_1.cloneDeep(this.envInfoV3.state), this.projectPath, this.cryptoProvider, environment_1.environmentManager.getLocalEnvName(), true);
            if (statePath.isErr()) {
                return teamsfx_api_1.err(statePath.error);
            }
            return teamsfx_api_1.ok([util.format(ssoDebugMessages.statesSaved, path.normalize(statePath.value))]);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    async setEnvs() {
        try {
            const messages = [];
            const localEnvProvider = new localEnvProvider_1.LocalEnvProvider(this.projectPath);
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(this.projectSettingsV3)) {
                const frontendEnvs = await localEnvProvider.loadFrontendLocalEnvs();
                frontendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.frontend.teamsfx.ClientId] =
                    this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientId;
                frontendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.frontend.teamsfx.LoginUrl] = `${this.envInfoV3.state[constants_1.ComponentNames.TeamsTab].endpoint}/auth-start.html`;
                if (projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(this.projectSettingsV3)) {
                    frontendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.frontend.teamsfx.FuncEndpoint] =
                        frontendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.frontend.teamsfx.FuncEndpoint] ||
                            "http://localhost:7071";
                    frontendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.frontend.teamsfx.FuncName] = this.projectSettingsV3
                        .defaultFunctionName;
                }
                const envPath = await localEnvProvider.saveFrontendLocalEnvs(frontendEnvs);
                messages.push(util.format(ssoDebugMessages.tabEnvsSet, path.normalize(envPath)));
            }
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(this.projectSettingsV3)) {
                const backendEnvs = await localEnvProvider.loadBackendLocalEnvs();
                backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.ClientId] =
                    this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientId;
                backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.ClientSecret] =
                    this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientSecret;
                backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.TenantId] =
                    this.envInfoV3.state[constants_1.ComponentNames.AadApp].tenantId;
                backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.AuthorityHost] =
                    this.envInfoV3.state[constants_1.ComponentNames.AadApp].oauthHost;
                backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.AllowedAppIds] =
                    tools_1.getAllowedAppIds().join(";");
                if (projectSettingsHelperV3_1.hasSQL(this.projectSettingsV3)) {
                    backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlEndpoint] =
                        backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlEndpoint] || "";
                    backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlUserName] =
                        backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlUserName] || "";
                    backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlPassword] =
                        backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlPassword] || "";
                    backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlDbName] =
                        backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlDbName] || "";
                    backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlIdentityId] =
                        backendEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.backend.teamsfx.SqlIdentityId] || "";
                }
                const envPath = await localEnvProvider.saveBackendLocalEnvs(backendEnvs);
                messages.push(util.format(ssoDebugMessages.backendEnvsSet, path.normalize(envPath)));
            }
            if (projectSettingsHelper_1.ProjectSettingsHelper.includeBot(this.projectSettingsV3)) {
                const botEnvs = await localEnvProvider.loadBotLocalEnvs();
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.ClientId] =
                    this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientId;
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.ClientSecret] =
                    this.envInfoV3.state[constants_1.ComponentNames.AadApp].clientSecret;
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.TenantId] =
                    this.envInfoV3.state[constants_1.ComponentNames.AadApp].tenantId;
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.AuthorityHost] =
                    this.envInfoV3.state[constants_1.ComponentNames.AadApp].oauthHost;
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.LoginEndpoint] = `${this.envInfoV3.state[constants_1.ComponentNames.AadApp].botEndpoint}/auth-start.html`;
                botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.ApplicationIdUri] =
                    this.envInfoV3.state[constants_1.ComponentNames.AadApp].applicationIdUris;
                if (projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(this.projectSettingsV3)) {
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.ApiEndpoint] =
                        botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.ApiEndpoint] || "http://localhost:7071";
                }
                if (projectSettingsHelperV3_1.hasSQL(this.projectSettingsV3)) {
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlEndpoint] =
                        botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlEndpoint] || "";
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlUserName] =
                        botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlUserName] || "";
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlPassword] =
                        botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlPassword] || "";
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlDbName] =
                        botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlDbName] || "";
                    botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlIdentityId] =
                        botEnvs.teamsfx[localEnvProvider_1.LocalEnvKeys.bot.teamsfx.SqlIdentityId] || "";
                }
                const envPath = await localEnvProvider.saveBotLocalEnvs(botEnvs);
                messages.push(util.format(ssoDebugMessages.botEnvsSet, path.normalize(envPath)));
            }
            return teamsfx_api_1.ok(messages);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    constructPluginContext(envInfoV3, cryptoProvider) {
        const envInfo = {
            envName: envInfoV3.envName,
            config: envInfoV3.config,
            state: tools_1.objectToMap(migrate_1.convertEnvStateV3ToV2(envInfoV3.state)),
        };
        const context = {
            root: this.projectPath,
            logProvider: this.logger,
            telemetryReporter: this.telemetry,
            ui: this.ui,
            cryptoProvider,
            envInfo: envInfo,
            config: new teamsfx_api_1.ConfigMap(),
        };
        return context;
    }
}
exports.SSODebugHandler = SSODebugHandler;
//# sourceMappingURL=sso.js.map