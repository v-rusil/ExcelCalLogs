// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkM365Tenant = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../constants");
const manifestProvider_1 = require("../resource/appManifest/manifestProvider");
const provisionUtils_1 = require("../provisionUtils");
const utils_1 = require("../utils");
async function checkM365Tenant(projectPath, projectSettingsV3, envInfoV3, m365TokenProvider, logger, telemetry, ui, cryptoProvider) {
    var _a, _b;
    const resourceContextV3 = constructResourceContextV3(projectPath, projectSettingsV3, envInfoV3, m365TokenProvider, logger, telemetry, ui, cryptoProvider);
    const inputs = constructInputsWithProjectPath(projectPath);
    const tenantId = ((_a = envInfoV3.state[constants_1.ComponentNames.AadApp]) === null || _a === void 0 ? void 0 : _a.tenantId) ||
        ((_b = envInfoV3.state[constants_1.ComponentNames.AppManifest]) === null || _b === void 0 ? void 0 : _b.tenantId);
    const checkResult = await provisionUtils_1.checkWhetherLocalDebugM365TenantMatches(envInfoV3, resourceContextV3, utils_1.isCSharpProject(projectSettingsV3.programmingLanguage), tenantId, m365TokenProvider, inputs);
    if (checkResult.isErr()) {
        return teamsfx_api_1.err(checkResult.error);
    }
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.checkM365Tenant = checkM365Tenant;
function constructResourceContextV3(projectPath, projectSettingsV3, envInfoV3, m365TokenProvider, logger, telemetry, ui, cryptoProvider) {
    const context = {
        envInfo: envInfoV3,
        tokenProvider: {
            m365TokenProvider,
        },
        projectPath,
        manifestProvider: new manifestProvider_1.DefaultManifestProvider(),
        projectSetting: projectSettingsV3,
        userInteraction: ui,
        logProvider: logger,
        telemetryReporter: telemetry,
        cryptoProvider,
    };
    return context;
}
function constructInputsWithProjectPath(projectPath) {
    const inputs = {
        projectPath,
        platform: teamsfx_api_1.Platform.VSCode,
    };
    return inputs;
}
//# sourceMappingURL=utils.js.map