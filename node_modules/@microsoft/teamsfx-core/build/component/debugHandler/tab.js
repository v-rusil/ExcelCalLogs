// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabDebugHandler = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const lodash_1 = require("lodash");
const path = tslib_1.__importStar(require("path"));
const util = tslib_1.__importStar(require("util"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const crypto_1 = require("../../core/crypto");
const environment_1 = require("../../core/environment");
const projectSettingsLoader_1 = require("../../core/middleware/projectSettingsLoader");
const constants_1 = require("../constants");
const error_1 = require("./error");
const localEnvProvider_1 = require("./localEnvProvider");
const utils_1 = require("./utils");
const tabDebugMessages = {
    savingStates: "Saving the states of tab to configure manifest and AAD app ...",
    settingEnvs: "Saving the environment variables of tab to set up the development environment and start the local server ...",
    statesSaved: "The states of tab are saved in %s",
    envsSet: "The environment variables of tab are saved in %s",
};
class TabDebugHandler {
    constructor(projectPath, args, m365TokenProvider, logger, telemetry, ui) {
        this.projectPath = projectPath;
        this.args = args;
        this.m365TokenProvider = m365TokenProvider;
        this.logger = logger;
        this.telemetry = telemetry;
        this.ui = ui;
    }
    getActions() {
        const actions = [];
        actions.push({
            startMessage: tabDebugMessages.savingStates,
            run: this.saveStates.bind(this),
        });
        actions.push({
            startMessage: tabDebugMessages.settingEnvs,
            run: this.setEnvs.bind(this),
        });
        return actions;
    }
    async validateArgs() {
        if (!this.args.baseUrl || this.args.baseUrl.trim().length === 0) {
            return teamsfx_api_1.err(error_1.DebugArgumentEmptyError("baseUrl"));
        }
        try {
            const url = new URL(this.args.baseUrl);
            if (url.protocol !== "https:") {
                return teamsfx_api_1.err(error_1.InvalidTabBaseUrlError());
            }
        }
        catch (_a) {
            return teamsfx_api_1.err(error_1.InvalidTabBaseUrlError());
        }
        return teamsfx_api_1.ok([]);
    }
    async saveStates() {
        try {
            const result = await this.validateArgs();
            if (result.isErr()) {
                return teamsfx_api_1.err(result.error);
            }
            const projectSettingsResult = await projectSettingsLoader_1.loadProjectSettingsByProjectPath(this.projectPath, true);
            if (projectSettingsResult.isErr()) {
                return teamsfx_api_1.err(projectSettingsResult.error);
            }
            // save project settings as the project id may be updated
            const projectSettingsPath = projectSettingsLoader_1.getProjectSettingsPath(this.projectPath);
            await fs_extra_1.default.writeFile(projectSettingsPath, JSON.stringify(projectSettingsResult.value, null, 4));
            this.projectSettingsV3 = projectSettingsResult.value;
            this.cryptoProvider = new crypto_1.LocalCrypto(this.projectSettingsV3.projectId);
            const envInfoResult = await environment_1.environmentManager.loadEnvInfo(this.projectPath, this.cryptoProvider, environment_1.environmentManager.getLocalEnvName(), true);
            if (envInfoResult.isErr()) {
                return teamsfx_api_1.err(envInfoResult.error);
            }
            this.envInfoV3 = envInfoResult.value;
            if (this.envInfoV3.state[constants_1.ComponentNames.TeamsTab]) {
                const checkResult = await utils_1.checkM365Tenant(this.projectPath, this.projectSettingsV3, this.envInfoV3, this.m365TokenProvider, this.logger, this.telemetry, this.ui, this.cryptoProvider);
                if (checkResult.isErr()) {
                    return teamsfx_api_1.err(checkResult.error);
                }
            }
            this.envInfoV3.state[constants_1.ComponentNames.TeamsTab] =
                this.envInfoV3.state[constants_1.ComponentNames.TeamsTab] || {};
            // set endpoint, domain, indexPath to state
            this.envInfoV3.state[constants_1.ComponentNames.TeamsTab].endpoint = this.args.baseUrl;
            this.envInfoV3.state[constants_1.ComponentNames.TeamsTab].domain = "localhost";
            this.envInfoV3.state[constants_1.ComponentNames.TeamsTab].indexPath = constants_1.PathConstants.reactTabIndexPath;
            const statePath = await environment_1.environmentManager.writeEnvState(lodash_1.cloneDeep(this.envInfoV3.state), this.projectPath, this.cryptoProvider, environment_1.environmentManager.getLocalEnvName(), true);
            if (statePath.isErr()) {
                return teamsfx_api_1.err(statePath.error);
            }
            return teamsfx_api_1.ok([util.format(tabDebugMessages.statesSaved, path.normalize(statePath.value))]);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
    async setEnvs() {
        var _a;
        try {
            const localEnvProvider = new localEnvProvider_1.LocalEnvProvider(this.projectPath);
            const frontendEnvs = await localEnvProvider.loadFrontendLocalEnvs();
            frontendEnvs.template[localEnvProvider_1.LocalEnvKeys.frontend.template.Browser] = "none";
            frontendEnvs.template[localEnvProvider_1.LocalEnvKeys.frontend.template.Https] = "true";
            const url = new URL((_a = this.envInfoV3) === null || _a === void 0 ? void 0 : _a.state[constants_1.ComponentNames.TeamsTab].endpoint);
            frontendEnvs.template[localEnvProvider_1.LocalEnvKeys.frontend.template.Port] = url.port;
            // certificate envs are set when cheking prerequisites
            const envPath = await localEnvProvider.saveFrontendLocalEnvs(frontendEnvs);
            return teamsfx_api_1.ok([util.format(tabDebugMessages.envsSet, path.normalize(envPath))]);
        }
        catch (error) {
            return teamsfx_api_1.err(teamsfx_api_1.assembleError(error, error_1.errorSource));
        }
    }
}
exports.TabDebugHandler = TabDebugHandler;
//# sourceMappingURL=tab.js.map