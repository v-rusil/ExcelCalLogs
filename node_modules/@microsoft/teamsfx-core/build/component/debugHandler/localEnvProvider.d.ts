export interface LocalEnvs {
    template: {
        [key: string]: string;
    };
    teamsfx: {
        [key: string]: string;
    };
    customized: {
        [key: string]: string;
    };
}
export declare const LocalEnvKeys: Readonly<{
    frontend: {
        template: {
            Browser: string;
            Https: string;
            Port: string;
            SslCrtFile: string;
            SslKeyFile: string;
        };
        teamsfx: {
            ClientId: string;
            LoginUrl: string;
            FuncEndpoint: string;
            FuncName: string;
        };
    };
    backend: {
        teamsfx: {
            ClientId: string;
            ClientSecret: string;
            TenantId: string;
            AuthorityHost: string;
            AllowedAppIds: string;
            SqlEndpoint: string;
            SqlDbName: string;
            SqlUserName: string;
            SqlPassword: string;
            SqlIdentityId: string;
        };
    };
    bot: {
        template: {
            BotId: string;
            BotPassword: string;
        };
        teamsfx: {
            ClientId: string;
            ClientSecret: string;
            TenantId: string;
            AuthorityHost: string;
            LoginEndpoint: string;
            ApplicationIdUri: string;
            ApiEndpoint: string;
            SqlEndpoint: string;
            SqlDbName: string;
            SqlUserName: string;
            SqlPassword: string;
            SqlIdentityId: string;
        };
    };
    videoFilterApp: {
        template: {
            SslCrtFile: string;
            SslKeyFile: string;
        };
        teamsfx: {};
    };
}>;
export declare class LocalEnvProvider {
    static readonly LocalEnvFileName: string;
    private readonly projectPath;
    constructor(projectPath: string);
    loadFrontendLocalEnvs(): Promise<LocalEnvs>;
    loadBackendLocalEnvs(): Promise<LocalEnvs>;
    loadBotLocalEnvs(): Promise<LocalEnvs>;
    loadVideoFilterLocalEnvs(): Promise<LocalEnvs>;
    saveFrontendLocalEnvs(envs: LocalEnvs): Promise<string>;
    saveBackendLocalEnvs(envs: LocalEnvs): Promise<string>;
    saveBotLocalEnvs(envs: LocalEnvs): Promise<string>;
    saveVideoFilterLocalEnvs(envs: LocalEnvs): Promise<string>;
    private loadLocalEnvFile;
    private saveLocalEnvFile;
}
//# sourceMappingURL=localEnvProvider.d.ts.map