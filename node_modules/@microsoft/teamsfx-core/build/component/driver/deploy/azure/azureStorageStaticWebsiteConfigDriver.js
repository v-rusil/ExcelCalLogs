"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var AzureStorageStaticWebsiteConfigDriver_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureStorageStaticWebsiteConfigDriver = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const common_1 = require("../../../utils/common");
const azureResourceOperation_1 = require("../../../utils/azureResourceOperation");
const hooks_1 = require("@feathersjs/hooks");
const addStartAndEndTelemetry_1 = require("../../middleware/addStartAndEndTelemetry");
const commonConstant_1 = require("../../../constant/commonConstant");
const deployConstant_1 = require("../../../constant/deployConstant");
const messages_1 = require("../../../messages");
const localizeUtils_1 = require("../../../../common/localizeUtils");
const ACTION_NAME = "azureStorage/enableStaticWebsite";
/**
 * enable static website for azure storage account
 */
let AzureStorageStaticWebsiteConfigDriver = AzureStorageStaticWebsiteConfigDriver_1 = class AzureStorageStaticWebsiteConfigDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString(
        // eslint-disable-next-line no-secrets/no-secrets
        "driver.deploy.enableStaticWebsiteInAzureStorageDescription");
    }
    async run(args, context) {
        var _a;
        const progressBar = await ((_a = context.ui) === null || _a === void 0 ? void 0 : _a.createProgressBar(messages_1.ProgressMessages.configureAzureStorageEnableStaticWebsite, 2));
        return common_1.wrapRun(() => this.config(args, context, progressBar), AzureStorageStaticWebsiteConfigDriver_1.cleanup.bind(progressBar), context.logProvider);
    }
    execute(args, ctx) {
        return common_1.wrapSummary(this.run.bind(this, args, ctx), [
            "driver.deploy.enableStaticWebsiteSummary",
        ]);
    }
    /**
     * enable static website for azure storage account
     * @param args Azure Storage resourceId, index page and error page
     * @param context log provider, progress handler, telemetry reporter
     * @param progressBar progress handler
     */
    async config(args, context, progressBar) {
        var _a, _b;
        const logger = context.logProvider;
        await (progressBar === null || progressBar === void 0 ? void 0 : progressBar.start());
        await (progressBar === null || progressBar === void 0 ? void 0 : progressBar.next(messages_1.ProgressMessages.checkAzureStorageEnableStaticWebsite));
        const input = AzureStorageStaticWebsiteConfigDriver_1.STORAGE_CONFIG_ARGS(args, AzureStorageStaticWebsiteConfigDriver_1.HELP_LINK);
        await logger.debug(`Enabling static website feature for Azure Storage account ${input.storageResourceId}`);
        const azureInfo = azureResourceOperation_1.parseAzureResourceId(input.storageResourceId, AzureStorageStaticWebsiteConfigDriver_1.RESOURCE_PATTERN);
        const azureTokenCredential = await azureResourceOperation_1.getAzureAccountCredential(context.azureAccountProvider);
        const azureBlobClient = await azureResourceOperation_1.createBlobServiceClient(azureInfo, azureTokenCredential);
        if (await this.isStorageStatusWebsiteEnabled(azureInfo, azureBlobClient, context)) {
            await logger.debug(`Static website feature is already enabled for Azure Storage account ${input.storageResourceId}.`);
            await (progressBar === null || progressBar === void 0 ? void 0 : progressBar.next(messages_1.ProgressMessages.azureStorageStaticWebsiteAlreadyEnabled));
            await (progressBar === null || progressBar === void 0 ? void 0 : progressBar.end(true));
            return AzureStorageStaticWebsiteConfigDriver_1.RETURN_VALUE;
        }
        await (progressBar === null || progressBar === void 0 ? void 0 : progressBar.next(messages_1.ProgressMessages.enableAzureStorageStaticWebsite));
        const properties = {
            staticWebsite: {
                indexDocument: (_a = input.indexPage) !== null && _a !== void 0 ? _a : deployConstant_1.DeployConstant.DEFAULT_INDEX_DOCUMENT,
                errorDocument404Path: (_b = input.errorPage) !== null && _b !== void 0 ? _b : deployConstant_1.DeployConstant.DEFAULT_ERROR_DOCUMENT,
                enabled: true,
            },
        };
        await azureBlobClient.setProperties(properties);
        await (progressBar === null || progressBar === void 0 ? void 0 : progressBar.end(true));
        return Promise.resolve(AzureStorageStaticWebsiteConfigDriver_1.RETURN_VALUE);
    }
    async isStorageStatusWebsiteEnabled(azureInfo, azureBlobClient, context) {
        var _a;
        await context.logProvider.debug(`Checking if static website feature is enabled in Azure Storage account '${azureInfo.instanceId}'.`);
        return ((_a = (await azureBlobClient.getProperties()).staticWebsite) === null || _a === void 0 ? void 0 : _a.enabled) === true;
    }
    /**
     * call when error happens
     * do some resource clean up
     */
    static async cleanup(progressBar) {
        await (progressBar === null || progressBar === void 0 ? void 0 : progressBar.end(false));
    }
};
AzureStorageStaticWebsiteConfigDriver.HELP_LINK = "https://aka.ms/teamsfx-actions/azure-storage-enable-static-website";
AzureStorageStaticWebsiteConfigDriver.STORAGE_CONFIG_ARGS = common_1.asFactory({
    storageResourceId: common_1.asString,
    indexPage: common_1.asOptional(common_1.asString),
    errorPage: common_1.asOptional(common_1.asString),
});
AzureStorageStaticWebsiteConfigDriver.RETURN_VALUE = new Map();
AzureStorageStaticWebsiteConfigDriver.RESOURCE_PATTERN = /\/subscriptions\/([^\/]*)\/resourceGroups\/([^\/]*)\/providers\/Microsoft.Storage\/storageAccounts\/([^\/]*)/i;
tslib_1.__decorate([
    hooks_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(ACTION_NAME, commonConstant_1.TelemetryConstant.PROVISION_COMPONENT_NAME)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AzureStorageStaticWebsiteConfigDriver.prototype, "run", null);
AzureStorageStaticWebsiteConfigDriver = AzureStorageStaticWebsiteConfigDriver_1 = tslib_1.__decorate([
    typedi_1.Service(ACTION_NAME)
], AzureStorageStaticWebsiteConfigDriver);
exports.AzureStorageStaticWebsiteConfigDriver = AzureStorageStaticWebsiteConfigDriver;
//# sourceMappingURL=azureStorageStaticWebsiteConfigDriver.js.map