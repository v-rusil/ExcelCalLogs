"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureDeployImpl = void 0;
const tslib_1 = require("tslib");
const common_1 = require("../../../../utils/common");
const deployError_1 = require("../../../../error/deployError");
const baseDeployImpl_1 = require("./baseDeployImpl");
const js_base64_1 = require("js-base64");
const appService = tslib_1.__importStar(require("@azure/arm-appservice"));
const deployConstant_1 = require("../../../../constant/deployConstant");
const axios_1 = tslib_1.__importDefault(require("axios"));
const tools_1 = require("../../../../../common/tools");
const commonConstant_1 = require("../../../../constant/commonConstant");
const azureResourceOperation_1 = require("../../../../utils/azureResourceOperation");
const fs = tslib_1.__importStar(require("fs-extra"));
const componentError_1 = require("../../../../error/componentError");
const progressBarHelper_1 = require("./progressBarHelper");
class AzureDeployImpl extends baseDeployImpl_1.BaseDeployImpl {
    constructor() {
        super(...arguments);
        this.prepare = undefined;
    }
    async deploy(args) {
        var _a, _b;
        // check root path exists
        if (!(await fs.pathExists(this.workingDirectory))) {
            throw componentError_1.PrerequisiteError.folderNotExists(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, this.workingDirectory, this.helpLink);
        }
        // check distribution folder exists
        if (!(await fs.pathExists(this.distDirectory))) {
            throw componentError_1.PrerequisiteError.folderNotExists(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, this.distDirectory, this.helpLink);
        }
        const resourceId = common_1.checkMissingArgs("resourceId", args.resourceId);
        const azureResource = this.parseResourceId(resourceId);
        const azureCredential = await azureResourceOperation_1.getAzureAccountCredential(this.context.azureAccountProvider);
        const inputs = { ignoreFile: args.ignoreFile };
        if (args.dryRun && this.prepare) {
            this.progressNames = this.progressPrepare;
        }
        this.progressBar = this.createProgressBar(this.ui);
        this.progressHandler = progressBarHelper_1.progressBarHelper(this.progressNames);
        await ((_a = this.progressBar) === null || _a === void 0 ? void 0 : _a.start());
        if (args.dryRun && this.prepare) {
            await this.prepare(inputs);
            return false;
        }
        await this.azureDeploy(inputs, azureResource, azureCredential);
        await ((_b = this.progressBar) === null || _b === void 0 ? void 0 : _b.end(true));
        return true;
    }
    /**
     * check if resource id is legal and parse it
     * @param resourceId deploy target
     * @protected
     */
    parseResourceId(resourceId) {
        return azureResourceOperation_1.parseAzureResourceId(resourceId, this.pattern);
    }
    /**
     * loop and check azure deployment status
     * by default, it will wait for 120 minutes
     * @param location azure deployment location
     * @param config azure upload config, including azure account credential
     * @param logger log provider
     * @protected
     */
    async checkDeployStatus(location, config, logger) {
        var _a, _b, _c, _d;
        let res;
        for (let i = 0; i < deployConstant_1.DeployConstant.DEPLOY_CHECK_RETRY_TIMES; ++i) {
            try {
                res = await AzureDeployImpl.AXIOS_INSTANCE.get(location, config);
            }
            catch (e) {
                if (axios_1.default.isAxiosError(e)) {
                    await (logger === null || logger === void 0 ? void 0 : logger.error(`Check deploy status failed with response status code: ${(_b = (_a = e.response) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : "NA"}, message: ${JSON.stringify((_c = e.response) === null || _c === void 0 ? void 0 : _c.data)}`));
                }
                throw deployError_1.DeployExternalApiCallError.deployStatusError(e, undefined, this.helpLink);
            }
            if (res) {
                if ((res === null || res === void 0 ? void 0 : res.status) === commonConstant_1.HttpStatusCode.ACCEPTED) {
                    await tools_1.waitSeconds(deployConstant_1.DeployConstant.BACKOFF_TIME_S);
                }
                else if ((res === null || res === void 0 ? void 0 : res.status) === commonConstant_1.HttpStatusCode.OK || (res === null || res === void 0 ? void 0 : res.status) === commonConstant_1.HttpStatusCode.CREATED) {
                    if (((_d = res.data) === null || _d === void 0 ? void 0 : _d.status) === deployConstant_1.DeployStatus.Failed) {
                        await (logger === null || logger === void 0 ? void 0 : logger.error(`Deployment is failed with error message: ${JSON.stringify(res.data)}`));
                        throw deployError_1.DeployExternalApiCallError.deployRemoteStatusError();
                    }
                    return res.data;
                }
                else {
                    if (res.status) {
                        await (logger === null || logger === void 0 ? void 0 : logger.error(`Deployment is failed with error code: ${res.status}.`));
                    }
                    throw deployError_1.DeployExternalApiCallError.deployStatusError(res, res.status, this.helpLink);
                }
            }
        }
        throw deployError_1.DeployTimeoutError.checkDeployStatusTimeout(this.helpLink);
    }
    /**
     * create azure deploy config for Azure Function and Azure App service
     * @param azureResource azure resource info
     * @param azureCredential user azure credential
     * @protected
     */
    async createAzureDeployConfig(azureResource, azureCredential) {
        var _a, _b;
        this.managementClient = new appService.WebSiteManagementClient(azureCredential, azureResource.subscriptionId);
        let listResponse;
        try {
            listResponse = await this.managementClient.webApps.beginListPublishingCredentialsAndWait(azureResource.resourceGroupName, azureResource.instanceId);
        }
        catch (e) {
            throw deployError_1.DeployExternalApiCallError.listPublishingCredentialsError(e, this.helpLink);
        }
        const publishingUserName = (_a = listResponse.publishingUserName) !== null && _a !== void 0 ? _a : "";
        const publishingPassword = (_b = listResponse.publishingPassword) !== null && _b !== void 0 ? _b : "";
        const encryptedCredentials = js_base64_1.Base64.encode(`${publishingUserName}:${publishingPassword}`);
        return {
            headers: {
                "Content-Type": "application/octet-stream",
                "Cache-Control": "no-cache",
                Authorization: `Basic ${encryptedCredentials}`,
            },
            maxContentLength: Infinity,
            maxBodyLength: Infinity,
            timeout: deployConstant_1.DeployConstant.DEPLOY_TIMEOUT_IN_MS,
        };
    }
    async restartFunctionApp(azureResource) {
        var _a, _b;
        await this.context.logProvider.debug("Restarting function app...");
        try {
            await ((_b = (_a = this.managementClient) === null || _a === void 0 ? void 0 : _a.webApps) === null || _b === void 0 ? void 0 : _b.restart(azureResource.resourceGroupName, azureResource.instanceId));
        }
        catch (e) {
            throw deployError_1.DeployExternalApiCallError.restartWebAppError(e, this.helpLink);
        }
    }
}
exports.AzureDeployImpl = AzureDeployImpl;
AzureDeployImpl.AXIOS_INSTANCE = axios_1.default.create();
//# sourceMappingURL=azureDeployImpl.js.map