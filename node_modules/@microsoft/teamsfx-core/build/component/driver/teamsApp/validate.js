"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateTeamsAppDriver = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const lib_1 = require("@feathersjs/hooks/lib");
const typedi_1 = require("typedi");
const wrapUtil_1 = require("../util/wrapUtil");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const ManifestUtils_1 = require("../../resource/appManifest/utils/ManifestUtils");
const results_1 = require("../../resource/appManifest/results");
const errors_1 = require("../../resource/appManifest/errors");
const localizeUtils_1 = require("../../../common/localizeUtils");
const constants_1 = require("../../../common/constants");
const common_1 = require("../../utils/common");
const actionName = "teamsApp/validate";
let ValidateTeamsAppDriver = class ValidateTeamsAppDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.teamsApp.description.validateDriver");
    }
    async run(args, context) {
        const wrapContext = new wrapUtil_1.WrapDriverContext(context, actionName, actionName);
        const res = await this.validate(args, wrapContext);
        return res;
    }
    async execute(args, context) {
        const wrapContext = new wrapUtil_1.WrapDriverContext(context, actionName, actionName);
        const res = await this.validate(args, wrapContext);
        return {
            result: res,
            summaries: wrapContext.summaries,
        };
    }
    async validate(args, context, withEmptyCapabilities) {
        var _a, _b;
        const result = this.validateArgs(args);
        if (result.isErr()) {
            return teamsfx_api_1.err(result.error);
        }
        const state = this.loadCurrentState();
        const manifestRes = await ManifestUtils_1.manifestUtils.getManifestV3(common_1.getAbsolutePath(args.manifestPath, context.projectPath), state, withEmptyCapabilities);
        if (manifestRes.isErr()) {
            return teamsfx_api_1.err(manifestRes.error);
        }
        const manifest = manifestRes.value;
        let validationResult;
        if (manifest.$schema) {
            try {
                validationResult = await teamsfx_api_1.ManifestUtil.validateManifest(manifest);
            }
            catch (e) {
                return teamsfx_api_1.err(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.ValidationFailedError.name, errors_1.AppStudioError.ValidationFailedError.message([
                    localizeUtils_1.getLocalizedString("error.appstudio.validateFetchSchemaFailed", manifest.$schema, e.message),
                ]), constants_1.HelpLinks.WhyNeedProvision));
            }
        }
        else {
            return teamsfx_api_1.err(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.ValidationFailedError.name, errors_1.AppStudioError.ValidationFailedError.message([
                localizeUtils_1.getLocalizedString("error.appstudio.validateSchemaNotDefined"),
            ]), constants_1.HelpLinks.WhyNeedProvision));
        }
        if (validationResult.length > 0) {
            const errMessage = errors_1.AppStudioError.ValidationFailedError.message(validationResult);
            (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.error(localizeUtils_1.getLocalizedString("plugins.appstudio.validationFailedNotice"));
            const validationFailed = results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.ValidationFailedError.name, errMessage, "https://aka.ms/teamsfx-actions/teamsapp-validate");
            return teamsfx_api_1.err(validationFailed);
        }
        const validationSuccess = localizeUtils_1.getLocalizedString("plugins.appstudio.validationSucceedNotice");
        if (context.platform === teamsfx_api_1.Platform.VS) {
            context.logProvider.info(validationSuccess);
        }
        else {
            (_b = context.ui) === null || _b === void 0 ? void 0 : _b.showMessage("info", validationSuccess, false);
        }
        return teamsfx_api_1.ok(new Map());
    }
    loadCurrentState() {
        return {
            TAB_ENDPOINT: process.env.TAB_ENDPOINT,
            TAB_DOMAIN: process.env.TAB_DOMAIN,
            BOT_ID: process.env.BOT_ID,
            BOT_DOMAIN: process.env.BOT_DOMAIN,
            ENV_NAME: process.env.TEAMSFX_ENV,
        };
    }
    validateArgs(args) {
        const invalidParams = [];
        if (!args || !args.manifestPath) {
            invalidParams.push("manifestPath");
        }
        if (invalidParams.length > 0) {
            return teamsfx_api_1.err(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.InvalidParameterError.name, errors_1.AppStudioError.InvalidParameterError.message(actionName, invalidParams), "https://aka.ms/teamsfx-actions/teamsapp-validate"));
        }
        else {
            return teamsfx_api_1.ok(undefined);
        }
    }
};
tslib_1.__decorate([
    lib_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, wrapUtil_1.WrapDriverContext, Boolean]),
    tslib_1.__metadata("design:returntype", Promise)
], ValidateTeamsAppDriver.prototype, "validate", null);
ValidateTeamsAppDriver = tslib_1.__decorate([
    typedi_1.Service(actionName)
], ValidateTeamsAppDriver);
exports.ValidateTeamsAppDriver = ValidateTeamsAppDriver;
//# sourceMappingURL=validate.js.map