"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateAppPackageDriver = exports.actionName = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const path = tslib_1.__importStar(require("path"));
const lib_1 = require("@feathersjs/hooks/lib");
const url_1 = require("url");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const wrapUtil_1 = require("../util/wrapUtil");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const ManifestUtils_1 = require("../../resource/appManifest/utils/ManifestUtils");
const results_1 = require("../../resource/appManifest/results");
const errors_1 = require("../../resource/appManifest/errors");
const constants_1 = require("../../resource/appManifest/constants");
const localizeUtils_1 = require("../../../common/localizeUtils");
const constants_2 = require("../../../common/constants");
exports.actionName = "teamsApp/zipAppPackage";
let CreateAppPackageDriver = class CreateAppPackageDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.teamsApp.description.createAppPackageDriver");
    }
    async run(args, context) {
        const wrapContext = new wrapUtil_1.WrapDriverContext(context, exports.actionName, exports.actionName);
        const res = await this.build(args, wrapContext);
        return res;
    }
    async execute(args, context) {
        const wrapContext = new wrapUtil_1.WrapDriverContext(context, exports.actionName, exports.actionName);
        const res = await this.build(args, wrapContext);
        return {
            result: res,
            summaries: wrapContext.summaries,
        };
    }
    async build(args, context) {
        var _a, _b, _c;
        const result = this.validateArgs(args);
        if (result.isErr()) {
            return teamsfx_api_1.err(result.error);
        }
        const state = this.loadCurrentState();
        let manifestPath = args.manifestPath;
        if (!path.isAbsolute(manifestPath)) {
            manifestPath = path.join(context.projectPath, manifestPath);
        }
        const manifestRes = await ManifestUtils_1.manifestUtils.getManifestV3(manifestPath, state);
        if (manifestRes.isErr()) {
            return teamsfx_api_1.err(manifestRes.error);
        }
        const manifest = manifestRes.value;
        // Deal with relative path
        // Environment variables should have been replaced by value
        // ./build/appPackage/appPackage.dev.zip instead of ./build/appPackage/appPackage.${{TEAMSFX_ENV}}.zip
        let zipFileName = args.outputZipPath;
        if (!path.isAbsolute(zipFileName)) {
            zipFileName = path.join(context.projectPath, zipFileName);
        }
        const zipFileDir = path.dirname(zipFileName);
        await fs_extra_1.default.mkdir(zipFileDir, { recursive: true });
        let jsonFileName = args.outputJsonPath;
        if (!path.isAbsolute(jsonFileName)) {
            jsonFileName = path.join(context.projectPath, jsonFileName);
        }
        const jsonFileDir = path.dirname(jsonFileName);
        await fs_extra_1.default.mkdir(jsonFileDir, { recursive: true });
        const appDirectory = path.dirname(manifestPath);
        const colorFile = path.join(appDirectory, manifest.icons.color);
        if (!(await fs_extra_1.default.pathExists(colorFile))) {
            const error = results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.FileNotFoundError.name, errors_1.AppStudioError.FileNotFoundError.message(colorFile), "https://aka.ms/teamsfx-actions/teamsapp-createAppPackage");
            return teamsfx_api_1.err(error);
        }
        const outlineFile = path.join(appDirectory, manifest.icons.outline);
        if (!(await fs_extra_1.default.pathExists(outlineFile))) {
            const error = results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.FileNotFoundError.name, errors_1.AppStudioError.FileNotFoundError.message(outlineFile), "https://aka.ms/teamsfx-actions/teamsapp-createAppPackage");
            return teamsfx_api_1.err(error);
        }
        const zip = new adm_zip_1.default();
        zip.addFile(constants_1.Constants.MANIFEST_FILE, Buffer.from(JSON.stringify(manifest, null, 4)));
        // outline.png & color.png, relative path
        let dir = path.dirname(manifest.icons.color);
        zip.addLocalFile(colorFile, dir === "." ? "" : dir);
        dir = path.dirname(manifest.icons.outline);
        zip.addLocalFile(outlineFile, dir === "." ? "" : dir);
        // localization file
        if (manifest.localizationInfo &&
            manifest.localizationInfo.additionalLanguages &&
            manifest.localizationInfo.additionalLanguages.length > 0) {
            await Promise.all(manifest.localizationInfo.additionalLanguages.map(async function (language) {
                const file = language.file;
                const fileName = `${appDirectory}/${file}`;
                if (!(await fs_extra_1.default.pathExists(fileName))) {
                    throw results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.FileNotFoundError.name, errors_1.AppStudioError.FileNotFoundError.message(fileName), "https://aka.ms/teamsfx-actions/teamsapp-createAppPackage");
                }
                const dir = path.dirname(file);
                zip.addLocalFile(fileName, dir === "." ? "" : dir);
            }));
        }
        zip.writeZip(zipFileName);
        if (await fs_extra_1.default.pathExists(jsonFileName)) {
            await fs_extra_1.default.chmod(jsonFileName, 0o777);
        }
        await fs_extra_1.default.writeFile(jsonFileName, JSON.stringify(manifest, null, 4));
        await fs_extra_1.default.chmod(jsonFileName, 0o444);
        if (context.platform === teamsfx_api_1.Platform.CLI || context.platform === teamsfx_api_1.Platform.VS) {
            const builtSuccess = [
                { content: "(âˆš)Done: ", color: teamsfx_api_1.Colors.BRIGHT_GREEN },
                { content: "Teams Package ", color: teamsfx_api_1.Colors.BRIGHT_WHITE },
                { content: zipFileName, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                { content: " built successfully!", color: teamsfx_api_1.Colors.BRIGHT_WHITE },
            ];
            if (context.platform === teamsfx_api_1.Platform.VS) {
                (_a = context.logProvider) === null || _a === void 0 ? void 0 : _a.info(builtSuccess);
            }
            else {
                (_b = context.ui) === null || _b === void 0 ? void 0 : _b.showMessage("info", builtSuccess, false);
            }
        }
        else if (context.platform === teamsfx_api_1.Platform.VSCode) {
            const isWindows = process.platform === "win32";
            let builtSuccess = localizeUtils_1.getLocalizedString("plugins.appstudio.buildSucceedNotice.fallback", zipFileName);
            if (isWindows) {
                const folderLink = url_1.pathToFileURL(path.dirname(zipFileName));
                const appPackageLink = `${constants_2.VSCodeExtensionCommand.openFolder}?%5B%22${folderLink}%22%5D`;
                builtSuccess = localizeUtils_1.getLocalizedString("plugins.appstudio.buildSucceedNotice", appPackageLink);
            }
            (_c = context.ui) === null || _c === void 0 ? void 0 : _c.showMessage("info", builtSuccess, false);
        }
        return teamsfx_api_1.ok(new Map());
    }
    loadCurrentState() {
        return {
            TAB_ENDPOINT: process.env.TAB_ENDPOINT,
            TAB_DOMAIN: process.env.TAB_DOMAIN,
            BOT_ID: process.env.BOT_ID,
            BOT_DOMAIN: process.env.BOT_DOMAIN,
            ENV_NAME: process.env.TEAMSFX_ENV,
        };
    }
    validateArgs(args) {
        const invalidParams = [];
        if (!args || !args.manifestPath) {
            invalidParams.push("manifestPath");
        }
        if (!args || !args.outputJsonPath) {
            invalidParams.push("outputJsonPath");
        }
        if (!args || !args.outputZipPath) {
            invalidParams.push("outputZipPath");
        }
        if (invalidParams.length > 0) {
            return teamsfx_api_1.err(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.InvalidParameterError.name, errors_1.AppStudioError.InvalidParameterError.message(exports.actionName, invalidParams), "https://aka.ms/teamsfx-actions/teamsapp-zipAppPackage"));
        }
        else {
            return teamsfx_api_1.ok(undefined);
        }
    }
};
tslib_1.__decorate([
    lib_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(exports.actionName, exports.actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, wrapUtil_1.WrapDriverContext]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateAppPackageDriver.prototype, "build", null);
CreateAppPackageDriver = tslib_1.__decorate([
    typedi_1.Service(exports.actionName)
], CreateAppPackageDriver);
exports.CreateAppPackageDriver = CreateAppPackageDriver;
//# sourceMappingURL=createAppPackage.js.map