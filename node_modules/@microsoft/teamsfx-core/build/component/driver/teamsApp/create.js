"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateTeamsAppDriver = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const uuid_1 = require("uuid");
const typedi_1 = require("typedi");
const lib_1 = require("@feathersjs/hooks/lib");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const wrapUtil_1 = require("../util/wrapUtil");
const appStudioClient_1 = require("../../resource/appManifest/appStudioClient");
const telemetry_1 = require("../../resource/appManifest/utils/telemetry");
const results_1 = require("../../resource/appManifest/results");
const errors_1 = require("../../resource/appManifest/errors");
const constants_1 = require("../../resource/appManifest/constants");
const tools_1 = require("../../../common/tools");
const localizeUtils_1 = require("../../../common/localizeUtils");
const folder_1 = require("../../../folder");
const actionName = "teamsApp/create";
const outputNames = {
    TEAMS_APP_ID: "TEAMS_APP_ID",
    TEAMS_APP_TENANT_ID: "TEAMS_APP_TENANT_ID",
};
let CreateTeamsAppDriver = class CreateTeamsAppDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.teamsApp.description.createDriver");
    }
    async run(args, context) {
        const wrapContext = new wrapUtil_1.WrapDriverContext(context, actionName, actionName);
        const res = await this.create(args, wrapContext);
        return res;
    }
    async execute(args, context) {
        const wrapContext = new wrapUtil_1.WrapDriverContext(context, actionName, actionName);
        const res = await this.create(args, wrapContext);
        return {
            result: res,
            summaries: wrapContext.summaries,
        };
    }
    async create(args, context) {
        var _a, _b;
        telemetry_1.TelemetryUtils.init(context);
        const result = this.validateArgs(args);
        if (result.isErr()) {
            return teamsfx_api_1.err(result.error);
        }
        let create = true;
        const appStudioTokenRes = await context.m365TokenProvider.getAccessToken({
            scopes: tools_1.AppStudioScopes,
        });
        if (appStudioTokenRes.isErr()) {
            return teamsfx_api_1.err(appStudioTokenRes.error);
        }
        const appStudioToken = appStudioTokenRes.value;
        const progressHandler = (_a = context.ui) === null || _a === void 0 ? void 0 : _a.createProgressBar(localizeUtils_1.getLocalizedString("driver.teamsApp.progressBar.createTeamsAppTitle"), 1);
        progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.start();
        let createdAppDefinition;
        const teamsAppId = process.env.TEAMS_APP_ID;
        if (teamsAppId) {
            try {
                createdAppDefinition = await appStudioClient_1.AppStudioClient.getApp(teamsAppId, appStudioToken, context.logProvider);
                create = false;
            }
            catch (error) { }
        }
        if (create) {
            const message = localizeUtils_1.getLocalizedString("driver.teamsApp.progressBar.createTeamsAppStepMessage");
            progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(message);
            context.addSummary(message);
            const manifest = new teamsfx_api_1.TeamsAppManifest();
            manifest.name.short = args.name;
            if (teamsAppId) {
                manifest.id = teamsAppId;
            }
            else {
                manifest.id = uuid_1.v4();
            }
            const zip = new adm_zip_1.default();
            zip.addFile(constants_1.Constants.MANIFEST_FILE, Buffer.from(JSON.stringify(manifest, null, 4)));
            const sourceTemplatesFolder = folder_1.getTemplatesFolder();
            const defaultColorPath = path.join(sourceTemplatesFolder, constants_1.COLOR_TEMPLATE);
            const defaultOutlinePath = path.join(sourceTemplatesFolder, constants_1.OUTLINE_TEMPLATE);
            const colorFile = await fs_extra_1.default.readFile(defaultColorPath);
            zip.addFile(constants_1.DEFAULT_COLOR_PNG_FILENAME, colorFile);
            const outlineFile = await fs_extra_1.default.readFile(defaultOutlinePath);
            zip.addFile(constants_1.DEFAULT_OUTLINE_PNG_FILENAME, outlineFile);
            const archivedFile = zip.toBuffer();
            try {
                createdAppDefinition = await appStudioClient_1.AppStudioClient.importApp(archivedFile, appStudioTokenRes.value, context.logProvider);
                const message = localizeUtils_1.getLocalizedString("plugins.appstudio.teamsAppCreatedNotice", createdAppDefinition.teamsAppId);
                context.logProvider.info(message);
                context.addSummary(message);
                if (context.platform === teamsfx_api_1.Platform.VSCode) {
                    (_b = context.ui) === null || _b === void 0 ? void 0 : _b.showMessage("info", message, false);
                }
                progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.end(true);
                return teamsfx_api_1.ok(new Map([
                    [outputNames.TEAMS_APP_ID, createdAppDefinition.teamsAppId],
                    [outputNames.TEAMS_APP_TENANT_ID, createdAppDefinition.tenantId],
                ]));
            }
            catch (e) {
                progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.end(false);
                if (e instanceof teamsfx_api_1.UserError || e instanceof teamsfx_api_1.SystemError) {
                    if (e instanceof teamsfx_api_1.UserError && !e.helpLink) {
                        e.helpLink = "https://aka.ms/teamsfx-actions/teamsapp-create";
                    }
                    return teamsfx_api_1.err(e);
                }
                else {
                    const error = results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppCreateFailedError.name, errors_1.AppStudioError.TeamsAppCreateFailedError.message(e), "https://aka.ms/teamsfx-actions/teamsapp-create");
                    return teamsfx_api_1.err(error);
                }
            }
        }
        else {
            context.addSummary(localizeUtils_1.getLocalizedString("driver.teamsApp.summary.createTeamsAppAlreadyExists", teamsAppId));
            progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.end(true);
            return teamsfx_api_1.ok(new Map([
                [outputNames.TEAMS_APP_ID, createdAppDefinition.teamsAppId],
                [outputNames.TEAMS_APP_TENANT_ID, createdAppDefinition.tenantId],
            ]));
        }
    }
    validateArgs(args) {
        const invalidParams = [];
        if (!args || !args.name) {
            invalidParams.push("name");
        }
        if (invalidParams.length > 0) {
            return teamsfx_api_1.err(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.InvalidParameterError.name, errors_1.AppStudioError.InvalidParameterError.message(actionName, invalidParams), "https://aka.ms/teamsfx-actions/teamsapp-create"));
        }
        else {
            return teamsfx_api_1.ok(undefined);
        }
    }
};
tslib_1.__decorate([
    lib_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, wrapUtil_1.WrapDriverContext]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateTeamsAppDriver.prototype, "create", null);
CreateTeamsAppDriver = tslib_1.__decorate([
    typedi_1.Service(actionName)
], CreateTeamsAppDriver);
exports.CreateTeamsAppDriver = CreateTeamsAppDriver;
//# sourceMappingURL=create.js.map