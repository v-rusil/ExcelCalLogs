"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateOrUpdateBotFrameworkBotDriver = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../common/localizeUtils");
const common_1 = require("../../utils/common");
const constants_1 = require("../aad/utility/constants");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const invalidParameterUserError_1 = require("./error/invalidParameterUserError");
const unhandledError_1 = require("./error/unhandledError");
const localBotRegistration_1 = require("../../resource/botService/botRegistration/localBotRegistration");
const IBotRegistration_1 = require("../../resource/botService/appStudio/interfaces/IBotRegistration");
const actionName = "botFramework/create";
const helpLink = "https://aka.ms/teamsfx-actions/botFramework-create";
const botUrl = "https://dev.botframework.com/bots?id=";
let CreateOrUpdateBotFrameworkBotDriver = class CreateOrUpdateBotFrameworkBotDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.botFramework.description");
    }
    async run(args, context) {
        return common_1.wrapRun(async () => {
            const result = await this.handler(args, context);
            return result.output;
        });
    }
    async execute(args, ctx) {
        let summaries = [];
        const outputResult = await common_1.wrapRun(async () => {
            const result = await this.handler(args, ctx);
            summaries = result.summaries;
            return result.output;
        });
        return {
            result: outputResult,
            summaries,
        };
    }
    async handler(args, context) {
        var _a, _b, _c, _d, _e;
        const progressHandler = (_a = context.ui) === null || _a === void 0 ? void 0 : _a.createProgressBar(localizeUtils_1.getLocalizedString("driver.botFramework.progressBar.title"), 1);
        try {
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.start());
            this.validateArgs(args);
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(localizeUtils_1.getLocalizedString("driver.botFramework.progressBar.createOrUpdateBot")));
            let callingEndpoint = undefined;
            let configuredChannels = undefined;
            if (args.channels) {
                configuredChannels = [];
                for (const channel of args.channels) {
                    if (channel.name === IBotRegistration_1.BotChannelType.MicrosoftTeams) {
                        callingEndpoint = channel.callingWebhook;
                        configuredChannels.push(IBotRegistration_1.BotChannelType.MicrosoftTeams);
                    }
                    else if (channel.name === IBotRegistration_1.BotChannelType.Outlook) {
                        configuredChannels.push(IBotRegistration_1.BotChannelType.Outlook);
                    }
                }
            }
            const botRegistrationData = {
                botId: args.botId,
                name: args.name,
                description: (_b = args.description) !== null && _b !== void 0 ? _b : "",
                iconUrl: (_c = args.iconUrl) !== null && _c !== void 0 ? _c : "",
                messagingEndpoint: args.messagingEndpoint,
                callingEndpoint: callingEndpoint !== null && callingEndpoint !== void 0 ? callingEndpoint : "",
                configuredChannels,
            };
            const botRegistration = new localBotRegistration_1.LocalBotRegistration();
            const result = await botRegistration.createOrUpdateBotRegistration(context.m365TokenProvider, botRegistrationData);
            if (result.isErr()) {
                throw result.error;
            }
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.end(true));
            return {
                output: new Map(),
                summaries: [
                    result.value
                        ? localizeUtils_1.getLocalizedString("driver.botFramework.summary.update", `${botUrl}${args.botId}`)
                        : localizeUtils_1.getLocalizedString("driver.botFramework.summary.create", `${botUrl}${args.botId}`),
                ],
            };
        }
        catch (error) {
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.end(false));
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, error.displayMessage));
                throw error;
            }
            const message = JSON.stringify(error);
            (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, message));
            throw new unhandledError_1.UnhandledSystemError(actionName, message);
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (!args.botId || typeof args.botId !== "string") {
            invalidParameters.push("botId");
        }
        if (!args.name || typeof args.name !== "string") {
            invalidParameters.push("name");
        }
        if (!args.messagingEndpoint || typeof args.messagingEndpoint !== "string") {
            invalidParameters.push("messagingEndpoint");
        }
        if (args.description && typeof args.description !== "string") {
            invalidParameters.push("description");
        }
        if (args.iconUrl && typeof args.iconUrl !== "string") {
            invalidParameters.push("iconUrl");
        }
        if (args.channels) {
            if (!Array.isArray(args.channels)) {
                invalidParameters.push("channels");
            }
            else {
                for (const channel of args.channels) {
                    if (!channel.name ||
                        typeof channel.name !== "string" ||
                        (channel.name !== IBotRegistration_1.BotChannelType.MicrosoftTeams &&
                            channel.name !== IBotRegistration_1.BotChannelType.Outlook)) {
                        invalidParameters.push("channels");
                        break;
                    }
                    if (channel.name === IBotRegistration_1.BotChannelType.MicrosoftTeams) {
                        const callingWebhook = channel.callingWebhook;
                        if (callingWebhook && typeof callingWebhook !== "string") {
                            invalidParameters.push("channels");
                            break;
                        }
                    }
                }
            }
        }
        if (invalidParameters.length > 0) {
            throw new invalidParameterUserError_1.InvalidParameterUserError(actionName, invalidParameters, helpLink);
        }
    }
};
tslib_1.__decorate([
    lib_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateOrUpdateBotFrameworkBotDriver.prototype, "run", null);
CreateOrUpdateBotFrameworkBotDriver = tslib_1.__decorate([
    typedi_1.Service(actionName) // DO NOT MODIFY the service name
], CreateOrUpdateBotFrameworkBotDriver);
exports.CreateOrUpdateBotFrameworkBotDriver = CreateOrUpdateBotFrameworkBotDriver;
//# sourceMappingURL=createOrUpdateBot.js.map