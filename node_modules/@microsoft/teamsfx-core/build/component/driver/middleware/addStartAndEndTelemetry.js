"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.addStartAndEndTelemetry = void 0;
const teamsFxTelemetryReporter_1 = require("../../utils/teamsFxTelemetryReporter");
// Based on fx-core's design that a component should always return FxError instead of throw exception, no error handling is added
function addStartAndEndTelemetry(eventName, componentName) {
    return async (ctx, next) => {
        const driverContext = ctx.arguments[1];
        let telemetryReporter = undefined;
        if (driverContext.telemetryReporter) {
            telemetryReporter = new teamsFxTelemetryReporter_1.TeamsFxTelemetryReporter(driverContext.telemetryReporter, {
                componentName,
            });
        }
        telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendStartEvent({ eventName });
        await next();
        let result;
        // support run and execution interface at the same time, can remove after we retire the run interface
        if (isExecutionResult(ctx.result)) {
            result = ctx.result.result;
        }
        else {
            result = ctx.result;
        }
        if (result.isOk()) {
            telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendEndEvent({ eventName });
        }
        else {
            telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendEndEvent({ eventName }, result.error);
        }
    };
}
exports.addStartAndEndTelemetry = addStartAndEndTelemetry;
function isExecutionResult(result) {
    return result.result !== undefined;
}
//# sourceMappingURL=addStartAndEndTelemetry.js.map