"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateAadAppDriver = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const aadAppClient_1 = require("./utility/aadAppClient");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const tools_1 = require("../../../common/tools");
const constants_1 = require("../../resource/aadApp/constants");
const invalidParameterUserError_1 = require("./error/invalidParameterUserError");
const missingEnvError_1 = require("./error/missingEnvError");
const unhandledError_1 = require("./error/unhandledError");
const axios_1 = tslib_1.__importDefault(require("axios"));
const lib_1 = require("@feathersjs/hooks/lib");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const localizeUtils_1 = require("../../../common/localizeUtils");
const constants_2 = require("./utility/constants");
const actionName = "aadApp/create"; // DO NOT MODIFY the name
const helpLink = "https://aka.ms/teamsfx-actions/aadapp-create";
const driverConstants = {
    generateSecretErrorMessageKey: "driver.aadApp.error.generateSecretFailed",
};
const SECRET_AAD_APP_CLIENT_SECRET = "SECRET_AAD_APP_CLIENT_SECRET";
const AAD_APP_CLIENT_ID = "AAD_APP_CLIENT_ID";
let CreateAadAppDriver = class CreateAadAppDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString(constants_2.descriptionMessageKeys.create);
    }
    async run(args, context) {
        const result = await this.execute(args, context);
        return result.result;
    }
    async execute(args, context) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const progressBarSettings = this.getProgressBarSetting();
        const progressHandler = (_a = context.ui) === null || _a === void 0 ? void 0 : _a.createProgressBar(progressBarSettings.title, progressBarSettings.stepMessages.length);
        const summaries = [];
        try {
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.start());
            (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.info(localizeUtils_1.getLocalizedString(constants_2.logMessageKeys.startExecuteDriver, actionName));
            this.validateArgs(args);
            const aadAppClient = new aadAppClient_1.AadAppClient(context.m365TokenProvider);
            const aadAppState = this.loadCurrentState();
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progressBarSettings.stepMessages.shift()));
            if (!aadAppState.AAD_APP_CLIENT_ID) {
                (_c = context.logProvider) === null || _c === void 0 ? void 0 : _c.info(localizeUtils_1.getLocalizedString(constants_2.logMessageKeys.startCreateAadApp, AAD_APP_CLIENT_ID));
                // Create new AAD app if no client id exists
                const aadApp = await aadAppClient.createAadApp(args.name);
                aadAppState.AAD_APP_CLIENT_ID = aadApp.appId;
                aadAppState.AAD_APP_OBJECT_ID = aadApp.id;
                await this.setAadEndpointInfo(context.m365TokenProvider, aadAppState);
                const summary = localizeUtils_1.getLocalizedString(constants_2.logMessageKeys.successCreateAadApp, aadApp.id);
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.info(summary);
                summaries.push(summary);
            }
            else {
                (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.info(localizeUtils_1.getLocalizedString(constants_2.logMessageKeys.skipCreateAadApp, AAD_APP_CLIENT_ID));
            }
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progressBarSettings.stepMessages.shift()));
            if (args.generateClientSecret) {
                if (!aadAppState.SECRET_AAD_APP_CLIENT_SECRET) {
                    (_f = context.logProvider) === null || _f === void 0 ? void 0 : _f.info(localizeUtils_1.getLocalizedString(constants_2.logMessageKeys.startGenerateClientSecret, SECRET_AAD_APP_CLIENT_SECRET));
                    // Create new client secret if no client secret exists
                    if (!aadAppState.AAD_APP_OBJECT_ID) {
                        throw new missingEnvError_1.MissingEnvUserError(actionName, "AAD_APP_OBJECT_ID", helpLink, driverConstants.generateSecretErrorMessageKey);
                    }
                    aadAppState.SECRET_AAD_APP_CLIENT_SECRET = await aadAppClient.generateClientSecret(aadAppState.AAD_APP_OBJECT_ID);
                    const summary = localizeUtils_1.getLocalizedString(constants_2.logMessageKeys.successGenerateClientSecret, aadAppState.AAD_APP_OBJECT_ID);
                    (_g = context.logProvider) === null || _g === void 0 ? void 0 : _g.info(summary);
                    summaries.push(summary);
                }
                else {
                    (_h = context.logProvider) === null || _h === void 0 ? void 0 : _h.info(localizeUtils_1.getLocalizedString(constants_2.logMessageKeys.skipCreateAadApp, SECRET_AAD_APP_CLIENT_SECRET));
                }
            }
            (_j = context.logProvider) === null || _j === void 0 ? void 0 : _j.info(localizeUtils_1.getLocalizedString(constants_2.logMessageKeys.successExecuteDriver, actionName));
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.end(true));
            return {
                result: teamsfx_api_1.ok(new Map(Object.entries(aadAppState) // convert each property to Map item
                    .filter((item) => item[1] && item[1] !== "") // do not return Map item that is empty
                )),
                summaries: summaries,
            };
        }
        catch (error) {
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.end(false));
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_k = context.logProvider) === null || _k === void 0 ? void 0 : _k.error(localizeUtils_1.getLocalizedString(constants_2.logMessageKeys.failExecuteDriver, actionName, error.displayMessage));
                return {
                    result: teamsfx_api_1.err(error),
                    summaries: summaries,
                };
            }
            if (axios_1.default.isAxiosError(error)) {
                const message = JSON.stringify(error.response.data);
                (_l = context.logProvider) === null || _l === void 0 ? void 0 : _l.error(localizeUtils_1.getLocalizedString(constants_2.logMessageKeys.failExecuteDriver, actionName, message));
                if (error.response.status >= 400 && error.response.status < 500) {
                    return {
                        result: teamsfx_api_1.err(new unhandledError_1.UnhandledUserError(actionName, message, helpLink)),
                        summaries: summaries,
                    };
                }
                else {
                    return {
                        result: teamsfx_api_1.err(new unhandledError_1.UnhandledSystemError(actionName, message)),
                        summaries: summaries,
                    };
                }
            }
            const message = JSON.stringify(error);
            (_m = context.logProvider) === null || _m === void 0 ? void 0 : _m.error(localizeUtils_1.getLocalizedString(constants_2.logMessageKeys.failExecuteDriver, actionName, message));
            return {
                result: teamsfx_api_1.err(new unhandledError_1.UnhandledSystemError(actionName, JSON.stringify(error))),
                summaries: summaries,
            };
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (typeof args.name !== "string" || !args.name) {
            invalidParameters.push("name");
        }
        if (args.generateClientSecret === undefined || typeof args.generateClientSecret !== "boolean") {
            invalidParameters.push("generateClientSecret");
        }
        if (invalidParameters.length > 0) {
            throw new invalidParameterUserError_1.InvalidParameterUserError(actionName, invalidParameters, helpLink);
        }
    }
    loadCurrentState() {
        return {
            AAD_APP_CLIENT_ID: process.env.AAD_APP_CLIENT_ID,
            SECRET_AAD_APP_CLIENT_SECRET: process.env.SECRET_AAD_APP_CLIENT_SECRET,
            AAD_APP_OBJECT_ID: process.env.AAD_APP_OBJECT_ID,
            AAD_APP_TENANT_ID: process.env.AAD_APP_TENANT_ID,
            AAD_APP_OAUTH_AUTHORITY: process.env.AAD_APP_OAUTH_AUTHORITY,
            AAD_APP_OAUTH_AUTHORITY_HOST: process.env.AAD_APP_OAUTH_AUTHORITY_HOST,
        };
    }
    // logic from
    // src\component\resource\aadApp\utils\tokenProvider.ts
    // src\component\resource\aadApp\utils\configs.ts
    async setAadEndpointInfo(tokenProvider, state) {
        const tokenObjectResponse = await tokenProvider.getJsonObject({ scopes: tools_1.GraphScopes });
        if (tokenObjectResponse.isErr()) {
            throw tokenObjectResponse.error;
        }
        const tenantId = tokenObjectResponse.value.tid; // The tid claim is AAD tenant id
        state.AAD_APP_TENANT_ID = tenantId;
        state.AAD_APP_OAUTH_AUTHORITY_HOST = constants_1.Constants.oauthAuthorityPrefix;
        state.AAD_APP_OAUTH_AUTHORITY = `${constants_1.Constants.oauthAuthorityPrefix}/${tenantId}`;
    }
    getProgressBarSetting() {
        return {
            title: localizeUtils_1.getLocalizedString("driver.aadApp.progressBar.createAadAppTitle"),
            stepMessages: [
                localizeUtils_1.getLocalizedString("driver.aadApp.progressBar.createAadAppStepMessage"),
                localizeUtils_1.getLocalizedString("driver.aadApp.progressBar.generateClientSecretSetpMessage"), // step 2
            ],
        };
    }
};
tslib_1.__decorate([
    lib_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CreateAadAppDriver.prototype, "execute", null);
CreateAadAppDriver = tslib_1.__decorate([
    typedi_1.Service(actionName) // DO NOT MODIFY the service name
], CreateAadAppDriver);
exports.CreateAadAppDriver = CreateAadAppDriver;
//# sourceMappingURL=create.js.map