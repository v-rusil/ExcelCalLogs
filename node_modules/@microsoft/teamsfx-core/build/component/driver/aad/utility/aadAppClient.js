"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadAppClient = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const aadManifestHelper_1 = require("../../../resource/aadApp/utils/aadManifestHelper");
const tools_1 = require("../../../../common/tools");
const constants_1 = require("../../../resource/aadApp/constants");
const axios_retry_1 = tslib_1.__importDefault(require("axios-retry"));
// Another implementation of src\component\resource\aadApp\graph.ts to reduce call stacks
// It's our internal utility so make sure pass valid parameters to it instead of relying on it to handle parameter errors
class AadAppClient {
    constructor(m365TokenProvider) {
        this.retryNumber = 5;
        this.tokenProvider = m365TokenProvider;
        // Create axios instance which sets authorization header automatically before each MS Graph request
        this.axios = axios_1.default.create({
            baseURL: "https://graph.microsoft.com/v1.0",
        });
        this.axios.interceptors.request.use(async (config) => {
            const tokenResponse = await this.tokenProvider.getAccessToken({ scopes: tools_1.GraphScopes });
            if (tokenResponse.isErr()) {
                throw tokenResponse.error;
            }
            const token = tokenResponse.value;
            if (!config.headers) {
                config.headers = {};
            }
            config.headers["Authorization"] = `Bearer ${token}`;
            return config;
        });
        // Add retry logic. Retry post request may result in creating additional resources but should be fine in AAD driver.
        axios_retry_1.default(this.axios, {
            retries: this.retryNumber,
            retryDelay: axios_retry_1.default.exponentialDelay,
            retryCondition: (error) => axios_retry_1.default.isNetworkError(error) || axios_retry_1.default.isRetryableError(error), // retry when there's network error or 5xx error
        });
    }
    async createAadApp(displayName) {
        const requestBody = {
            displayName: displayName,
            signInAudience: "AzureADMyOrg", // Create single tenant by default, can be changed using manifest with aadApp/update action
        }; // Create an AAD app without setting anything
        const response = await this.axios.post("applications", requestBody);
        return response.data;
    }
    async generateClientSecret(objectId) {
        const requestBody = {
            passwordCredential: {
                displayName: constants_1.Constants.aadAppPasswordDisplayName,
            },
        };
        const response = await this.axios.post(`applications/${objectId}/addPassword`, requestBody, {
            "axios-retry": {
                retries: this.retryNumber,
                retryDelay: axios_retry_1.default.exponentialDelay,
                retryCondition: (error) => axios_retry_1.default.isNetworkError(error) ||
                    axios_retry_1.default.isRetryableError(error) ||
                    this.is404Error(error), // also retry 404 error since AAD need sometime to sync created AAD app data
            },
        });
        return response.data.secretText;
    }
    async updateAadApp(manifest) {
        const objectId = manifest.id; // You need to ensure the object id exists in manifest
        const requestBody = aadManifestHelper_1.AadManifestHelper.manifestToApplication(manifest);
        await this.axios.patch(`applications/${objectId}`, requestBody, {
            "axios-retry": {
                retries: this.retryNumber,
                retryDelay: axios_retry_1.default.exponentialDelay,
                retryCondition: (error) => axios_retry_1.default.isNetworkError(error) ||
                    axios_retry_1.default.isRetryableError(error) ||
                    this.is404Error(error) || // also retry 404 error since AAD need sometime to sync created AAD app data
                    this.is400Error(error), // sometimes AAD will complain OAuth permission not found if we pre-authorize a newly created permission
            },
        });
    }
    // only use it to retry 404 errors for create client secret / update AAD app requests right after AAD app creation
    is404Error(error) {
        return error.code !== "ECONNABORTED" && (!error.response || error.response.status === 404);
    }
    is400Error(error) {
        return error.code !== "ECONNABORTED" && (!error.response || error.response.status === 400);
    }
}
exports.AadAppClient = AadAppClient;
//# sourceMappingURL=aadAppClient.js.map