"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.M365TitleAcquireDriver = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const typedi_1 = require("typedi");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../common/localizeUtils");
const packageService_1 = require("../../../common/m365/packageService");
const serviceConstant_1 = require("../../../common/m365/serviceConstant");
const common_1 = require("../../utils/common");
const constants_1 = require("../aad/utility/constants");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const invalidParameterUserError_1 = require("./error/invalidParameterUserError");
const unhandledError_1 = require("./error/unhandledError");
const FileNotFoundUserError_1 = require("./error/FileNotFoundUserError");
const actionName = "m365Title/acquire";
const helpLink = "https://aka.ms/teamsfx-actions/m365-title-acquire";
let M365TitleAcquireDriver = class M365TitleAcquireDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.m365.acquire.description");
    }
    async run(args, context) {
        return common_1.wrapRun(async () => {
            const result = await this.handler(args, context);
            return result.output;
        });
    }
    async execute(args, ctx) {
        let summaries = [];
        const outputResult = await common_1.wrapRun(async () => {
            const result = await this.handler(args, ctx);
            summaries = result.summaries;
            return result.output;
        });
        return {
            result: outputResult,
            summaries,
        };
    }
    async handler(args, context) {
        var _a, _b, _c, _d, _e;
        const progressHandler = (_a = context.ui) === null || _a === void 0 ? void 0 : _a.createProgressBar(localizeUtils_1.getLocalizedString("driver.m365.acquire.progress.title"), 1);
        try {
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.start());
            this.validateArgs(args);
            const appPackagePath = common_1.getAbsolutePath(args.appPackagePath, context.projectPath);
            if (!(await fs.pathExists(appPackagePath))) {
                throw new FileNotFoundUserError_1.FileNotFoundUserError(actionName, appPackagePath, helpLink);
            }
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(localizeUtils_1.getLocalizedString("driver.m365.acquire.progress.message")));
            // get sideloading service settings
            const sideloadingServiceEndpoint = (_b = process.env.SIDELOADING_SERVICE_ENDPOINT) !== null && _b !== void 0 ? _b : serviceConstant_1.serviceEndpoint;
            const sideloadingServiceScope = (_c = process.env.SIDELOADING_SERVICE_SCOPE) !== null && _c !== void 0 ? _c : serviceConstant_1.serviceScope;
            const packageService = new packageService_1.PackageService(sideloadingServiceEndpoint);
            const sideloadingTokenRes = await context.m365TokenProvider.getAccessToken({
                scopes: [sideloadingServiceScope],
            });
            if (sideloadingTokenRes.isErr()) {
                throw sideloadingTokenRes.error;
            }
            const sideloadingToken = sideloadingTokenRes.value;
            const titleId = await packageService.sideLoading(sideloadingToken, appPackagePath);
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.end(true));
            return {
                output: new Map([["M365_TITLE_ID", titleId]]),
                summaries: [localizeUtils_1.getLocalizedString("driver.m365.acquire.summary", titleId)],
            };
        }
        catch (error) {
            await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.end(false));
            if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
                (_d = context.logProvider) === null || _d === void 0 ? void 0 : _d.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, error.displayMessage));
                throw error;
            }
            const message = JSON.stringify(error);
            (_e = context.logProvider) === null || _e === void 0 ? void 0 : _e.error(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failExecuteDriver, actionName, message));
            throw new unhandledError_1.UnhandledSystemError(actionName, message);
        }
    }
    validateArgs(args) {
        const invalidParameters = [];
        if (!args.appPackagePath || typeof args.appPackagePath !== "string") {
            invalidParameters.push("appPackagePath");
        }
        if (invalidParameters.length > 0) {
            throw new invalidParameterUserError_1.InvalidParameterUserError(actionName, invalidParameters, helpLink);
        }
    }
};
tslib_1.__decorate([
    lib_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(actionName, actionName)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], M365TitleAcquireDriver.prototype, "run", null);
M365TitleAcquireDriver = tslib_1.__decorate([
    typedi_1.Service(actionName) // DO NOT MODIFY the service name
], M365TitleAcquireDriver);
exports.M365TitleAcquireDriver = M365TitleAcquireDriver;
//# sourceMappingURL=acquire.js.map