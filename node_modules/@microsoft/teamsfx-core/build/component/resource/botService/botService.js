"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotService = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const tools_1 = require("../../../common/tools");
const constants_1 = require("../../constants");
const workflow_1 = require("../../workflow");
const azureResource_1 = require("../azureResource");
const messages_1 = require("../../messages");
const lib_1 = require("@feathersjs/hooks/lib");
const actionExecutionMW_1 = require("../../middleware/actionExecutionMW");
const errors_1 = require("./errors");
const error_1 = require("../../error");
const uuid = tslib_1.__importStar(require("uuid"));
const resourceNameFactory_1 = require("./resourceNameFactory");
const constants_2 = require("./constants");
const strings_1 = require("./strings");
const factory_1 = require("./botRegistration/factory");
const utils_1 = require("../../utils");
const errorSource = "BotService";
function _checkThrowSomethingMissing(key, value) {
    return error_1.CheckThrowSomethingMissing(errorSource, key, value);
}
let BotService = class BotService extends azureResource_1.AzureResource {
    constructor() {
        super(...arguments);
        this.outputs = constants_1.BotServiceOutputs;
        this.finalOutputKeys = ["botId", "botPassword"];
        this.secretFields = ["botPassword"];
        this.name = "bot-service";
        this.bicepModuleName = "botService";
    }
    async generateBicep(context, inputs) {
        var _a;
        try {
            const resource = typedi_1.Container.get(inputs.hosting);
            this.templateContext.endpointVarName = tools_1.compileHandlebarsTemplateString((_a = resource.outputs.endpointAsParam.bicepVariable) !== null && _a !== void 0 ? _a : "", inputs);
        }
        catch (_b) { }
        // Bot service's component must be Bot, omit it.
        inputs.scenario = "";
        return super.generateBicep(context, inputs);
    }
    async provision(context, inputs, actionContext) {
        var _a, _b, _c, _d, _e;
        var _f, _g;
        // create bot aad app by API call
        await ((_a = actionContext === null || actionContext === void 0 ? void 0 : actionContext.progressBar) === null || _a === void 0 ? void 0 : _a.next(messages_1.ProgressMessages.provisionBot));
        // init bot state
        (_f = context.envInfo.state)[_g = constants_1.ComponentNames.TeamsBot] || (_f[_g] = {});
        const teamsBotState = context.envInfo.state[constants_1.ComponentNames.TeamsBot];
        const hasBotIdInEnvBefore = !!teamsBotState && !!teamsBotState.botId;
        const botRegistration = factory_1.BotRegistrationFactory.create(context.envInfo.envName === "local" ? factory_1.BotRegistrationKind.Local : factory_1.BotRegistrationKind.Remote);
        const solutionConfig = context.envInfo.state.solution;
        const resourceNameSuffix = solutionConfig.resourceNameSuffix
            ? solutionConfig.resourceNameSuffix
            : uuid.v4();
        _checkThrowSomethingMissing(strings_1.CommonStrings.SHORT_APP_NAME, context.projectSetting.appName);
        const aadDisplayName = resourceNameFactory_1.ResourceNameFactory.createCommonName(resourceNameSuffix, context.projectSetting.appName, constants_2.MaxLengths.AAD_DISPLAY_NAME);
        const botName = utils_1.normalizeName(context.projectSetting.appName) + strings_1.PluginLocalDebug.LOCAL_DEBUG_SUFFIX;
        const botConfig = ((_b = context.envInfo.config.bot) === null || _b === void 0 ? void 0 : _b.appId) && ((_c = context.envInfo.config.bot) === null || _c === void 0 ? void 0 : _c.appPassword)
            ? {
                botId: (_d = context.envInfo.config.bot) === null || _d === void 0 ? void 0 : _d.appId,
                botPassword: (_e = context.envInfo.config.bot) === null || _e === void 0 ? void 0 : _e.appPassword,
            }
            : {
                botId: teamsBotState.botId,
                botPassword: teamsBotState.botPassword,
            };
        try {
            const regRes = await botRegistration.createBotRegistration(context.tokenProvider.m365TokenProvider, aadDisplayName, botName, botConfig, context.logProvider);
            if (regRes.isErr())
                return teamsfx_api_1.err(regRes.error);
            // Update states for bot aad configs.
            teamsBotState.botId = regRes.value.botId;
            teamsBotState.botPassword = regRes.value.botPassword;
            return teamsfx_api_1.ok(undefined);
        }
        catch (e) {
            if (e.name == constants_2.ErrorNames.CREATE_BOT_REGISTRATION_API_ERROR && hasBotIdInEnvBefore) {
                throw errors_1.AlreadyCreatedBotNotExist(botConfig.botId, e.innerError);
            }
            else {
                throw e;
            }
        }
    }
    async configure(context) {
        // create bot aad app by API call
        const teamsBot = workflow_1.getComponent(context.projectSetting, constants_1.ComponentNames.TeamsBot);
        if (!teamsBot)
            return teamsfx_api_1.ok(undefined);
        const botRegistration = factory_1.BotRegistrationFactory.create(context.envInfo.envName === "local" ? factory_1.BotRegistrationKind.Local : factory_1.BotRegistrationKind.Remote);
        const teamsBotState = context.envInfo.state[constants_1.ComponentNames.TeamsBot];
        const updateRes = await botRegistration.updateMessageEndpoint(context.tokenProvider.m365TokenProvider, teamsBotState.botId, `${teamsBotState.siteEndpoint}${strings_1.CommonStrings.MESSAGE_ENDPOINT_SUFFIX}`);
        if (updateRes.isErr())
            return teamsfx_api_1.err(updateRes.error);
        return teamsfx_api_1.ok(undefined);
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            enableProgressBar: true,
            progressTitle: messages_1.ProgressTitles.provisionBot,
            progressSteps: 1,
            errorSource: errorSource,
            errorHandler: (e) => {
                const res = errors_1.wrapError(e);
                return res.isErr() ? res.error : e;
            },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], BotService.prototype, "provision", null);
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            errorSource: errorSource,
            errorHandler: (e) => {
                const res = errors_1.wrapError(e);
                return res.isErr() ? res.error : e;
            },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], BotService.prototype, "configure", null);
BotService = tslib_1.__decorate([
    typedi_1.Service("bot-service")
], BotService);
exports.BotService = BotService;
//# sourceMappingURL=botService.js.map