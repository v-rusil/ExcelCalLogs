"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStudioClient = void 0;
const tslib_1 = require("tslib");
const IBotRegistration_1 = require("./interfaces/IBotRegistration");
const axios_1 = tslib_1.__importDefault(require("axios"));
const errors_1 = require("../errors");
const strings_1 = require("../strings");
const retryHandler_1 = require("../retryHandler");
const messages_1 = require("../messages");
const constants_1 = require("../../appManifest/constants");
const error_1 = require("../../../error");
const result_1 = require("../result");
class AppStudioClient {
    static newAxiosInstance(accessToken) {
        accessToken = error_1.CheckThrowSomethingMissing(result_1.FxBotPluginResultFactory.source, strings_1.ConfigNames.APPSTUDIO_TOKEN, accessToken);
        const instance = axios_1.default.create({
            headers: {
                post: {
                    Authorization: `Bearer ${accessToken}`,
                    "Client-Source": "teamstoolkit",
                },
                get: {
                    Authorization: `Bearer ${accessToken}`,
                    "Client-Source": "teamstoolkit",
                },
            },
        });
        instance.interceptors.request.use(function (config) {
            config.params = Object.assign({ teamstoolkit: true }, config.params);
            return config;
        });
        return instance;
    }
    /**
     * Set user region
     * @param _region e.g. https://dev.teams.microsoft.com/amer
     */
    static setRegion(region) {
        AppStudioClient.baseUrl = region;
    }
    static async getBotRegistration(token, botId) {
        const axiosInstance = AppStudioClient.newAxiosInstance(token);
        const getBotRegistrationResponse = await retryHandler_1.RetryHandler.Retry(async () => {
            var _a;
            try {
                return await axiosInstance.get(`${AppStudioClient.baseUrl}/api/botframework/${botId}`);
            }
            catch (e) {
                if (((_a = e.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {
                    return e.response;
                }
                else {
                    e.teamsfxUrlName = "<get-bot-registration>";
                    throw e;
                }
            }
        }, true);
        if ((getBotRegistrationResponse === null || getBotRegistrationResponse === void 0 ? void 0 : getBotRegistrationResponse.status) === 200) {
            return getBotRegistrationResponse.data;
        }
        else {
            return undefined;
        }
    }
    static async createBotRegistration(token, registration, context) {
        var _a;
        const axiosInstance = AppStudioClient.newAxiosInstance(token);
        let create = false;
        let response = undefined;
        try {
            if (registration.botId) {
                const botReg = await AppStudioClient.getBotRegistration(token, registration.botId);
                if (botReg) {
                    (_a = context === null || context === void 0 ? void 0 : context.logProvider) === null || _a === void 0 ? void 0 : _a.info(messages_1.Messages.BotResourceExist("Appstudio"));
                    return;
                }
            }
            create = true;
            response = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${AppStudioClient.baseUrl}/api/botframework`, registration));
        }
        catch (e) {
            e.teamsfxUrlName = "<create-bot-registration>";
            if (create) {
                // Handle exception when creating bot failed.
                throw new errors_1.FailedToCreateBotRegistrationError(e.innerError);
            }
            throw new errors_1.ProvisionError(strings_1.CommonStrings.APP_STUDIO_BOT_REGISTRATION, e);
        }
        if (!response || !response.data) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.APP_STUDIO_BOT_REGISTRATION);
        }
        return;
    }
    static async updateMessageEndpoint(token, botId, endpoint) {
        const botReg = await AppStudioClient.getBotRegistration(token, botId);
        if (!botReg) {
            throw new errors_1.BotRegistrationNotFoundError(botId);
        }
        botReg.messagingEndpoint = endpoint;
        if (botReg.configuredChannels === undefined || botReg.configuredChannels.length === 0) {
            botReg.configuredChannels = [IBotRegistration_1.BotChannelType.MicrosoftTeams];
        }
        await AppStudioClient.updateBotRegistration(token, botReg);
        return;
    }
    static async updateBotRegistration(token, botReg) {
        const axiosInstance = AppStudioClient.newAxiosInstance(token);
        let response = undefined;
        try {
            response = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${AppStudioClient.baseUrl}/api/botframework/${botReg.botId}`, botReg));
        }
        catch (e) {
            e.teamsfxUrlName = "<update-message-endpoint>";
            throw new errors_1.MessageEndpointUpdatingError(botReg.messagingEndpoint, e);
        }
        if (!response || !response.data) {
            throw new errors_1.ConfigUpdatingError(strings_1.ConfigNames.MESSAGE_ENDPOINT);
        }
        return;
    }
}
exports.AppStudioClient = AppStudioClient;
AppStudioClient.baseUrl = constants_1.getAppStudioEndpoint();
//# sourceMappingURL=appStudioClient.js.map