"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalBotRegistration = void 0;
const IBotRegistration_1 = require("../appStudio/interfaces/IBotRegistration");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const tools_1 = require("../../../../common/tools");
const appStudioClient_1 = require("../appStudio/appStudioClient");
const botRegistration_1 = require("./botRegistration");
const messages_1 = require("../messages");
const utils_1 = require("./utils");
class LocalBotRegistration extends botRegistration_1.BotRegistration {
    async createBotRegistration(m365TokenProvider, aadDisplayName, botName, botConfig, logProvider, botAuthType = botRegistration_1.BotAuthType.AADApp) {
        const botAadRes = await super.createBotAadApp(m365TokenProvider, aadDisplayName, botConfig, logProvider, botAuthType);
        if (botAadRes.isErr()) {
            return teamsfx_api_1.err(botAadRes.error);
        }
        const botAadCredentials = botAadRes.value;
        logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(messages_1.Messages.ProvisioningBotRegistration);
        const appStudioTokenRes = await m365TokenProvider.getAccessToken({
            scopes: tools_1.AppStudioScopes,
        });
        if (appStudioTokenRes.isErr()) {
            return teamsfx_api_1.err(appStudioTokenRes.error);
        }
        const appStudioToken = appStudioTokenRes.value;
        // Register a new bot registration.
        const initialBotReg = {
            botId: botAadCredentials.botId,
            name: botName,
            description: "",
            iconUrl: "",
            messagingEndpoint: "",
            callingEndpoint: "",
            configuredChannels: [IBotRegistration_1.BotChannelType.MicrosoftTeams],
        };
        await appStudioClient_1.AppStudioClient.createBotRegistration(appStudioToken, initialBotReg);
        logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(messages_1.Messages.SuccessfullyProvisionedBotRegistration);
        return teamsfx_api_1.ok(botAadCredentials);
    }
    async createOrUpdateBotRegistration(m365TokenProvider, botRegistration) {
        // 1. Get bot registration from remote.
        // 2. If Not Found, Then create a new bot registration.
        // 3. Else:
        //      3.1 Merge bot registration (remote + passed-in, respect passed-in).
        //      3.2 Update bot registration.
        const appStudioTokenRes = await m365TokenProvider.getAccessToken({
            scopes: tools_1.AppStudioScopes,
        });
        if (appStudioTokenRes.isErr()) {
            return teamsfx_api_1.err(appStudioTokenRes.error);
        }
        const appStudioToken = appStudioTokenRes.value;
        const remoteBotRegistration = await appStudioClient_1.AppStudioClient.getBotRegistration(appStudioToken, botRegistration.botId);
        if (!remoteBotRegistration) {
            // Not Found case.
            await appStudioClient_1.AppStudioClient.createBotRegistration(appStudioToken, botRegistration);
        }
        else {
            // Update bot registration.
            const mergedBotRegistration = utils_1.Utils.mergeIBotRegistration(botRegistration, remoteBotRegistration);
            await appStudioClient_1.AppStudioClient.updateBotRegistration(appStudioToken, mergedBotRegistration);
        }
        return teamsfx_api_1.ok(remoteBotRegistration !== undefined);
    }
    async updateMessageEndpoint(m365TokenProvider, botId, endpoint) {
        const appStudioTokenRes = await m365TokenProvider.getAccessToken({
            scopes: tools_1.AppStudioScopes,
        });
        if (appStudioTokenRes.isErr()) {
            return teamsfx_api_1.err(appStudioTokenRes.error);
        }
        const appStudioToken = appStudioTokenRes.value;
        await appStudioClient_1.AppStudioClient.updateMessageEndpoint(appStudioToken, botId, endpoint);
        return teamsfx_api_1.ok(undefined);
    }
}
exports.LocalBotRegistration = LocalBotRegistration;
//# sourceMappingURL=localBotRegistration.js.map