"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotRegistration = exports.Constants = exports.BotAuthType = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../../common/localizeUtils");
const tools_1 = require("../../../../common/tools");
const constants_1 = require("./constants");
const graphClient_1 = require("./graphClient");
var BotAuthType;
(function (BotAuthType) {
    BotAuthType["AADApp"] = "AADApp";
    BotAuthType["Identity"] = "User-Assigned Managed Identity";
})(BotAuthType = exports.BotAuthType || (exports.BotAuthType = {}));
class Constants {
}
exports.Constants = Constants;
Constants.BOT_REGISTRATION = "BotRegistration";
Constants.CREATE_BOT_REGISTRATION = "createBotRegistration";
Constants.UPDATE_MESSAGE_ENDPOINT = "updateMessageEndpoint";
Constants.CREATE_OR_UPDATE_BOT_REGISTRATION = "createOrUpdateBotRegistration";
Constants.MSI_FOR_BOT = "MSI Support for Bot";
class BotRegistration {
    async createBotAadApp(m365TokenProvider, aadDisplayName, botConfig, logProvider, botAuthType = BotAuthType.AADApp) {
        logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.startCreateBotAadApp));
        if (botAuthType === BotAuthType.AADApp) {
            if ((botConfig === null || botConfig === void 0 ? void 0 : botConfig.botId) && (botConfig === null || botConfig === void 0 ? void 0 : botConfig.botPassword)) {
                // Existing bot aad scenario.
                logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.skipCreateBotAadApp));
                return teamsfx_api_1.ok(botConfig);
            }
            else {
                // Create a new bot aad app.
                // Prepare graph token.
                const graphTokenRes = await m365TokenProvider.getAccessToken({
                    scopes: tools_1.GraphScopes,
                });
                if (graphTokenRes.isErr()) {
                    return teamsfx_api_1.err(graphTokenRes.error);
                }
                const graphToken = graphTokenRes.value;
                // Call GraphClient.
                try {
                    const aadAppCredential = await graphClient_1.GraphClient.registerAadApp(graphToken, aadDisplayName);
                    logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.successCreateBotAadApp));
                    return teamsfx_api_1.ok({
                        botId: aadAppCredential.clientId,
                        botPassword: aadAppCredential.clientSecret,
                    });
                }
                catch (e) {
                    logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(localizeUtils_1.getLocalizedString(constants_1.logMessageKeys.failCreateBotAadApp, e.genMessage()));
                    return teamsfx_api_1.err(e);
                }
            }
        }
        else {
            // Suppose === BotAuthType.Identity
            //TODO: Support identity.
            return teamsfx_api_1.err(new teamsfx_api_1.NotImplementedError(Constants.BOT_REGISTRATION, Constants.MSI_FOR_BOT));
        }
    }
    async createBotRegistration(m365TokenProvider, aadDisplayName, botName, botConfig, logProvider, botAuthType = BotAuthType.AADApp) {
        return teamsfx_api_1.err(new teamsfx_api_1.NotImplementedError(Constants.BOT_REGISTRATION, Constants.CREATE_BOT_REGISTRATION));
    }
    // return true if botRegistration is already existing
    async createOrUpdateBotRegistration(m365TokenProvider, botRegistration) {
        return teamsfx_api_1.err(new teamsfx_api_1.NotImplementedError(Constants.BOT_REGISTRATION, Constants.CREATE_OR_UPDATE_BOT_REGISTRATION));
    }
    async updateMessageEndpoint(m365TokenProvider, botId, endpoint) {
        return teamsfx_api_1.err(new teamsfx_api_1.NotImplementedError(Constants.BOT_REGISTRATION, Constants.UPDATE_MESSAGE_ENDPOINT));
    }
}
exports.BotRegistration = BotRegistration;
//# sourceMappingURL=botRegistration.js.map