"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphClient = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const utils = tslib_1.__importStar(require("../common"));
const axios_1 = tslib_1.__importDefault(require("axios"));
const constants_1 = require("../constants");
const errors_1 = require("../errors");
const strings_1 = require("../strings");
const retryHandler_1 = require("../retryHandler");
class GraphClient {
    static async registerAadApp(token, displayName) {
        const axiosInstance = axios_1.default.create({
            baseURL: constants_1.AADRegistrationConstants.GRAPH_REST_BASE_URL,
        });
        axiosInstance.defaults.headers.common["Authorization"] = `Bearer ${token}`;
        const result = {
            clientId: "",
            clientSecret: "",
        };
        // 1. Register a new AAD App.
        let regResponse;
        try {
            regResponse = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${constants_1.AADRegistrationConstants.GRAPH_REST_BASE_URL}/applications`, {
                displayName: displayName,
                signInAudience: constants_1.AADRegistrationConstants.AZURE_AD_MULTIPLE_ORGS,
            }));
        }
        catch (e) {
            throw new errors_1.CreateAADAppError(e);
        }
        if (!regResponse || !utils.isHttpCodeOkOrCreated(regResponse.status)) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_APP);
        }
        result.clientId = regResponse.data.appId;
        // 2. Generate client secret.
        let genResponse = undefined;
        try {
            genResponse = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${constants_1.AADRegistrationConstants.GRAPH_REST_BASE_URL}/applications/${regResponse === null || regResponse === void 0 ? void 0 : regResponse.data.id}/addPassword`, {
                passwordCredential: {
                    displayName: "default",
                },
            }));
        }
        catch (e) {
            throw new errors_1.CreateAADSecretError(e);
        }
        if (!genResponse || !genResponse.data) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_CLIENT_SECRET);
        }
        result.clientSecret = genResponse.data.secretText;
        return result;
    }
}
exports.GraphClient = GraphClient;
//# sourceMappingURL=graphClient.js.map