"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureResource = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
require("reflect-metadata");
const tools_1 = require("../../common/tools");
const question_1 = require("../../core/question");
const folder_1 = require("../../folder");
const constants_1 = require("../constants");
class AzureResource {
    constructor() {
        this.templateContext = {};
    }
    async generateBicep(context, inputs) {
        var _a;
        const pmPath = path.join(folder_1.getTemplatesFolder(), "bicep", `${this.bicepModuleName}.provision.module.bicep`);
        const poPath = path.join(folder_1.getTemplatesFolder(), "bicep", `${this.bicepModuleName}.provision.orchestration.bicep`);
        const configs = [];
        configs.push((_a = constants_1.languageToRuntime.get(context.projectSetting.programmingLanguage ||
            (inputs === null || inputs === void 0 ? void 0 : inputs[question_1.CoreQuestionNames.ProgrammingLanguage]))) !== null && _a !== void 0 ? _a : "");
        this.templateContext.configs = configs;
        const moduleName = this.bicepModuleName + (inputs.scenario || "");
        this.templateContext.componentId = inputs.componentId || "";
        this.templateContext.scenario = inputs.scenario || "";
        this.templateContext.scenarioInLowerCase = (inputs.scenario || "").toLowerCase();
        let module = await fs_extra_1.default.readFile(pmPath, "utf-8");
        let orchestration = await fs_extra_1.default.readFile(poPath, "utf-8");
        module = tools_1.compileHandlebarsTemplateString(module, this.templateContext);
        orchestration = tools_1.compileHandlebarsTemplateString(orchestration, this.templateContext);
        const parametersPath = path.join(folder_1.getTemplatesFolder(), "bicep", `${this.bicepModuleName}.parameters.json`);
        let params;
        if (await fs_extra_1.default.pathExists(parametersPath)) {
            params = await fs_extra_1.default.readJson(parametersPath);
        }
        const bicep = {
            type: "bicep",
            Provision: {
                Modules: { [moduleName]: module },
                Orchestration: orchestration,
            },
            Parameters: params,
        };
        return teamsfx_api_1.ok([bicep]);
    }
}
exports.AzureResource = AzureResource;
//# sourceMappingURL=azureResource.js.map