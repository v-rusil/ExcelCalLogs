"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
const tslib_1 = require("tslib");
const path = tslib_1.__importStar(require("path"));
const fs = tslib_1.__importStar(require("fs-extra"));
const constants_1 = require("../constants");
const errors_1 = require("../errors");
const result_1 = require("../result");
const telemetry_1 = require("./telemetry");
const folder_1 = require("../../../../folder");
const got_1 = tslib_1.__importDefault(require("got"));
const os_1 = tslib_1.__importDefault(require("os"));
const localSettingsConstants_1 = require("../../../../common/localSettingsConstants");
const tools_1 = require("../../../../common/tools");
class Utils {
    static generateResourceName(appName, resourceNameSuffix) {
        const paddingLength = constants_1.Constants.ResourceNameMaxLength -
            resourceNameSuffix.length -
            constants_1.Constants.SimpleAuthSuffix.length;
        const normalizedAppName = appName.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();
        return (normalizedAppName.substr(0, paddingLength) + constants_1.Constants.SimpleAuthSuffix + resourceNameSuffix);
    }
    static getSimpleAuthFilePath() {
        // const fxCoreDir: string = path.join(__dirname, "..", "..", "..", "..", "..");
        return path.join(folder_1.getTemplatesFolder(), "plugins", "resource", "simpleauth", constants_1.Constants.SimpleAuthFileName);
    }
    static async downloadZip(filePath) {
        if (await Utils.checkFileExist(filePath)) {
            return;
        }
        const versionFilePath = path.join(filePath, "..", constants_1.Constants.VersionFileName);
        if (!(await Utils.checkFileExist(versionFilePath))) {
            throw result_1.ResultFactory.SystemError(errors_1.VersionFileNotExist.name, errors_1.VersionFileNotExist.message(versionFilePath));
        }
        const versionFile = await fs.readFile(versionFilePath, "utf-8");
        const version = versionFile.split(os_1.default.EOL)[0];
        const tag = constants_1.Constants.SimpleAuthTag(version);
        const fileName = constants_1.Constants.SimpleAuthZipName(version);
        const distUrl = constants_1.Constants.SimpleAuthReleaseUrl(tag, fileName);
        try {
            await got_1.default.stream(distUrl).pipe(fs.createWriteStream(filePath));
        }
        catch (error) {
            throw result_1.ResultFactory.SystemError(errors_1.ZipDownloadError.name, errors_1.ZipDownloadError.message(error === null || error === void 0 ? void 0 : error.message), error);
        }
        if (!(await Utils.checkFileExist(filePath))) {
            throw result_1.ResultFactory.SystemError(errors_1.ZipDownloadError.name, errors_1.ZipDownloadError.message());
        }
    }
    static getWebAppConfig(ctx, isLocalDebug) {
        const clientId = this.getClientId(ctx, isLocalDebug);
        const clientSecret = this.getClientSecret(ctx, isLocalDebug);
        const oauthAuthority = this.getOauthAuthority(ctx, isLocalDebug);
        const applicationIdUris = this.getApplicationIdUris(ctx, isLocalDebug);
        const endpoint = this.getFrontendEndpoint(ctx, isLocalDebug);
        const allowedAppIds = tools_1.getAllowedAppIds().join(";");
        const aadMetadataAddress = `${oauthAuthority}/v2.0/.well-known/openid-configuration`;
        let endpointUrl;
        try {
            endpointUrl = new URL(endpoint);
        }
        catch (error) {
            throw result_1.ResultFactory.SystemError(errors_1.EndpointInvalidError.name, errors_1.EndpointInvalidError.message(endpoint, error.message));
        }
        const tabAppEndpoint = endpointUrl.origin;
        return {
            [constants_1.Constants.ApplicationSettingsKeys.clientId]: clientId,
            [constants_1.Constants.ApplicationSettingsKeys.clientSecret]: clientSecret,
            [constants_1.Constants.ApplicationSettingsKeys.oauthAuthority]: oauthAuthority,
            [constants_1.Constants.ApplicationSettingsKeys.applicationIdUris]: applicationIdUris,
            [constants_1.Constants.ApplicationSettingsKeys.allowedAppIds]: allowedAppIds,
            [constants_1.Constants.ApplicationSettingsKeys.tabAppEndpoint]: tabAppEndpoint,
            [constants_1.Constants.ApplicationSettingsKeys.aadMetadataAddress]: aadMetadataAddress,
        };
    }
    static addLocalDebugPrefix(isLocalDebug, key) {
        return isLocalDebug ? constants_1.Constants.LocalPrefix + key : key;
    }
    static addLogAndTelemetry(logProvider, message, properties) {
        logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(message.log);
        telemetry_1.TelemetryUtils.sendEvent(message.telemetry, properties);
    }
    static getConfigValueWithValidation(ctx, pluginId, configKey, isLocalDebug = false) {
        var _a;
        const key = Utils.addLocalDebugPrefix(isLocalDebug, configKey);
        const configValue = (_a = ctx.envInfo.state.get(pluginId)) === null || _a === void 0 ? void 0 : _a.get(key);
        if (!configValue) {
            throw result_1.ResultFactory.SystemError(errors_1.NoConfigError.name, errors_1.NoConfigError.message(pluginId, key));
        }
        return configValue;
    }
    static isUserError(error) {
        var _a, _b, _c;
        if (((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) &&
            ((_b = error === null || error === void 0 ? void 0 : error.response) === null || _b === void 0 ? void 0 : _b.status) >= constants_1.Constants.statusCodeUserError &&
            ((_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.status) < constants_1.Constants.statusCodeServerError) {
            return true;
        }
        else {
            return false;
        }
    }
    static getClientId(ctx, isLocalDebug) {
        var _a, _b;
        const clientId = isLocalDebug
            ? (_b = (_a = ctx.localSettings) === null || _a === void 0 ? void 0 : _a.auth) === null || _b === void 0 ? void 0 : _b.get(localSettingsConstants_1.LocalSettingsAuthKeys.ClientId)
            : Utils.getConfigValueWithValidation(ctx, constants_1.Constants.AadAppPlugin.id, constants_1.Constants.AadAppPlugin.configKeys.clientId, isLocalDebug);
        return clientId;
    }
    static getClientSecret(ctx, isLocalDebug) {
        var _a, _b;
        const clientSecret = isLocalDebug
            ? (_b = (_a = ctx.localSettings) === null || _a === void 0 ? void 0 : _a.auth) === null || _b === void 0 ? void 0 : _b.get(localSettingsConstants_1.LocalSettingsAuthKeys.ClientSecret)
            : Utils.getConfigValueWithValidation(ctx, constants_1.Constants.AadAppPlugin.id, constants_1.Constants.AadAppPlugin.configKeys.clientSecret, isLocalDebug);
        return clientSecret;
    }
    static getFrontendEndpoint(ctx, isLocalDebug) {
        var _a, _b;
        const tabEndpoint = isLocalDebug
            ? (_b = (_a = ctx.localSettings) === null || _a === void 0 ? void 0 : _a.frontend) === null || _b === void 0 ? void 0 : _b.get(localSettingsConstants_1.LocalSettingsFrontendKeys.TabEndpoint)
            : Utils.getConfigValueWithValidation(ctx, constants_1.Constants.FrontendPlugin.id, constants_1.Constants.FrontendPlugin.configKeys.endpoint);
        return tabEndpoint;
    }
    static getOauthAuthority(ctx, isLocalDebug) {
        var _a, _b;
        const oauthAuthority = isLocalDebug
            ? (_b = (_a = ctx.localSettings) === null || _a === void 0 ? void 0 : _a.auth) === null || _b === void 0 ? void 0 : _b.get(localSettingsConstants_1.LocalSettingsAuthKeys.OauthAuthority)
            : Utils.getConfigValueWithValidation(ctx, constants_1.Constants.AadAppPlugin.id, constants_1.Constants.AadAppPlugin.configKeys.oauthAuthority);
        return oauthAuthority;
    }
    static getApplicationIdUris(ctx, isLocalDebug) {
        var _a, _b;
        const applicationIdUris = isLocalDebug
            ? (_b = (_a = ctx.localSettings) === null || _a === void 0 ? void 0 : _a.auth) === null || _b === void 0 ? void 0 : _b.get(localSettingsConstants_1.LocalSettingsAuthKeys.ApplicationIdUris)
            : Utils.getConfigValueWithValidation(ctx, constants_1.Constants.AadAppPlugin.id, constants_1.Constants.AadAppPlugin.configKeys.applicationIdUris, isLocalDebug);
        return applicationIdUris;
    }
    static async checkFileExist(filePath) {
        try {
            await fs.stat(filePath);
            return true;
        }
        catch (error) {
            return false;
        }
    }
}
exports.Utils = Utils;
//# sourceMappingURL=common.js.map