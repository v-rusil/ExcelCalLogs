"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryUtils = void 0;
const constants_1 = require("../constants");
class TelemetryUtils {
    static init(ctx) {
        TelemetryUtils.ctx = ctx;
    }
    static sendEvent(eventName, properties, measurements) {
        var _a;
        if (!properties) {
            properties = {};
        }
        properties[constants_1.Telemetry.isSuccess] = constants_1.Telemetry.success;
        properties[constants_1.Telemetry.component] = constants_1.Constants.SimpleAuthPlugin.id;
        TelemetryUtils.addAppIdInProperty(properties, this.ctx);
        (_a = TelemetryUtils.ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(eventName, errorName, errorType, errorMessage, properties, measurements) {
        var _a;
        if (!properties) {
            properties = {};
        }
        properties[constants_1.Telemetry.isSuccess] = constants_1.Telemetry.fail;
        properties[constants_1.Telemetry.component] = constants_1.Constants.SimpleAuthPlugin.id;
        properties[constants_1.Telemetry.errorCode] = `${constants_1.Constants.SimpleAuthPlugin.shortName}.${errorName}`;
        properties[constants_1.Telemetry.errorType] = errorType;
        properties[constants_1.Telemetry.errorMessage] = errorMessage;
        TelemetryUtils.addAppIdInProperty(properties, this.ctx);
        (_a = TelemetryUtils.ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, properties, measurements);
    }
    static addAppIdInProperty(properties, ctx) {
        var _a;
        const appId = (_a = ctx.envInfo.state
            .get(constants_1.Constants.SolutionPlugin.id)) === null || _a === void 0 ? void 0 : _a.get(constants_1.Constants.SolutionPlugin.configKeys.remoteTeamsAppId);
        if (appId) {
            properties[constants_1.Telemetry.appId] = appId;
        }
        else {
            properties[constants_1.Telemetry.appId] = "";
        }
    }
}
exports.TelemetryUtils = TelemetryUtils;
//# sourceMappingURL=telemetry.js.map