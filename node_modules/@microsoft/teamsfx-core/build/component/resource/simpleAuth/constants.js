"use strict";
// Copyright (c) Microsoft Corporation.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Messages = exports.Telemetry = exports.Constants = void 0;
const localizeUtils_1 = require("../../../common/localizeUtils");
// Licensed under the MIT license.
class Constants {
}
exports.Constants = Constants;
Constants.SolutionPlugin = {
    id: "solution",
    configKeys: {
        resourceNameSuffix: "resourceNameSuffix",
        subscriptionId: "subscriptionId",
        resourceGroupName: "resourceGroupName",
        location: "location",
        remoteTeamsAppId: "remoteTeamsAppId",
    },
};
Constants.AadAppPlugin = {
    id: "fx-resource-aad-app-for-teams",
    configKeys: {
        clientId: "clientId",
        clientSecret: "clientSecret",
        applicationIdUris: "applicationIdUris",
        oauthAuthority: "oauthAuthority",
    },
};
Constants.FrontendPlugin = {
    id: "fx-resource-frontend-hosting",
    configKeys: {
        endpoint: "endpoint",
    },
};
Constants.LocalDebugPlugin = {
    id: "fx-resource-local-debug",
    configKeys: {
        endpoint: "localTabEndpoint",
    },
};
Constants.SimpleAuthPlugin = {
    id: "fx-resource-simple-auth",
    name: "Simple Auth Plugin",
    shortName: "sa",
    configKeys: {
        endpoint: "endpoint",
        filePath: "filePath",
        environmentVariableParams: "environmentVariableParams",
        skuName: "skuName",
    },
};
Constants.provisionModuleTemplateFileName = "simpleAuthProvision.template.bicep";
Constants.configModuleTemplateFileName = "simpleAuthConfiguration.template.bicep";
Constants.SimpleAuthBicepOutputSkuName = "provisionOutputs.simpleAuthProvision.outputs.skuName";
Constants.SimpleAuthBicepOutputEndpoint = "provisionOutputs.simpleAuthProvision.outputs.endpoint";
Constants.SimpleAuthFileName = "SimpleAuth.zip";
Constants.SimpleAuthZipName = (version) => `Microsoft.TeamsFx.SimpleAuth_${version}.zip`;
Constants.SimpleAuthTag = (version) => `simpleauth@${version}`;
Constants.SimpleAuthReleaseUrl = (tagName, fileName) => `https://github.com/OfficeDev/TeamsFx/releases/download/${tagName}/${fileName}`;
Constants.VersionFileName = "version.txt";
Constants.ResourceNameMaxLength = 40;
Constants.SimpleAuthSuffix = "sa";
Constants.LocalPrefix = "local_";
Constants.Component = "component";
Constants.ApplicationSettingsKeys = {
    clientId: "CLIENT_ID",
    clientSecret: "CLIENT_SECRET",
    oauthAuthority: "OAUTH_AUTHORITY",
    applicationIdUris: "IDENTIFIER_URI",
    allowedAppIds: "ALLOWED_APP_IDS",
    tabAppEndpoint: "TAB_APP_ENDPOINT",
    aadMetadataAddress: "AAD_METADATA_ADDRESS",
};
Constants.ProgressBar = {
    start: "Starting",
    provision: {
        title: "Provisioning Simple Auth",
        registerResourceProvider: "Registering required resource provider.",
        createAppServicePlan: "Creating Azure App Service plan",
        createWebApp: "Creating Azure Web App",
        zipDeploy: "Deploying Simple Auth",
    },
    postProvision: {
        title: "Configuring Simple Auth",
        updateWebApp: "Updating Azure Web App",
    },
};
Constants.RegisterRersourceProviderFailed = (message) => localizeUtils_1.getLocalizedString("plugins.sa.RegisterRersourceProviderFailed", message, Constants.RequiredResourceProviders.join(","));
Constants.FreeServerFarmsQuotaErrorFromAzure = "The maximum number of Free ServerFarms allowed in a Subscription is 10";
Constants.FreeServerFarmsQuotaErrorToUser = localizeUtils_1.getLocalizedString("plugins.sa.FreeServerFarmsQuotaErrorToUser");
Constants.MissingSubscriptionRegistrationErrorFromAzure = "The subscription is not registered to use namespace 'Microsoft.Web'";
Constants.HelpLink = "https://aka.ms/teamsfx-sa-help";
Constants.RequiredResourceProviders = ["Microsoft.Web"];
Constants.statusCodeUserError = 400;
Constants.statusCodeServerError = 500;
class Telemetry {
}
exports.Telemetry = Telemetry;
Telemetry.component = "component";
Telemetry.errorCode = "error-code";
Telemetry.errorType = "error-type";
Telemetry.skuName = "sku-name";
Telemetry.errorMessage = "error-message";
Telemetry.userError = "user";
Telemetry.systemError = "system";
Telemetry.isSuccess = "success";
Telemetry.success = "yes";
Telemetry.fail = "no";
Telemetry.appId = "appid";
class Messages {
}
exports.Messages = Messages;
Messages.getLog = (log) => `[${Constants.SimpleAuthPlugin.name}] ${log}`;
Messages.getEventName = (eventName) => `${eventName}`;
Messages.StartLocalDebug = {
    log: Messages.getLog("Starting local-debug"),
    telemetry: Messages.getEventName("local-debug-start"),
};
Messages.EndLocalDebug = {
    log: Messages.getLog("Successfully started local-debug"),
    telemetry: Messages.getEventName("local-debug"),
};
Messages.StartPostLocalDebug = {
    log: Messages.getLog("Starting post-local-debug"),
    telemetry: Messages.getEventName("post-local-debug-start"),
};
Messages.EndPostLocalDebug = {
    log: Messages.getLog("Successfully started post-local-debug"),
    telemetry: Messages.getEventName("post-local-debug"),
};
Messages.StartProvision = {
    log: Messages.getLog("Provisioning"),
    telemetry: Messages.getEventName("provision-start"),
};
Messages.EndProvision = {
    log: Messages.getLog("Successfully provisioned"),
    telemetry: Messages.getEventName("provision"),
};
Messages.StartGenerateArmTemplates = {
    log: Messages.getLog("Starting generating arm templates"),
    telemetry: Messages.getEventName("generate-arm-templates-start"),
};
Messages.EndGenerateArmTemplates = {
    log: Messages.getLog("Successfully generated arm templates"),
    telemetry: Messages.getEventName("generate-arm-templates"),
};
Messages.StartUpdateArmTemplates = {
    log: Messages.getLog("Starting updating arm templates"),
    telemetry: Messages.getEventName("update-arm-templates-start"),
};
Messages.EndUpdateArmTemplates = {
    log: Messages.getLog("Successfully generated arm templates"),
    telemetry: Messages.getEventName("update-arm-templates"),
};
Messages.StartPostProvision = {
    log: Messages.getLog("Post-provisioning"),
    telemetry: Messages.getEventName("post-provision-start"),
};
Messages.EndPostProvision = {
    log: Messages.getLog("Successfully post-provisioned"),
    telemetry: Messages.getEventName("post-provision"),
};
//# sourceMappingURL=constants.js.map