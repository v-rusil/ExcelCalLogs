"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleAuth = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const localSettingsConstants_1 = require("../../../common/localSettingsConstants");
const localStateConstants_1 = require("../../../common/localStateConstants");
const tools_1 = require("../../../common/tools");
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const result_1 = require("./result");
const common_1 = require("./utils/common");
const constants_2 = require("../../constants");
const actionExecutionMW_1 = require("../../middleware/actionExecutionMW");
let SimpleAuth = class SimpleAuth {
    async provision(context, inputs) {
        if (context.envInfo.envName === "local") {
            context.logProvider.info(constants_1.Messages.StartLocalDebug.log);
            context.envInfo.state[constants_2.ComponentNames.SimpleAuth] =
                context.envInfo.state[constants_2.ComponentNames.SimpleAuth] || {};
            const simpleAuthFilePath = common_1.Utils.getSimpleAuthFilePath();
            context.envInfo.state[constants_2.ComponentNames.SimpleAuth][localSettingsConstants_1.LocalSettingsSimpleAuthKeys.SimpleAuthFilePath] = simpleAuthFilePath;
            await common_1.Utils.downloadZip(simpleAuthFilePath);
            context.logProvider.info(constants_1.Messages.EndLocalDebug.log);
        }
        return teamsfx_api_1.ok(undefined);
    }
    async configure(context, inputs) {
        context.logProvider.info(constants_1.Messages.StartPostLocalDebug.log);
        context.envInfo.state[constants_2.ComponentNames.SimpleAuth] =
            context.envInfo.state[constants_2.ComponentNames.SimpleAuth] || {};
        const configs = this.getWebAppConfig(context.envInfo); //
        if (context.envInfo.envName === "local") {
            const configArray = [];
            for (const [key, value] of Object.entries(configs)) {
                configArray.push(`${key}="${value}"`);
            }
            context.envInfo.state[constants_2.ComponentNames.SimpleAuth][localStateConstants_1.LocalStateSimpleAuthKeys.EnvironmentVariableParams] = configArray.join(" ");
            context.logProvider.info(constants_1.Messages.EndPostLocalDebug.log);
        }
        return teamsfx_api_1.ok(undefined);
    }
    checkDefined(key, value, component = "simple-auth") {
        if (!value) {
            throw result_1.ResultFactory.SystemError(errors_1.NoConfigError.name, errors_1.NoConfigError.message(component, key));
        }
    }
    getWebAppConfig(envInfo) {
        const clientId = envInfo.state[constants_2.ComponentNames.AadApp].clientId;
        const clientSecret = envInfo.state[constants_2.ComponentNames.AadApp].clientSecret;
        const oauthAuthority = envInfo.state[constants_2.ComponentNames.AadApp].oauthAuthority;
        const applicationIdUris = envInfo.state[constants_2.ComponentNames.AadApp].applicationIdUris;
        const endpoint = envInfo.state[constants_2.ComponentNames.TeamsTab].endpoint;
        this.checkDefined("clientId", clientId);
        this.checkDefined("clientSecret", clientSecret);
        this.checkDefined("oauthAuthority", oauthAuthority);
        this.checkDefined("applicationIdUris", applicationIdUris);
        this.checkDefined("endpoint", endpoint, "teams-tab");
        const allowedAppIds = tools_1.getAllowedAppIds().join(";");
        const aadMetadataAddress = `${oauthAuthority}/v2.0/.well-known/openid-configuration`;
        let endpointUrl;
        try {
            endpointUrl = new URL(endpoint);
        }
        catch (error) {
            throw result_1.ResultFactory.SystemError(errors_1.EndpointInvalidError.name, errors_1.EndpointInvalidError.message(endpoint, error.message));
        }
        const tabAppEndpoint = endpointUrl.origin;
        return {
            [constants_1.Constants.ApplicationSettingsKeys.clientId]: clientId,
            [constants_1.Constants.ApplicationSettingsKeys.clientSecret]: clientSecret,
            [constants_1.Constants.ApplicationSettingsKeys.oauthAuthority]: oauthAuthority,
            [constants_1.Constants.ApplicationSettingsKeys.applicationIdUris]: applicationIdUris,
            [constants_1.Constants.ApplicationSettingsKeys.allowedAppIds]: allowedAppIds,
            [constants_1.Constants.ApplicationSettingsKeys.tabAppEndpoint]: tabAppEndpoint,
            [constants_1.Constants.ApplicationSettingsKeys.aadMetadataAddress]: aadMetadataAddress,
        };
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            errorSource: "sa",
            enableTelemetry: true,
            telemetryComponentName: "fx-resource-simple-auth",
            telemetryEventName: "local-debug",
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], SimpleAuth.prototype, "provision", null);
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            errorSource: "sa",
            enableTelemetry: true,
            telemetryComponentName: "fx-resource-simple-auth",
            telemetryEventName: "configure",
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], SimpleAuth.prototype, "configure", null);
SimpleAuth = tslib_1.__decorate([
    typedi_1.Service(constants_2.ComponentNames.SimpleAuth)
], SimpleAuth);
exports.SimpleAuth = SimpleAuth;
//# sourceMappingURL=index.js.map