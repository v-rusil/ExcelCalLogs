"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.versionCheckQuestion = exports.webpartDescriptionQuestion = exports.webpartNameQuestion = exports.frameworkQuestion = exports.SPFXQuestionNames = void 0;
const tslib_1 = require("tslib");
const jsonschema = tslib_1.__importStar(require("jsonschema"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../../common/localizeUtils");
const error_1 = require("../error");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
var SPFXQuestionNames;
(function (SPFXQuestionNames) {
    SPFXQuestionNames["framework_type"] = "spfx-framework-type";
    SPFXQuestionNames["webpart_name"] = "spfx-webpart-name";
    SPFXQuestionNames["webpart_desp"] = "spfx-webpart-desp";
    SPFXQuestionNames["version_check"] = "spfx-version-check";
})(SPFXQuestionNames = exports.SPFXQuestionNames || (exports.SPFXQuestionNames = {}));
exports.frameworkQuestion = {
    type: "singleSelect",
    name: SPFXQuestionNames.framework_type,
    title: localizeUtils_1.getLocalizedString("plugins.spfx.questions.framework.title"),
    staticOptions: [
        { id: "react", label: "React" },
        { id: "minimal", label: "Minimal" },
        { id: "none", label: "None" },
    ],
    placeholder: "Select an option",
    default: "react",
};
exports.webpartNameQuestion = {
    type: "text",
    name: SPFXQuestionNames.webpart_name,
    title: "Web Part Name",
    default: "helloworld",
    validation: {
        validFunc: async (input, previousInputs) => {
            const schema = {
                pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$",
            };
            const validateRes = jsonschema.validate(input, schema);
            if (validateRes.errors && validateRes.errors.length > 0) {
                return localizeUtils_1.getLocalizedString("plugins.spfx.questions.webpartName.error.notMatch", input, schema.pattern);
            }
            if ((previousInputs === null || previousInputs === void 0 ? void 0 : previousInputs.stage) === teamsfx_api_1.Stage.addFeature && (previousInputs === null || previousInputs === void 0 ? void 0 : previousInputs.projectPath)) {
                const webpartFolder = path.join(previousInputs === null || previousInputs === void 0 ? void 0 : previousInputs.projectPath, "SPFx", "src", "webparts", input);
                if (await fs_extra_1.default.pathExists(webpartFolder)) {
                    return localizeUtils_1.getLocalizedString("plugins.spfx.questions.webpartName.error.duplicate", webpartFolder);
                }
            }
            return undefined;
        },
    },
};
exports.webpartDescriptionQuestion = {
    type: "text",
    name: SPFXQuestionNames.webpart_desp,
    title: "Web Part Description",
    default: "helloworld description",
    validation: {
        required: true,
    },
};
exports.versionCheckQuestion = {
    type: "func",
    name: SPFXQuestionNames.version_check,
    title: localizeUtils_1.getLocalizedString("plugins.spfx.questions.versionCheck.title"),
    func: async (inputs) => {
        const npmMajorVersion = await utils_1.Utils.getNPMMajorVersion(undefined);
        if (npmMajorVersion === undefined) {
            throw error_1.NpmNotFoundError();
        }
        const isNpmVersionSupported = constants_1.Constants.SUPPORTED_NPM_VERSION.includes(npmMajorVersion);
        if (!isNpmVersionSupported) {
            throw error_1.NpmVersionNotSupportedError(npmMajorVersion);
        }
        const nodeMajorVersion = await utils_1.Utils.getNodeVersion();
        const isNodeVersionSupported = nodeMajorVersion && constants_1.Constants.SUPPORTED_NODE_VERSION.includes(nodeMajorVersion);
        if (!isNodeVersionSupported) {
            throw error_1.NodeVersionNotSupportedError(nodeMajorVersion !== null && nodeMajorVersion !== void 0 ? nodeMajorVersion : "");
        }
        return undefined;
    },
};
//# sourceMappingURL=questions.js.map