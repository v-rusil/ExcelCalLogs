// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoConfigurationError = exports.DependencyInstallError = exports.DependencyValidateError = exports.NpmInstallError = exports.NodeVersionNotSupportedError = exports.NpmVersionNotSupportedError = exports.NpmNotFoundError = exports.UploadAppPackageFailedError = exports.GetTenantFailedError = exports.CreateAppCatalogFailedError = exports.InsufficientPermissionError = exports.GetGraphTokenFailedError = exports.GetSPOTokenFailedError = exports.NoManifestFileError = exports.BuildSPPackageError = exports.NoSPPackageError = exports.ScaffoldError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("./utils/constants");
const localizeUtils_1 = require("../../../common/localizeUtils");
function ScaffoldError(error) {
    if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
        return error;
    }
    else {
        return new teamsfx_api_1.SystemError({
            error: error,
            source: constants_1.Constants.PLUGIN_NAME,
            name: "SPFxScaffoldError",
        });
    }
}
exports.ScaffoldError = ScaffoldError;
function NoSPPackageError(distFolder) {
    return new teamsfx_api_1.UserError(constants_1.Constants.PLUGIN_NAME, "NoSharePointPackage", localizeUtils_1.getDefaultString("plugins.spfx.cannotFindPackage", distFolder), localizeUtils_1.getLocalizedString("plugins.spfx.cannotFindPackage", distFolder));
}
exports.NoSPPackageError = NoSPPackageError;
function BuildSPPackageError(error) {
    if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
        return error;
    }
    else {
        return new teamsfx_api_1.UserError({ error, source: constants_1.Constants.PLUGIN_NAME, name: "BuildSPFxPackageFail" });
    }
}
exports.BuildSPPackageError = BuildSPPackageError;
function NoManifestFileError(distFolder) {
    return new teamsfx_api_1.UserError(constants_1.Constants.PLUGIN_NAME, "NoManifestFile", localizeUtils_1.getDefaultString("plugins.spfx.cannotFindManifest", distFolder), localizeUtils_1.getLocalizedString("plugins.spfx.cannotFindManifest", distFolder));
}
exports.NoManifestFileError = NoManifestFileError;
function GetSPOTokenFailedError() {
    return new teamsfx_api_1.SystemError(constants_1.Constants.PLUGIN_NAME, "GetSPOTokenFailed", localizeUtils_1.getDefaultString("plugins.spfx.cannotGetSPOToken"), localizeUtils_1.getLocalizedString("plugins.spfx.cannotGetSPOToken"));
}
exports.GetSPOTokenFailedError = GetSPOTokenFailedError;
function GetGraphTokenFailedError() {
    return new teamsfx_api_1.SystemError(constants_1.Constants.PLUGIN_NAME, "GetGraphTokenFailed", localizeUtils_1.getDefaultString("plugins.spfx.cannotGetGraphToken"), localizeUtils_1.getLocalizedString("plugins.spfx.cannotGetGraphToken"));
}
exports.GetGraphTokenFailedError = GetGraphTokenFailedError;
function InsufficientPermissionError(appCatalog) {
    return new teamsfx_api_1.UserError(constants_1.Constants.PLUGIN_NAME, "InsufficientPermission", localizeUtils_1.getDefaultString("plugins.spfx.insufficientPermission", appCatalog), localizeUtils_1.getLocalizedString("plugins.spfx.insufficientPermission", appCatalog));
}
exports.InsufficientPermissionError = InsufficientPermissionError;
function CreateAppCatalogFailedError(error) {
    return new teamsfx_api_1.SystemError(constants_1.Constants.PLUGIN_NAME, "CreateAppCatalogFailed", localizeUtils_1.getDefaultString("plugins.spfx.createAppcatalogFail", error.message, error.stack), localizeUtils_1.getLocalizedString("plugins.spfx.createAppcatalogFail", error.message, error.stack));
}
exports.CreateAppCatalogFailedError = CreateAppCatalogFailedError;
function GetTenantFailedError(username, error) {
    const param1 = username ? `for user ${username} ` : "";
    const param2 = error ? `due to error ${error.message}` : "";
    return new teamsfx_api_1.SystemError(constants_1.Constants.PLUGIN_NAME, "GetTenantFailedError", localizeUtils_1.getDefaultString("plugins.spfx.GetTenantFailedError", param1, param2), localizeUtils_1.getLocalizedString("plugins.spfx.GetTenantFailedError", param1, param2));
}
exports.GetTenantFailedError = GetTenantFailedError;
function UploadAppPackageFailedError(error) {
    return new teamsfx_api_1.SystemError(constants_1.Constants.PLUGIN_NAME, "UploadAppCatalogFailed", localizeUtils_1.getDefaultString("plugins.spfx.uploadAppcatalogFail", error.message), localizeUtils_1.getLocalizedString("plugins.spfx.uploadAppcatalogFail", error.message));
}
exports.UploadAppPackageFailedError = UploadAppPackageFailedError;
function NpmNotFoundError() {
    return new teamsfx_api_1.UserError({
        source: constants_1.Constants.PLUGIN_NAME,
        name: "NpmNotFound",
        message: localizeUtils_1.getDefaultString("plugins.spfx.error.npmNotFound"),
        displayMessage: localizeUtils_1.getLocalizedString("plugins.spfx.error.npmNotFound"),
        helpLink: constants_1.Constants.SPFX_HELP_LINK,
    });
}
exports.NpmNotFoundError = NpmNotFoundError;
function NpmVersionNotSupportedError(version) {
    return new teamsfx_api_1.UserError({
        source: constants_1.Constants.PLUGIN_NAME,
        name: "NpmVersionNotSupported",
        message: localizeUtils_1.getDefaultString("plugins.spfx.error.npmVersionNotSupported", version, constants_1.Constants.SPFX_VERSION),
        displayMessage: localizeUtils_1.getLocalizedString("plugins.spfx.error.npmVersionNotSupported", version, constants_1.Constants.SPFX_VERSION),
        helpLink: constants_1.Constants.SPFX_HELP_LINK,
    });
}
exports.NpmVersionNotSupportedError = NpmVersionNotSupportedError;
function NodeVersionNotSupportedError(version) {
    return new teamsfx_api_1.UserError({
        source: constants_1.Constants.PLUGIN_NAME,
        name: "NodeVersionNotSupported",
        message: localizeUtils_1.getDefaultString("plugins.spfx.error.nodeVersionNotSupported", version, constants_1.Constants.SPFX_VERSION),
        displayMessage: localizeUtils_1.getLocalizedString("plugins.spfx.error.nodeVersionNotSupported", version, constants_1.Constants.SPFX_VERSION),
        helpLink: constants_1.Constants.SPFX_HELP_LINK,
    });
}
exports.NodeVersionNotSupportedError = NodeVersionNotSupportedError;
function NpmInstallError(error) {
    return new teamsfx_api_1.SystemError(constants_1.Constants.PLUGIN_NAME, "NpmInstallFailed", localizeUtils_1.getDefaultString("plugins.spfx.error.npmInstallFailed", error.message), localizeUtils_1.getLocalizedString("plugins.spfx.error.npmInstallFailed", error.message));
}
exports.NpmInstallError = NpmInstallError;
function DependencyValidateError(dependency) {
    return new teamsfx_api_1.SystemError(constants_1.Constants.PLUGIN_NAME, "InvalidDependency", localizeUtils_1.getDefaultString("plugins.spfx.error.invalidDependency", dependency), localizeUtils_1.getLocalizedString("plugins.spfx.error.invalidDependency", dependency));
}
exports.DependencyValidateError = DependencyValidateError;
function DependencyInstallError(dependency) {
    return new teamsfx_api_1.SystemError(constants_1.Constants.PLUGIN_NAME, "DependencyInstallFailed", localizeUtils_1.getDefaultString("plugins.spfx.error.installDependency", dependency), localizeUtils_1.getLocalizedString("plugins.spfx.error.installDependency", dependency));
}
exports.DependencyInstallError = DependencyInstallError;
function NoConfigurationError() {
    return new teamsfx_api_1.UserError({
        source: constants_1.Constants.PLUGIN_NAME,
        name: "NoConfigurationFile",
        message: localizeUtils_1.getDefaultString("plugins.spfx.error.noConfiguration"),
        displayMessage: localizeUtils_1.getLocalizedString("plugins.spfx.error.noConfiguration"),
        helpLink: constants_1.Constants.SPFX_HELP_LINK,
    });
}
exports.NoConfigurationError = NoConfigurationError;
//# sourceMappingURL=error.js.map