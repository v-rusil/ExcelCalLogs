"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureFunctionResource = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const workflow_1 = require("../../workflow");
const constants_1 = require("../../constants");
const azureAppService_1 = require("./azureAppService");
const error_1 = require("../../error");
const tools_1 = require("../../../common/tools");
const lib_1 = require("@feathersjs/hooks/lib");
const actionExecutionMW_1 = require("../../middleware/actionExecutionMW");
const messages_1 = require("../../messages");
const azureLibs_1 = require("./azureLibs");
const ErrorSource = "Functions";
let AzureFunctionResource = class AzureFunctionResource extends azureAppService_1.AzureAppService {
    constructor() {
        super(...arguments);
        this.name = "azure-function";
        this.alias = ErrorSource;
        this.displayName = "Azure Functions";
        this.bicepModuleName = "azureFunction";
        this.outputs = constants_1.FunctionOutputs;
        this.finalOutputKeys = ["resourceId", "endpoint"];
        this.templateContext = {
            identity: {
                resourceId: constants_1.IdentityOutputs.identityResourceId.bicepVariable,
            },
        };
    }
    async configure(context, inputs) {
        var e_1, _a;
        var _b;
        if (!this.needConfigure(context)) {
            return teamsfx_api_1.ok(undefined);
        }
        context.logProvider.info(messages_1.LogMessages.updateFunctionAppSettings);
        const resourceId = error_1.CheckThrowSomethingMissing(this.alias, "resourceId", (_b = context.envInfo.state[constants_1.ComponentNames.TeamsApi]) === null || _b === void 0 ? void 0 : _b[constants_1.FunctionOutputs.resourceId.key]);
        const credentials = error_1.CheckThrowSomethingMissing(this.alias, "Azure account", await context.tokenProvider.azureAccountProvider.getIdentityCredentialAsync());
        const resourceGroupName = tools_1.getResourceGroupNameFromResourceId(resourceId);
        const functionAppName = tools_1.getSiteNameFromResourceId(resourceId);
        const subscriptionId = tools_1.getSubscriptionIdFromResourceId(resourceId);
        const client = azureLibs_1.AzureClientFactory.getWebSiteManagementClient(credentials, subscriptionId);
        let site = undefined;
        try {
            for (var _c = tslib_1.__asyncValues(client.webApps.listByResourceGroup(resourceGroupName).byPage()), _d; _d = await _c.next(), !_d.done;) {
                const page = _d.value;
                for (const webApp of page) {
                    if (webApp.name === functionAppName) {
                        site = webApp;
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) await _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (!site) {
            throw new error_1.FindFunctionAppError(this.alias);
        }
        const settings = await client.webApps.listApplicationSettings(resourceGroupName, functionAppName);
        if (settings === null || settings === void 0 ? void 0 : settings.properties) {
            Object.entries(settings.properties).forEach((kv) => {
                this.pushAppSettings(site, kv[0], kv[1], false);
            });
        }
        this.collectFunctionAppSettings(context, site);
        await client.webApps.update(resourceGroupName, functionAppName, site);
        return teamsfx_api_1.ok(undefined);
    }
    async deploy(context, inputs) {
        let resourceIdKey = this.outputs.resourceId.key;
        if (inputs.componentId === constants_1.ComponentNames.TeamsBot) {
            const state = context.envInfo.state[inputs.componentId];
            if (!state[resourceIdKey]) {
                if (state["resourceId"]) {
                    resourceIdKey = "resourceId";
                }
                else if (state["botWebAppResourceId"]) {
                    resourceIdKey = "botWebAppResourceId";
                }
            }
        }
        return await super.deploy(context, inputs, true, resourceIdKey);
    }
    needConfigure(context) {
        var _a;
        const func = workflow_1.getComponentByScenario(context.projectSetting, constants_1.ComponentNames.Function, constants_1.Scenarios.Api);
        return (context.envInfo.envName !== "local" && !!((_a = func === null || func === void 0 ? void 0 : func.connections) === null || _a === void 0 ? void 0 : _a.includes(constants_1.ComponentNames.APIM)));
    }
    collectFunctionAppSettings(ctx, site) {
        const apimConfig = ctx.envInfo.state[constants_1.ComponentNames.APIM];
        if (apimConfig) {
            // Logger.info(InfoMessages.dependPluginDetected(ComponentNames.APIM));
            const clientId = error_1.CheckThrowSomethingMissing(this.alias, "APIM app Id", apimConfig[constants_1.APIMOutputs.apimClientAADClientId.key]);
            this.ensureFunctionAllowAppIds(site, [clientId]);
        }
    }
    ensureFunctionAllowAppIds(site, clientIds) {
        var _a, _b;
        if (!site.siteConfig) {
            site.siteConfig = {};
        }
        const rawOldClientIds = (_b = (_a = site.siteConfig.appSettings) === null || _a === void 0 ? void 0 : _a.find((kv) => kv.name === constants_1.FunctionAppSetting.keys.allowedAppIds)) === null || _b === void 0 ? void 0 : _b.value;
        const oldClientIds = rawOldClientIds
            ? rawOldClientIds.split(constants_1.FunctionAppSetting.allowedAppIdSep).filter((e) => e)
            : [];
        for (const id of oldClientIds) {
            if (!clientIds.includes(id)) {
                clientIds.push(id);
            }
        }
        this.pushAppSettings(site, constants_1.FunctionAppSetting.keys.allowedAppIds, clientIds.join(constants_1.FunctionAppSetting.allowedAppIdSep), true);
    }
    pushAppSettings(site, newName, newValue, replace = true) {
        if (!site.siteConfig) {
            site.siteConfig = {};
        }
        if (!site.siteConfig.appSettings) {
            site.siteConfig.appSettings = [];
        }
        const kv = site.siteConfig.appSettings.find((kv) => kv.name === newName);
        if (!kv) {
            site.siteConfig.appSettings.push({
                name: newName,
                value: newValue,
            });
        }
        else if (replace) {
            kv.value = newValue;
        }
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            errorSource: ErrorSource,
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AzureFunctionResource.prototype, "configure", null);
AzureFunctionResource = tslib_1.__decorate([
    typedi_1.Service("azure-function")
], AzureFunctionResource);
exports.AzureFunctionResource = AzureFunctionResource;
//# sourceMappingURL=azureFunction.js.map