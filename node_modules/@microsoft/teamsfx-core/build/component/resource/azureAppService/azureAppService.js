"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureAppService = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const utils_1 = require("../../../common/azure-hosting/utils");
const utils = tslib_1.__importStar(require("./common"));
const error_1 = require("../../error");
const azureResource_1 = require("./../azureResource");
const messages_1 = require("../../messages");
const azureOps_1 = require("../../../common/azure-hosting/azureOps");
const tools_1 = require("../../../common/tools");
class AzureAppService extends azureResource_1.AzureResource {
    async deploy(context, inputs, restart = false, givenResourceIdKey) {
        const progressBar = context.userInteraction.createProgressBar(messages_1.ProgressTitles.deploying(this.displayName, inputs.scenario), 2);
        await progressBar.start();
        try {
            // Preconditions checking.
            if (!inputs.projectPath || !inputs.artifactFolder) {
                throw new error_1.PreconditionError(this.alias, messages_1.ErrorMessage.WorkingDirIsMissing, []);
            }
            const publishDir = path.resolve(inputs.projectPath, inputs.artifactFolder);
            const packDirExisted = await fs_extra_1.default.pathExists(publishDir);
            if (!packDirExisted) {
                throw new error_1.PackDirectoryExistenceError(this.alias);
            }
            const state = context.envInfo.state[inputs.componentId];
            const resourceIdKey = givenResourceIdKey || this.outputs.resourceId.key;
            const resourceId = error_1.CheckThrowSomethingMissing(this.name, resourceIdKey, state[resourceIdKey]);
            await progressBar.next(messages_1.ProgressMessages.packingCode);
            const zipBuffer = await utils.zipFolderAsync(publishDir, "");
            const client = await utils_1.azureWebSiteDeploy(resourceId, context.tokenProvider, zipBuffer, context.logProvider, progressBar);
            if (restart) {
                await azureOps_1.AzureOperations.restartWebApp(client, tools_1.getResourceGroupNameFromResourceId(resourceId), tools_1.getSiteNameFromResourceId(resourceId), context.logProvider);
            }
        }
        finally {
            progressBar.end(true);
        }
        return teamsfx_api_1.ok(undefined);
    }
}
exports.AzureAppService = AzureAppService;
//# sourceMappingURL=azureAppService.js.map