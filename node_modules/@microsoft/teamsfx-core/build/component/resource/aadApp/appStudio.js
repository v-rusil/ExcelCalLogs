"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStudio = void 0;
const tslib_1 = require("tslib");
const errors_1 = require("./errors");
const axios_1 = tslib_1.__importDefault(require("axios"));
const constants_1 = require("../appManifest/constants");
const baseUrl = constants_1.getAppStudioEndpoint();
// eslint-disable-next-line @typescript-eslint/no-namespace
var AppStudio;
(function (AppStudio) {
    async function createAADAppV2(appStudioToken, aadApp) {
        if (!aadApp) {
            throw new Error(`${errors_1.AppStudioErrorMessage.CreateFailed}: ${errors_1.AppStudioErrorMessage.AppDefinitionIsNull}.`);
        }
        const instance = initAxiosInstance(appStudioToken);
        const response = await instance.post(`${baseUrl}/api/aadapp/v2`, aadApp);
        if (response && response.data) {
            const app = response.data;
            if (app) {
                return app;
            }
        }
        throw new Error(`${errors_1.AppStudioErrorMessage.CreateFailed}: ${errors_1.AppStudioErrorMessage.EmptyResponse}.`);
    }
    AppStudio.createAADAppV2 = createAADAppV2;
    async function updateAADApp(appStudioToken, appId, aadApp) {
        if (!aadApp) {
            throw new Error(`${errors_1.AppStudioErrorMessage.UpdateFailed}: ${errors_1.AppStudioErrorMessage.AppDefinitionIsNull}.`);
        }
        if (!appId) {
            throw new Error(`${errors_1.AppStudioErrorMessage.UpdateFailed}: ${errors_1.AppStudioErrorMessage.AppObjectIdIsNull}.`);
        }
        const instance = initAxiosInstance(appStudioToken);
        await instance.post(`${baseUrl}/api/aadapp/${appId}`, aadApp);
    }
    AppStudio.updateAADApp = updateAADApp;
    async function createAADAppPassword(appStudioToken, aadAppObjectId) {
        if (!aadAppObjectId) {
            throw new Error(`${errors_1.AppStudioErrorMessage.CreateSecretFailed}: ${errors_1.AppStudioErrorMessage.AppObjectIdIsNull}.`);
        }
        const instance = initAxiosInstance(appStudioToken);
        const response = await instance.post(`${baseUrl}/api/aadapp/${aadAppObjectId}/passwords`);
        if (response && response.data) {
            const app = response.data;
            if (app) {
                return app;
            }
        }
        throw new Error(`${errors_1.AppStudioErrorMessage.CreateSecretFailed}: ${errors_1.AppStudioErrorMessage.EmptyResponse}.`);
    }
    AppStudio.createAADAppPassword = createAADAppPassword;
    async function getAadApp(appStudioToken, aadAppObjectId) {
        if (!aadAppObjectId) {
            throw new Error(`${errors_1.AppStudioErrorMessage.GetFailed}: ${errors_1.AppStudioErrorMessage.AppObjectIdIsNull}.`);
        }
        const instance = initAxiosInstance(appStudioToken);
        const response = await instance.get(`${baseUrl}/api/aadapp/v2/${aadAppObjectId}`);
        if (response && response.data) {
            const app = response.data;
            if (app) {
                return app;
            }
        }
        throw new Error(`${errors_1.AppStudioErrorMessage.GetFailed}: ${errors_1.AppStudioErrorMessage.EmptyResponse}.`);
    }
    AppStudio.getAadApp = getAadApp;
    function initAxiosInstance(appStudioToken) {
        const instance = axios_1.default.create({
            baseURL: baseUrl,
        });
        instance.defaults.headers.common["Authorization"] = `Bearer ${appStudioToken}`;
        instance.defaults.headers.common["Client-Source"] = "teamstoolkit";
        instance.interceptors.request.use(function (config) {
            config.params = Object.assign({ teamstoolkit: true }, config.params);
            return config;
        });
        return instance;
    }
})(AppStudio = exports.AppStudio || (exports.AppStudio = {}));
//# sourceMappingURL=appStudio.js.map