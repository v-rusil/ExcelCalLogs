"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphClient = void 0;
const tslib_1 = require("tslib");
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const axios_1 = tslib_1.__importDefault(require("axios"));
const baseUrl = `https://graph.microsoft.com/v1.0`;
// eslint-disable-next-line @typescript-eslint/no-namespace
var GraphClient;
(function (GraphClient) {
    async function createAADApp(graphToken, aadApp) {
        if (!aadApp) {
            throw new Error(`${errors_1.GraphClientErrorMessage.CreateFailed}: ${errors_1.GraphClientErrorMessage.AppDefinitionIsNull}.`);
        }
        const instance = initAxiosInstance(graphToken);
        const response = await instance.post(`${baseUrl}/applications`, aadApp);
        if (response && response.data) {
            const app = response.data;
            if (app) {
                return app;
            }
        }
        throw new Error(`${errors_1.GraphClientErrorMessage.CreateFailed}: ${errors_1.GraphClientErrorMessage.EmptyResponse}.`);
    }
    GraphClient.createAADApp = createAADApp;
    async function updateAADApp(graphToken, objectId, aadApp) {
        if (!aadApp) {
            throw new Error(`${errors_1.GraphClientErrorMessage.UpdateFailed}: ${errors_1.GraphClientErrorMessage.AppDefinitionIsNull}.`);
        }
        if (!objectId) {
            throw new Error(`${errors_1.GraphClientErrorMessage.UpdateFailed}: ${errors_1.GraphClientErrorMessage.AppObjectIdIsNull}.`);
        }
        const instance = initAxiosInstance(graphToken);
        await instance.patch(`${baseUrl}/applications/${objectId}`, aadApp);
    }
    GraphClient.updateAADApp = updateAADApp;
    async function createAadAppSecret(graphToken, objectId) {
        if (!objectId) {
            throw new Error(`${errors_1.GraphClientErrorMessage.CreateSecretFailed}: ${errors_1.GraphClientErrorMessage.AppObjectIdIsNull}.`);
        }
        const instance = initAxiosInstance(graphToken);
        const aadSecretObject = createAadAppSecretObject();
        const response = await instance.post(`${baseUrl}/applications/${objectId}/addPassword`, aadSecretObject);
        if (response && response.data) {
            const app = response.data;
            if (app) {
                return {
                    hint: app.hint,
                    id: app.keyId,
                    endDate: app.endDateTime,
                    startDate: app.startDateTime,
                    value: app.secretText,
                };
            }
        }
        throw new Error(`${errors_1.GraphClientErrorMessage.CreateSecretFailed}: ${errors_1.GraphClientErrorMessage.EmptyResponse}.`);
    }
    GraphClient.createAadAppSecret = createAadAppSecret;
    async function getAadApp(graphToken, objectId) {
        if (!objectId) {
            throw new Error(`${errors_1.GraphClientErrorMessage.GetFailed}: ${errors_1.GraphClientErrorMessage.AppObjectIdIsNull}.`);
        }
        const instance = initAxiosInstance(graphToken);
        const response = await instance.get(`${baseUrl}/applications/${objectId}`);
        if (response && response.data) {
            const app = response.data;
            return app;
        }
        throw new Error(`${errors_1.GraphClientErrorMessage.GetFailed}: ${errors_1.GraphClientErrorMessage.EmptyResponse}.`);
    }
    GraphClient.getAadApp = getAadApp;
    async function getAadOwners(graphToken, objectId) {
        var _a;
        if (!objectId) {
            throw new Error(`${errors_1.GraphClientErrorMessage.CheckPermissionFailed}: ${errors_1.GraphClientErrorMessage.AppObjectIdIsNull}.`);
        }
        const instance = initAxiosInstance(graphToken);
        const response = await instance.get(`${baseUrl}/applications/${objectId}/owners`);
        const aadOwners = [];
        if (response && response.data && response.data.value) {
            for (const aadOwner of response.data.value) {
                aadOwners.push({
                    userObjectId: aadOwner.id,
                    resourceId: objectId,
                    displayName: aadOwner.displayName,
                    // For guest account, aadOwner.userPrincipalName will contains "EXT", thus use mail instead.
                    userPrincipalName: (_a = aadOwner.mail) !== null && _a !== void 0 ? _a : aadOwner.userPrincipalName,
                });
            }
            return aadOwners;
        }
        return undefined;
    }
    GraphClient.getAadOwners = getAadOwners;
    async function checkPermission(graphToken, objectId, userObjectId) {
        if (!userObjectId) {
            throw new Error(`${errors_1.GraphClientErrorMessage.CheckPermissionFailed}: ${errors_1.GraphClientErrorMessage.UserObjectIdIsNull}.`);
        }
        const owners = await getAadOwners(graphToken, objectId);
        const findUser = owners === null || owners === void 0 ? void 0 : owners.find((owner) => owner.userObjectId === userObjectId);
        if (findUser) {
            return true;
        }
        else {
            return false;
        }
    }
    GraphClient.checkPermission = checkPermission;
    async function grantPermission(graphToken, objectId, userObjectId) {
        if (!objectId) {
            throw new Error(`${errors_1.GraphClientErrorMessage.GrantPermissionFailed}: ${errors_1.GraphClientErrorMessage.AppObjectIdIsNull}.`);
        }
        if (!userObjectId) {
            throw new Error(`${errors_1.GraphClientErrorMessage.GrantPermissionFailed}: ${errors_1.GraphClientErrorMessage.UserObjectIdIsNull}.`);
        }
        const instance = initAxiosInstance(graphToken);
        await instance.post(`${baseUrl}/applications/${objectId}/owners/$ref`, {
            "@odata.id": `${baseUrl}/directoryObjects/${userObjectId}`,
        });
    }
    GraphClient.grantPermission = grantPermission;
    function initAxiosInstance(graphToken) {
        const instance = axios_1.default.create({
            baseURL: baseUrl,
        });
        instance.defaults.headers.common["Authorization"] = `Bearer ${graphToken}`;
        return instance;
    }
    GraphClient.initAxiosInstance = initAxiosInstance;
    function createAadAppSecretObject() {
        return {
            passwordCredential: {
                displayName: constants_1.Constants.aadAppPasswordDisplayName,
            },
        };
    }
})(GraphClient = exports.GraphClient || (exports.GraphClient = {}));
//# sourceMappingURL=graph.js.map