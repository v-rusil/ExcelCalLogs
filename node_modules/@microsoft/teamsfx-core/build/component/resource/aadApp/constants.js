"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.UILevels = exports.ConfigFilePath = exports.TemplatePathInfo = exports.ProgressDetail = exports.ProgressTitle = exports.Messages = exports.ConfigKeysOfOtherPlugin = exports.ConfigKeys = exports.Plugins = exports.Telemetry = exports.Constants = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const localizeUtils_1 = require("../../../common/localizeUtils");
class Constants {
}
exports.Constants = Constants;
Constants.oauthAuthorityPrefix = "https://login.microsoftonline.com";
Constants.aadAppMaxLength = 120;
Constants.aadAppPasswordDisplayName = "default";
Constants.INCLUDE_AAD_MANIFEST = "include-aad-manifest";
Constants.AAD_MANIFEST_FILE = "aad-manifest-file";
Constants.localDebugPrefix = "local_";
Constants.AskForEnv = "Which Azure AD app do you want to update permission for?";
Constants.AskForEnvName = "aad-env";
Constants.maxRetryTimes = 10;
Constants.statusCodeUserError = 400;
Constants.statusCodeServerError = 500;
Constants.statusCodeForbidden = 403;
Constants.permissions = {
    name: "Azure AD App",
    owner: "Owner",
    noPermission: "No Permission",
    type: "M365",
};
Constants.appPackageFolder = "templates/appPackage";
Constants.aadManifestTemplateFolder = "plugins/resource/aad/manifest";
Constants.aadManifestTemplateName = "aad.template.json";
Constants.createOwnerDuplicatedMessage = "One or more added object references already exist for the following modified properties: 'owners'.";
Constants.defaultPermissions = {
    resourceAppId: "00000003-0000-0000-c000-000000000000",
    resourceAccess: [
        {
            // permission: email
            id: "64a6cdd6-aab1-4aaf-94b8-3cc8405e90d0",
            type: "Scope",
        },
        {
            // permission: offline_access
            id: "7427e0e9-2fba-42fe-b0c0-848c9e6a8182",
            type: "Scope",
        },
        {
            // permission: openid
            id: "37f7f235-527c-4136-accd-4a02d197296e",
            type: "Scope",
        },
        {
            // permission: profile
            id: "14dad69e-099b-42c9-810b-d002981feec1",
            type: "Scope",
        },
        {
            // permission: User.Read
            id: "e1fe6dd8-ba31-4d61-89e7-88639da4683d",
            type: "Scope",
        },
    ],
};
class Telemetry {
}
exports.Telemetry = Telemetry;
Telemetry.component = "component";
Telemetry.errorCode = "error-code";
Telemetry.errorType = "error-type";
Telemetry.errorMessage = "error-message";
Telemetry.userError = "user";
Telemetry.systemError = "system";
Telemetry.isSuccess = "success";
Telemetry.yes = "yes";
Telemetry.no = "no";
Telemetry.retryTimes = "retry-times";
Telemetry.methodName = "method-name";
Telemetry.appId = "appid";
Telemetry.skip = "skip";
Telemetry.signInAudience = "sign-in-audience";
class Plugins {
}
exports.Plugins = Plugins;
Plugins.pluginName = "AAD App Registration";
Plugins.pluginNameComplex = "fx-resource-aad-app-for-teams";
Plugins.pluginNameShort = "aad";
Plugins.frontendHosting = "fx-resource-frontend-hosting";
Plugins.teamsBot = "fx-resource-bot";
Plugins.localDebug = "fx-resource-local-debug";
Plugins.solution = "solution";
Plugins.auth = "auth";
class ConfigKeys {
}
exports.ConfigKeys = ConfigKeys;
ConfigKeys.applicationIdUri = "applicationIdUris";
ConfigKeys.clientId = "clientId";
ConfigKeys.clientSecret = "clientSecret";
ConfigKeys.objectId = "objectId";
ConfigKeys.oauth2PermissionScopeId = "oauth2PermissionScopeId";
ConfigKeys.frontendEndpoint = "frontendEndpoint";
ConfigKeys.botId = "botId";
ConfigKeys.botEndpoint = "botEndpoint";
ConfigKeys.teamsMobileDesktopAppId = "teamsMobileDesktopAppId";
ConfigKeys.teamsWebAppId = "teamsWebAppId";
ConfigKeys.domain = "domain";
ConfigKeys.endpoint = "endpoint";
ConfigKeys.oauthAuthority = "oauthAuthority";
ConfigKeys.oauthHost = "oauthHost";
ConfigKeys.tenantId = "tenantId";
ConfigKeys.skip = "skipProvision";
ConfigKeys.accessAsUserScopeId = "accessAsUserScopeId";
class ConfigKeysOfOtherPlugin {
}
exports.ConfigKeysOfOtherPlugin = ConfigKeysOfOtherPlugin;
ConfigKeysOfOtherPlugin.frontendHostingDomain = "domain";
ConfigKeysOfOtherPlugin.frontendHostingEndpoint = "endpoint";
ConfigKeysOfOtherPlugin.teamsBotId = "botId";
ConfigKeysOfOtherPlugin.teamsBotIdLocal = "localBotId";
ConfigKeysOfOtherPlugin.teamsBotEndpoint = "siteEndpoint";
ConfigKeysOfOtherPlugin.localDebugTabDomain = "localTabDomain";
ConfigKeysOfOtherPlugin.localDebugTabEndpoint = "localTabEndpoint";
ConfigKeysOfOtherPlugin.localDebugBotEndpoint = "localBotEndpoint";
ConfigKeysOfOtherPlugin.solutionPermissionRequest = "permissionRequest";
ConfigKeysOfOtherPlugin.remoteTeamsAppId = "remoteTeamsAppId";
ConfigKeysOfOtherPlugin.solutionUserInfo = "userInfo";
class Messages {
}
exports.Messages = Messages;
Messages.getLog = (log) => `[${Plugins.pluginName}] ${log}`;
Messages.getEventName = (eventName) => `${eventName}`;
Messages.StartProvision = {
    log: Messages.getLog("Start to provision"),
    telemetry: Messages.getEventName("provision-start"),
};
Messages.EndProvision = {
    log: Messages.getLog("Successfully provision"),
    telemetry: Messages.getEventName("provision"),
};
Messages.StartLocalDebug = {
    log: Messages.getLog("Start to debug"),
    telemetry: Messages.getEventName("local-debug-start"),
};
Messages.EndLocalDebug = {
    log: Messages.getLog("Successfully debug"),
    telemetry: Messages.getEventName("local-debug"),
};
Messages.StartPostProvision = {
    log: Messages.getLog("Start to post-provision"),
    telemetry: Messages.getEventName("post-provision-start"),
};
Messages.EndPostProvision = {
    log: Messages.getLog("Successfully post-provision"),
    telemetry: Messages.getEventName("post-provision"),
};
Messages.StartDeploy = {
    log: Messages.getLog("Start to deploy resources"),
    telemetry: Messages.getEventName("deploy-start"),
};
Messages.EndDeploy = {
    log: Messages.getLog("Successfully deploy resources"),
    telemetry: Messages.getEventName("deploy"),
};
Messages.StartBuildAadManifest = {
    log: Messages.getLog("Start to build aad manifest"),
    telemetry: Messages.getEventName("build-aad-manifest-start"),
};
Messages.EndBuildAadManifest = {
    log: Messages.getLog("Successfully build aad manifest"),
    telemetry: Messages.getEventName("build-aad-manifest"),
};
Messages.StartScaffold = {
    log: Messages.getLog("Start to scaffold resources"),
    telemetry: Messages.getEventName("scaffold-start"),
};
Messages.EndScaffold = {
    log: Messages.getLog("Successfully scaffold resources"),
    telemetry: Messages.getEventName("scaffold"),
};
Messages.StartGenerateArmTemplates = {
    log: Messages.getLog("Start to generate arm templates"),
    telemetry: Messages.getEventName("generate-arm-templates-start"),
};
Messages.EndGenerateArmTemplates = {
    log: Messages.getLog("Successfully generated arm templates"),
    telemetry: Messages.getEventName("generate-arm-templates"),
};
Messages.StartPostLocalDebug = {
    log: Messages.getLog("Start to post debug"),
    telemetry: Messages.getEventName("post-local-debug-start"),
};
Messages.EndPostLocalDebug = {
    log: Messages.getLog("Successfully post debug"),
    telemetry: Messages.getEventName("post-local-debug"),
};
Messages.StartUpdatePermission = {
    log: Messages.getLog("Start to update permission"),
    telemetry: Messages.getEventName("update-permission-start"),
};
Messages.EndUpdatePermission = {
    log: Messages.getLog("Successfully update permission"),
    telemetry: Messages.getEventName("update-permission"),
};
Messages.StartCheckPermission = {
    log: Messages.getLog("Start to check permission"),
    telemetry: Messages.getEventName("check-permission-start"),
};
Messages.EndCheckPermission = {
    log: Messages.getLog("Successfully check permission"),
    telemetry: Messages.getEventName("check-permission"),
};
Messages.StartGrantPermission = {
    log: Messages.getLog("Start to grant permission"),
    telemetry: Messages.getEventName("grant-permission-start"),
};
Messages.EndGrantPermission = {
    log: Messages.getLog("Successfully grant permission"),
    telemetry: Messages.getEventName("grant-permission"),
};
Messages.StartListCollaborator = {
    log: Messages.getLog("Start to list collaborator"),
    telemetry: Messages.getEventName("list-collaborator-start"),
};
Messages.EndListCollaborator = {
    log: Messages.getLog("Successfully list collaborator"),
    telemetry: Messages.getEventName("list-collaborator"),
};
Messages.GetAadAppSuccess = "Successfully get Azure AD app.";
Messages.CreateAadAppSuccess = "Successfully created Azure AD app.";
Messages.CreateAadAppPasswordSuccess = "Successfully created password for Azure AD app.";
Messages.UpdatePermissionSuccess = "Successfully updated permission for Azure AD app.";
Messages.SetAppIdUriSuccess = "Successfully created application id uri for Azure AD app.";
Messages.UpdateRedirectUriSuccess = "Successfully updated redirect uri for Azure AD app.";
Messages.UpdateAppIdUriSuccess = "Successfully updated application id uri for Azure AD app.";
Messages.ParsePermissionSuccess = "Successfully parsed permissions.";
Messages.NoSelection = localizeUtils_1.getLocalizedString("plugins.aad.NoSelection");
Messages.UserCancelled = localizeUtils_1.getLocalizedString("plugins.aad.UserCancelled");
Messages.UpdatePermissionSuccessMessage = localizeUtils_1.getLocalizedString("plugins.aad.UpdatePermissionSuccessMessage");
Messages.SkipProvision = localizeUtils_1.getLocalizedString("plugins.aad.SkipProvision");
Messages.OwnerAlreadyAdded = (userObjectId, objectId) => localizeUtils_1.getLocalizedString("plugins.aad.OwnerAlreadyAdded", userObjectId, objectId);
Messages.StepFailedAndSkipped = (stage, helpMessage) => localizeUtils_1.getLocalizedString("plugins.aad.StepFailedAndSkipped", stage, helpMessage);
Messages.UpdatePermissionHelpMessage = localizeUtils_1.getLocalizedString("plugins.aad.UpdatePermissionHelpMessage");
Messages.UpdateAppIdUriHelpMessage = (appIdUri) => localizeUtils_1.getLocalizedString("plugins.aad.UpdateAppIdUriHelpMessage", appIdUri);
Messages.UpdateRedirectUriHelpMessage = (redirectUri) => localizeUtils_1.getLocalizedString("plugins.aad.UpdateRedirectUriHelpMessage", redirectUri);
Messages.UpdateAadHelpMessage = () => localizeUtils_1.getLocalizedString("plugins.aad.UpdateAadHelpMessage");
class ProgressTitle {
}
exports.ProgressTitle = ProgressTitle;
ProgressTitle.Provision = "Provisioning Azure AD app";
ProgressTitle.ProvisionSteps = 3;
ProgressTitle.PostProvision = "Configuring Azure AD app";
ProgressTitle.PostProvisionSteps = 2;
ProgressTitle.UpdatePermission = "Updating permission for Azure AD app";
ProgressTitle.UpdatePermissionSteps = 1;
ProgressTitle.Deploy = "Deploying Azure AD app";
ProgressTitle.DeploySteps = 1;
ProgressTitle.PostProvisionUsingManifest = "Configuring Azure AD app using manifest";
ProgressTitle.PostProvisionUsingManifestSteps = 1;
class ProgressDetail {
}
exports.ProgressDetail = ProgressDetail;
ProgressDetail.Starting = "Starting";
ProgressDetail.ProvisionAadApp = "Provision Azure AD app";
ProgressDetail.CreateAadAppSecret = "Create secret for Azure AD app";
ProgressDetail.GetAadApp = "Get Azure AD app";
ProgressDetail.UpdateAadApp = "Update AD app";
ProgressDetail.UpdateRedirectUri = "Update redirect uri for Azure AD app";
ProgressDetail.UpdateAppIdUri = "Update application id uri for Azure AD app";
ProgressDetail.UpdatePermission = "Update permission for Azure AD app";
class TemplatePathInfo {
}
exports.TemplatePathInfo = TemplatePathInfo;
TemplatePathInfo.TemplateRelativeDir = path_1.default.join("plugins", "resource", "aad");
TemplatePathInfo.BicepTemplateRelativeDir = path_1.default.join(TemplatePathInfo.TemplateRelativeDir, "bicep");
class ConfigFilePath {
}
exports.ConfigFilePath = ConfigFilePath;
ConfigFilePath.Default = "env.default.json";
ConfigFilePath.LocalSettings = "localSettings.json";
ConfigFilePath.State = (env) => `state.${env}.json`;
ConfigFilePath.Input = (env) => `config.${env}.json`;
class UILevels {
}
exports.UILevels = UILevels;
UILevels.Info = "info";
UILevels.Warn = "warn";
UILevels.Error = "error";
//# sourceMappingURL=constants.js.map