"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateAndParseLanguage = exports.createAuthFiles = exports.convertContext = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const migrate_1 = require("../../migrate");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const constants_1 = require("../../constants");
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const localizeUtils_1 = require("../../../common/localizeUtils");
const templatesUtils_1 = require("../../../common/template-utils/templatesUtils");
const folder_1 = require("../../../folder");
const tools_1 = require("../../../common/tools");
function convertContext(context, inputs) {
    var _a, _b, _c;
    const projectSetting = migrate_1.convertProjectSettingsV3ToV2(context.projectSetting);
    const stateV2 = migrate_1.convertEnvStateV3ToV2(context.envInfo.state);
    (_a = stateV2["fx-resource-aad-app-for-teams"]) !== null && _a !== void 0 ? _a : (stateV2["fx-resource-aad-app-for-teams"] = {});
    const value = teamsfx_api_1.ConfigMap.fromJSON(stateV2);
    const pluginCtx = {
        cryptoProvider: context.cryptoProvider,
        config: new teamsfx_api_1.ConfigMap(),
        logProvider: context.logProvider,
        m365TokenProvider: (_b = context.tokenProvider) === null || _b === void 0 ? void 0 : _b.m365TokenProvider,
        ui: context.userInteraction,
        projectSettings: projectSetting,
        permissionRequestProvider: context.permissionRequestProvider,
        root: inputs.projectPath,
        envInfo: {
            config: (_c = context.envInfo) === null || _c === void 0 ? void 0 : _c.config,
            envName: inputs.env,
            state: value,
        },
    };
    return pluginCtx;
}
exports.convertContext = convertContext;
async function createAuthFiles(input, language, needTab, needBot, isVsProject = false) {
    const projectPath = input.projectPath;
    if (!projectPath) {
        const e = new teamsfx_api_1.SystemError(constants_1.SolutionSource, constants_1.SolutionError.InvalidProjectPath, localizeUtils_1.getLocalizedString("core.addSsoFiles.emptyProjectPath"));
        return teamsfx_api_1.err(e);
    }
    const languageFolderResult = validateAndParseLanguage(language);
    if (languageFolderResult.isErr()) {
        return teamsfx_api_1.err(languageFolderResult.error);
    }
    const languageFolderName = languageFolderResult.value;
    const projectFolderExists = await fs_extra_1.default.pathExists(projectPath);
    if (!projectFolderExists) {
        const e = new teamsfx_api_1.SystemError(constants_1.SolutionSource, constants_1.SolutionError.InvalidProjectPath, localizeUtils_1.getLocalizedString("core.addSsoFiles.projectPathNotExists"));
        return teamsfx_api_1.err(e);
    }
    const authFolder = path_1.default.join(projectPath, tools_1.isV3Enabled() ? constants_1.AddSsoParameters.V3AuthFolder : isVsProject ? "Auth" : "auth");
    const tabFolder = path_1.default.join(authFolder, constants_1.AddSsoParameters.Tab);
    const botFolder = path_1.default.join(authFolder, constants_1.AddSsoParameters.Bot);
    try {
        const authFolderExists = await fs_extra_1.default.pathExists(authFolder);
        if (!authFolderExists) {
            await fs_extra_1.default.ensureDir(authFolder);
        }
        if (tools_1.isV3Enabled()) {
            const templateFolder = folder_1.getTemplatesFolder();
            const v3TemplateFolder = path_1.default.join(templateFolder, constants_1.AddSsoParameters.filePath, constants_1.AddSsoParameters.V3);
            const sampleZip = new adm_zip_1.default();
            sampleZip.addLocalFolder(v3TemplateFolder);
            await templatesUtils_1.unzip(sampleZip, authFolder);
            return teamsfx_api_1.ok(undefined);
        }
        if (needTab) {
            const tabFolderExists = await fs_extra_1.default.pathExists(tabFolder);
            if (!tabFolderExists) {
                await fs_extra_1.default.ensureDir(tabFolder);
            }
            const templateFolder = folder_1.getTemplatesFolder();
            const tabTemplateFolder = path_1.default.join(templateFolder, constants_1.AddSsoParameters.filePath, constants_1.AddSsoParameters.Tab);
            if (isVsProject) {
                // README.md
                const readmeSourcePath = path_1.default.join(tabTemplateFolder, constants_1.AddSsoParameters.ReadmeCSharp);
                const readmeTargetPath = path_1.default.join(tabFolder, constants_1.AddSsoParameters.ReadmeCSharp);
                const readme = await fs_extra_1.default.readFile(readmeSourcePath);
                fs_extra_1.default.writeFile(readmeTargetPath, readme);
                // Sample Code
                const sampleSourceFolder = path_1.default.join(tabTemplateFolder, languageFolderName);
                const sampleZip = new adm_zip_1.default();
                sampleZip.addLocalFolder(sampleSourceFolder);
                await templatesUtils_1.unzip(sampleZip, tabFolder);
                // Update appsettings
                const appSettingsPath = path_1.default.join(projectPath, constants_1.AddSsoParameters.AppSettings);
                const appSettingsDevPath = path_1.default.join(projectPath, constants_1.AddSsoParameters.AppSettingsDev);
                if (await fs_extra_1.default.pathExists(appSettingsPath)) {
                    const appSettings = await fs_extra_1.default.readJson(appSettingsPath);
                    if (!appSettings.TeamsFx) {
                        appSettings.TeamsFx = constants_1.AddSsoParameters.AppSettingsToAdd;
                    }
                    await fs_extra_1.default.writeFile(appSettingsPath, JSON.stringify(appSettings, null, "\t"), "utf-8");
                }
                if (await fs_extra_1.default.pathExists(appSettingsDevPath)) {
                    const appSettings = await fs_extra_1.default.readJson(appSettingsDevPath);
                    if (!appSettings.TeamsFx) {
                        appSettings.TeamsFx = constants_1.AddSsoParameters.AppSettingsToAdd;
                    }
                    await fs_extra_1.default.writeFile(appSettingsDevPath, JSON.stringify(appSettings, null, "\t"), "utf-8");
                }
            }
            else {
                // README.md
                const readmeSourcePath = path_1.default.join(tabTemplateFolder, constants_1.AddSsoParameters.Readme);
                const readmeTargetPath = path_1.default.join(tabFolder, constants_1.AddSsoParameters.Readme);
                const readme = await fs_extra_1.default.readFile(readmeSourcePath);
                fs_extra_1.default.writeFile(readmeTargetPath, readme);
                // Sample Code
                const sampleSourceFolder = path_1.default.join(tabTemplateFolder, languageFolderName);
                const sampleZip = new adm_zip_1.default();
                sampleZip.addLocalFolder(sampleSourceFolder);
                await templatesUtils_1.unzip(sampleZip, tabFolder);
            }
        }
        if (needBot) {
            const botFolderExists = await fs_extra_1.default.pathExists(botFolder);
            if (!botFolderExists) {
                await fs_extra_1.default.ensureDir(botFolder);
            }
            const templateFolder = folder_1.getTemplatesFolder();
            const botTemplateFolder = path_1.default.join(templateFolder, constants_1.AddSsoParameters.filePath, constants_1.AddSsoParameters.Bot);
            if (isVsProject) {
                // README.md
                const readmeSourcePath = path_1.default.join(botTemplateFolder, constants_1.AddSsoParameters.ReadmeCSharp);
                const readmeTargetPath = path_1.default.join(botFolder, constants_1.AddSsoParameters.ReadmeCSharp);
                const readme = await fs_extra_1.default.readFile(readmeSourcePath);
                fs_extra_1.default.writeFile(readmeTargetPath, readme);
                // Sample Code
                const sampleSourceFolder = path_1.default.join(botTemplateFolder, languageFolderName);
                const sampleZip = new adm_zip_1.default();
                sampleZip.addLocalFolder(sampleSourceFolder);
                await templatesUtils_1.unzip(sampleZip, botFolder);
                // Update appsettings
                const appSettingsPath = path_1.default.join(projectPath, constants_1.AddSsoParameters.AppSettings);
                const appSettingsDevPath = path_1.default.join(projectPath, constants_1.AddSsoParameters.AppSettingsDev);
                if (await fs_extra_1.default.pathExists(appSettingsPath)) {
                    const appSettings = await fs_extra_1.default.readJson(appSettingsPath);
                    if (!appSettings.TeamsFx ||
                        !appSettings.TeamsFx.Authentication ||
                        !appSettings.TeamsFx.Authentication.Bot) {
                        appSettings.TeamsFx = constants_1.AddSsoParameters.AppSettingsToAddForBot;
                    }
                    await fs_extra_1.default.writeFile(appSettingsPath, JSON.stringify(appSettings, null, "\t"), "utf-8");
                }
                if (await fs_extra_1.default.pathExists(appSettingsDevPath)) {
                    const appSettings = await fs_extra_1.default.readJson(appSettingsDevPath);
                    if (!appSettings.TeamsFx ||
                        !appSettings.TeamsFx.Authentication ||
                        !appSettings.TeamsFx.Authentication.Bot) {
                        appSettings.TeamsFx = constants_1.AddSsoParameters.AppSettingsToAddForBot;
                    }
                    await fs_extra_1.default.writeFile(appSettingsDevPath, JSON.stringify(appSettings, null, "\t"), "utf-8");
                }
            }
            else {
                // README.md
                const readmeSourcePath = path_1.default.join(botTemplateFolder, constants_1.AddSsoParameters.Readme);
                const readmeTargetPath = path_1.default.join(botFolder, constants_1.AddSsoParameters.Readme);
                const readme = await fs_extra_1.default.readFile(readmeSourcePath);
                fs_extra_1.default.writeFile(readmeTargetPath, readme);
                // Sample Code
                const sampleSourceFolder = path_1.default.join(botTemplateFolder, languageFolderName);
                const sampleZip = new adm_zip_1.default();
                sampleZip.addLocalFolder(sampleSourceFolder);
                await templatesUtils_1.unzip(sampleZip, botFolder);
            }
        }
    }
    catch (error) {
        if (tools_1.isV3Enabled() && (await fs_extra_1.default.pathExists(authFolder))) {
            await fs_extra_1.default.remove(authFolder);
        }
        if (!tools_1.isV3Enabled() && needTab && (await fs_extra_1.default.pathExists(tabFolder))) {
            await fs_extra_1.default.remove(tabFolder);
        }
        if (!tools_1.isV3Enabled() && needBot && (await fs_extra_1.default.pathExists(botFolder))) {
            await fs_extra_1.default.remove(botFolder);
        }
        const e = new teamsfx_api_1.SystemError(constants_1.SolutionSource, constants_1.SolutionError.FailedToCreateAuthFiles, localizeUtils_1.getLocalizedString("core.addSsoFiles.FailedToCreateAuthFiles", error.message));
        return teamsfx_api_1.err(e);
    }
    return teamsfx_api_1.ok(undefined);
}
exports.createAuthFiles = createAuthFiles;
function validateAndParseLanguage(language) {
    if (language.toLowerCase() == constants_1.Language.TypeScript) {
        return teamsfx_api_1.ok("ts");
    }
    if (language.toLowerCase() == constants_1.Language.JavaScript) {
        return teamsfx_api_1.ok("js");
    }
    if (language.toLowerCase() == constants_1.Language.CSharp) {
        return teamsfx_api_1.ok("csharp");
    }
    const e = new teamsfx_api_1.SystemError(constants_1.SolutionSource, constants_1.SolutionError.InvalidInput, localizeUtils_1.getLocalizedString("core.addSsoFiles.invalidLanguage"));
    return teamsfx_api_1.err(e);
}
exports.validateAndParseLanguage = validateAndParseLanguage;
//# sourceMappingURL=utils.js.map