"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadAppManifestManager = void 0;
const tslib_1 = require("tslib");
const aadManifestHelper_1 = require("./utils/aadManifestHelper");
const axios_1 = tslib_1.__importDefault(require("axios"));
const errors_1 = require("./errors");
const results_1 = require("./results");
const constants_1 = require("./constants");
const uuid_1 = require("uuid");
const fs = tslib_1.__importStar(require("fs-extra"));
const mustache_1 = tslib_1.__importDefault(require("mustache"));
const tools_1 = require("../../../common/tools");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const path = tslib_1.__importStar(require("path"));
const baseUrl = `https://graph.microsoft.com/v1.0`;
// eslint-disable-next-line @typescript-eslint/no-namespace
var AadAppManifestManager;
(function (AadAppManifestManager) {
    async function createAadApp(graphToken, manifest) {
        const instance = initAxiosInstance(graphToken);
        const aadApp = aadManifestHelper_1.AadManifestHelper.manifestToApplication(manifest);
        deleteUnusedProperties(aadApp);
        const response = await instance.post(`${baseUrl}/applications`, aadApp);
        if (response && response.data) {
            const app = response.data;
            if (app) {
                return aadManifestHelper_1.AadManifestHelper.applicationToManifest(app);
            }
        }
        throw new Error(`${errors_1.GraphClientErrorMessage.CreateFailed}: ${errors_1.GraphClientErrorMessage.EmptyResponse}.`);
    }
    AadAppManifestManager.createAadApp = createAadApp;
    async function updateAadApp(graphToken, manifest) {
        const instance = initAxiosInstance(graphToken);
        const aadApp = aadManifestHelper_1.AadManifestHelper.manifestToApplication(manifest);
        deleteUnusedProperties(aadApp);
        await instance.patch(`${baseUrl}/applications/${manifest.id}`, aadApp);
        return manifest;
    }
    AadAppManifestManager.updateAadApp = updateAadApp;
    async function getAadAppManifest(graphToken, objectId) {
        if (!objectId) {
            throw new Error(`${errors_1.GraphClientErrorMessage.GetFailed}: ${errors_1.GraphClientErrorMessage.AppObjectIdIsNull}.`);
        }
        const instance = initAxiosInstance(graphToken);
        const response = await instance.get(`${baseUrl}/applications/${objectId}`);
        if (response && response.data) {
            const app = response.data;
            return aadManifestHelper_1.AadManifestHelper.applicationToManifest(app);
        }
        throw new Error(`${errors_1.GraphClientErrorMessage.GetFailed}: ${errors_1.GraphClientErrorMessage.EmptyResponse}.`);
    }
    AadAppManifestManager.getAadAppManifest = getAadAppManifest;
    function initAxiosInstance(graphToken) {
        const instance = axios_1.default.create({
            baseURL: baseUrl,
        });
        instance.defaults.headers.common["Authorization"] = `Bearer ${graphToken}`;
        return instance;
    }
    AadAppManifestManager.initAxiosInstance = initAxiosInstance;
    async function loadAadManifest(ctx) {
        const appDir = await tools_1.getAppDirectory(ctx.root);
        const manifestFilePath = `${appDir}/${constants_1.Constants.aadManifestTemplateName}`;
        if (!(await fs.pathExists(manifestFilePath))) {
            throw results_1.ResultFactory.UserError(errors_1.AadManifestNotFoundError.name, errors_1.AadManifestNotFoundError.message());
        }
        try {
            let manifestString = await fs.readFile(manifestFilePath, "utf8");
            const stateObject = JSON.parse(JSON.stringify(fromEntries(ctx.envInfo.state)));
            const aadKey = "fx-resource-aad-app-for-teams";
            if (!stateObject[aadKey].oauth2PermissionScopeId) {
                stateObject[aadKey].oauth2PermissionScopeId = uuid_1.v4();
            }
            const view = {
                config: ctx.envInfo.config,
                state: stateObject,
                env: process.env,
            };
            mustache_1.default.escape = (value) => value;
            manifestString = mustache_1.default.render(manifestString, view, undefined, {});
            const manifest = JSON.parse(manifestString);
            manifest.identifierUris = manifest.identifierUris.filter((item) => !!item);
            manifest.replyUrlsWithType = manifest.replyUrlsWithType.filter((item) => isValidURL(item.url));
            aadManifestHelper_1.AadManifestHelper.processRequiredResourceAccessInManifest(manifest);
            const warningMsg = aadManifestHelper_1.AadManifestHelper.validateManifest(manifest);
            if (warningMsg) {
                warningMsg.split("\n").forEach((warning) => {
                    var _a;
                    (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.warning(warning);
                });
            }
            return manifest;
        }
        catch (e) {
            if (e.stack &&
                (e.stack.startsWith("SyntaxError") ||
                    e.stack.indexOf("Unknown resourceAccess") >= 0 ||
                    e.stack.indexOf("Unknown resourceAppId") >= 0)) {
                throw results_1.ResultFactory.UserError(errors_1.AadManifestLoadError.name, errors_1.AadManifestLoadError.message(manifestFilePath, e.message));
            }
            throw results_1.ResultFactory.SystemError(errors_1.AadManifestLoadError.name, errors_1.AadManifestLoadError.message(manifestFilePath, e.message));
        }
    }
    AadAppManifestManager.loadAadManifest = loadAadManifest;
    async function writeManifestFileToBuildFolder(manifest, ctx) {
        const aadManifestPath = `${ctx.root}/${teamsfx_api_1.BuildFolderName}/${teamsfx_api_1.AppPackageFolderName}/aad.${ctx.envInfo.envName}.json`;
        const manifestString = JSON.stringify(manifest, null, 4);
        await fs.ensureDir(path.dirname(aadManifestPath));
        await fs.writeFile(aadManifestPath, manifestString, "utf8");
    }
    AadAppManifestManager.writeManifestFileToBuildFolder = writeManifestFileToBuildFolder;
    function fromEntries(iterable) {
        return [...iterable].reduce((obj, [key, val]) => {
            obj[key] = val;
            return obj;
        }, {});
    }
    function deleteUnusedProperties(aadApp) {
        var _a, _b;
        delete aadApp.id;
        delete aadApp.appId;
        (_b = (_a = aadApp.api) === null || _a === void 0 ? void 0 : _a.oauth2PermissionScopes) === null || _b === void 0 ? void 0 : _b.forEach((item) => {
            delete item.lang;
            delete item.origin;
        });
    }
    function isValidURL(url) {
        try {
            const urlObj = new URL(url);
            // "customSchema://" is valid URL but not a valid redirect URL
            if (urlObj.protocol !== "http:" && urlObj.protocol !== "https:") {
                // trim end "/" characters
                const trimmedUrl = url.replace(/\/+$/g, "");
                if (trimmedUrl.endsWith(":")) {
                    return false;
                }
                else {
                    return true;
                }
            }
            return true;
        }
        catch (err) {
            return false;
        }
    }
})(AadAppManifestManager = exports.AadAppManifestManager || (exports.AadAppManifestManager = {}));
//# sourceMappingURL=aadAppManifestManager.js.map