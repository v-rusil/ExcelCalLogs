import { Bicep, CloudResource, ContextV3, FxError, InputsWithProjectPath, ResourceContextV3, Result } from "@microsoft/teamsfx-api";
import "reflect-metadata";
import { AadOwner, ResourcePermission } from "../../../common/permissionInterface";
import { AppUser } from "../appManifest/interfaces/appUser";
export declare class AadApp implements CloudResource {
    readonly type = "cloud";
    readonly name: string;
    outputs: {
        applicationIdUris: {
            key: string;
        };
        clientId: {
            key: string;
        };
        clientSecret: {
            key: string;
        };
        objectId: {
            key: string;
        };
        oauth2PermissionScopeId: {
            key: string;
        };
        frontendEndpoint: {
            key: string;
        };
        botId: {
            key: string;
        };
        botEndpoint: {
            key: string;
        };
        domain: {
            key: string;
        };
        endpoint: {
            key: string;
        };
        oauthAuthority: {
            key: string;
        };
        oauthHost: {
            key: string;
        };
        tenantId: {
            key: string;
        };
    };
    finalOutputKeys: string[];
    secretFields: string[];
    generateManifest(context: ContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
    generateAuthFiles(context: ContextV3, inputs: InputsWithProjectPath, needTab: boolean, needBot: boolean): Promise<Result<undefined, FxError>>;
    generateBicep(context: ContextV3, inputs: InputsWithProjectPath): Promise<Result<Bicep[], FxError>>;
    provision(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
    configure(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
    setApplicationInContext(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
    deploy(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
    buildAadManifest(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
    listCollaborator(ctx: ContextV3, aadObjectIdV3?: string): Promise<Result<AadOwner[], FxError>>;
    grantPermission(ctx: ContextV3, userInfo: AppUser, aadObjectIdV3?: string): Promise<Result<ResourcePermission[], FxError>>;
    checkPermission(ctx: ContextV3, userInfo: AppUser, aadObjectIdV3?: string): Promise<Result<ResourcePermission[], FxError>>;
    private setState;
    private runWithExceptionCatchingAsync;
    private returnError;
}
//# sourceMappingURL=aadApp.d.ts.map