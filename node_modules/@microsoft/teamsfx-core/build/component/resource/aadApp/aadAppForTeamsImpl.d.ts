import { ContextV3, FxError, LogProvider, PluginContext, Result } from "@microsoft/teamsfx-api";
import { AadResult } from "./results";
import { IAADDefinition, RequiredResourceAccess } from "./interfaces/IAADDefinition";
import { AadOwner, ResourcePermission } from "../../../common/permissionInterface";
import { AppUser } from "../appManifest/interfaces/appUser";
import { AADManifest } from "./interfaces/AADManifest";
export declare class AadAppForTeamsImpl {
    provision(ctx: PluginContext, isLocalDebug?: boolean): Promise<AadResult>;
    provisionUsingManifest(ctx: PluginContext, isLocalDebug?: boolean): Promise<AadResult>;
    private getScopeIdForTeams;
    setApplicationInContext(ctx: PluginContext, isLocalDebug?: boolean): AadResult;
    postProvision(ctx: PluginContext, isLocalDebug?: boolean): Promise<AadResult>;
    postProvisionUsingManifest(ctx: PluginContext, isLocalDebug?: boolean): Promise<AadResult>;
    checkPermission(ctx: ContextV3, userInfo: AppUser, aadObjectIdV3?: string): Promise<Result<ResourcePermission[], FxError>>;
    listCollaborator(ctx: ContextV3, aadObjectIdV3?: string): Promise<Result<AadOwner[], FxError>>;
    grantPermission(ctx: ContextV3, userInfo: AppUser, aadObjectIdV3?: string): Promise<Result<ResourcePermission[], FxError>>;
    static getRedirectUris(frontendEndpoint: string | undefined, botEndpoint: string | undefined, clientId: string, isVs?: boolean): IAADDefinition;
    static parsePermission(permissionRequest: string, logProvider?: LogProvider): RequiredResourceAccess[];
    private static generateRequiredResourceAccess;
    scaffold(ctx: PluginContext): Promise<AadResult>;
    deploy(ctx: PluginContext): Promise<Result<any, FxError>>;
    loadAndBuildManifest(ctx: PluginContext): Promise<AADManifest>;
    private validateDeployManifest;
}
//# sourceMappingURL=aadAppForTeamsImpl.d.ts.map