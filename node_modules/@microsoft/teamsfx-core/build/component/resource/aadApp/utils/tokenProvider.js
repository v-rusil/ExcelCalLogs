"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenProvider = exports.TokenAudience = void 0;
const results_1 = require("../results");
const errors_1 = require("../errors");
const tools_1 = require("../../../../common/tools");
var TokenAudience;
(function (TokenAudience) {
    TokenAudience["Graph"] = "graph";
    TokenAudience["AppStudio"] = "appStudio";
})(TokenAudience = exports.TokenAudience || (exports.TokenAudience = {}));
class GraphInstance {
    async getToken(tokenProvider) {
        var _a;
        const tokenRes = await ((_a = tokenProvider.m365) === null || _a === void 0 ? void 0 : _a.getAccessToken({ scopes: tools_1.GraphScopes }));
        const token = (tokenRes === null || tokenRes === void 0 ? void 0 : tokenRes.isOk()) ? tokenRes.value : undefined;
        return token;
    }
    async getTenant(tokenProvider) {
        var _a;
        const tokenObjectRes = await ((_a = tokenProvider.m365) === null || _a === void 0 ? void 0 : _a.getJsonObject({ scopes: tools_1.GraphScopes }));
        const tokenObject = (tokenObjectRes === null || tokenObjectRes === void 0 ? void 0 : tokenObjectRes.isOk()) ? tokenObjectRes.value : undefined;
        if (!tokenObject) {
            return undefined;
        }
        const tenantId = tokenObject.tid;
        return tenantId;
    }
}
class AppStudioInstance {
    async getToken(tokenProvider) {
        var _a;
        const tokenRes = await ((_a = tokenProvider.m365) === null || _a === void 0 ? void 0 : _a.getAccessToken({ scopes: tools_1.AppStudioScopes }));
        const token = (tokenRes === null || tokenRes === void 0 ? void 0 : tokenRes.isOk()) ? tokenRes.value : undefined;
        return token;
    }
    async getTenant(tokenProvider) {
        var _a;
        const tokenObjectRes = await ((_a = tokenProvider.m365) === null || _a === void 0 ? void 0 : _a.getJsonObject({ scopes: tools_1.AppStudioScopes }));
        const tokenObject = (tokenObjectRes === null || tokenObjectRes === void 0 ? void 0 : tokenObjectRes.isOk()) ? tokenObjectRes.value : undefined;
        if (!tokenObject) {
            return undefined;
        }
        const tenantId = tokenObject.tid;
        return tenantId;
    }
}
class TokenProvider {
    static async init(tokenProvider, audience = TokenAudience.Graph) {
        this.audience = audience;
        let instance;
        if (audience === TokenAudience.AppStudio) {
            instance = new AppStudioInstance();
        }
        else {
            instance = new GraphInstance();
        }
        const token = await instance.getToken(tokenProvider);
        if (token) {
            TokenProvider.token = token;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetTokenError.name, errors_1.GetTokenError.message(this.audience));
        }
        const tenantId = await instance.getTenant(tokenProvider);
        if (tenantId) {
            this.tenantId = tenantId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.TenantNotExistError.name, errors_1.TenantNotExistError.message());
        }
    }
}
exports.TokenProvider = TokenProvider;
//# sourceMappingURL=tokenProvider.js.map