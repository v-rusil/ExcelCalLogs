import { ConfigValue, Result, FxError, v3, M365TokenProvider, LogProvider, PluginContext, v2 } from "@microsoft/teamsfx-api";
import { Messages } from "../constants";
import { IAADDefinition } from "../interfaces/IAADDefinition";
export declare class Utils {
    static addLogAndTelemetryWithLocalDebug(logProvider: LogProvider | undefined, message: Messages, messageLocal: Messages, isLocalDebug?: boolean, properties?: {
        [key: string]: string;
    }): void;
    static addLogAndTelemetry(logProvider: LogProvider | undefined, message: Messages, properties?: {
        [key: string]: string;
    }): void;
    static addLocalDebugPrefix(isLocalDebug: boolean, key: string): string;
    static getConfigFileName(envName?: string): string;
    static getInputFileName(envName: string): string;
    static getCurrentTenantId(m365TokenProvider?: M365TokenProvider): Promise<string>;
    static skipCreateAadForProvision(envInfo: v3.EnvInfoV3): boolean;
    static skipCreateAadForLocalProvision(localSettings: v2.LocalSettings): boolean;
    static skipAADProvision(ctx: PluginContext, isLocalDebug?: boolean): boolean;
    static parseRedirectUriMessage(redirectUris: IAADDefinition): string;
}
export declare class ConfigUtils {
    static getAadConfig(ctx: PluginContext, key: string, isLocalDebug?: boolean): string | undefined;
    static getLocalDebugConfigOfOtherPlugins(ctx: PluginContext, key: string): string | undefined;
    static checkAndSaveConfig(ctx: PluginContext, key: string, value: ConfigValue, isLocalDebug?: boolean): void;
    static getPermissionRequest(ctx: PluginContext): Promise<string>;
}
export declare class ProvisionConfig {
    displayName?: string;
    permissionRequest?: string;
    clientId?: string;
    password?: string;
    objectId?: string;
    oauth2PermissionScopeId?: string;
    private isLocalDebug;
    constructor(isLocalDebug?: boolean, generateScopeId?: boolean);
    restoreConfigFromLocalSettings(ctx: v2.Context, inputs: v2.InputsWithProjectPath, localSettings: v2.LocalSettings): Promise<Result<any, FxError>>;
    restoreConfigFromEnvInfo(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3): Promise<Result<any, FxError>>;
    restoreConfigFromContext(ctx: PluginContext): Promise<void>;
    saveConfigIntoContext(ctx: PluginContext, tenantId: string): void;
    saveConfigIntoLocalSettings(localSettings: v2.LocalSettings, tenantId: string): void;
    saveConfigIntoEnvInfo(envInfo: v3.EnvInfoV3, tenantId: string): void;
    private static getOauthAuthority;
    private setDisplayName;
}
export declare class SetApplicationInContextConfig {
    frontendDomain?: string;
    frontendEndpoint?: string;
    botId?: string;
    botEndpoint?: string;
    clientId?: string;
    applicationIdUri?: string;
    private isLocalDebug;
    constructor(isLocalDebug?: boolean);
    restoreConfigFromContext(ctx: PluginContext): void;
    restoreConfigFromLocalSettings(localSettings: v2.LocalSettings): void;
    restoreConfigFromEnvInfo(ctx: v2.Context, envInfo: v3.EnvInfoV3): void;
    saveConfigIntoContext(ctx: PluginContext, frontendDomain: string | undefined, botId: string | undefined, botEndpoint: string | undefined): void;
}
export declare class PostProvisionConfig {
    frontendEndpoint?: string;
    botEndpoint?: string;
    objectId?: string;
    clientId?: string;
    applicationIdUri?: string;
    private isLocalDebug;
    constructor(isLocalDebug?: boolean);
    restoreConfigFromLocalSettings(localSettings: v2.LocalSettings): void;
    restoreConfigFromEnvInfo(ctx: v2.Context, envInfo: v3.EnvInfoV3): void;
    restoreConfigFromContext(ctx: PluginContext): Promise<void>;
}
export declare class UpdatePermissionConfig {
    objectId?: string;
    permissionRequest?: string;
    private isLocalDebug;
    constructor(isLocalDebug?: boolean);
    restoreConfigFromContext(ctx: PluginContext): Promise<void>;
}
export declare class CheckGrantPermissionConfig {
    objectId?: string;
    isGrantPermission: boolean;
    constructor(isGrantPermission?: boolean);
    restoreConfigFromContext(ctx: PluginContext): Promise<void>;
}
export declare function getPermissionErrorMessage(message: string, isGrantPermission?: boolean, objectId?: string): string;
//# sourceMappingURL=configs.d.ts.map