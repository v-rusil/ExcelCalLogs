"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryUtils = void 0;
const globalVars_1 = require("../../../../core/globalVars");
const constants_1 = require("../constants");
class TelemetryUtils {
    static init(ctx) { }
    static sendEvent(eventName, properties, measurements) {
        var _a;
        if (!properties) {
            properties = {};
        }
        properties[constants_1.Telemetry.component] = constants_1.Plugins.pluginNameComplex;
        TelemetryUtils.addAppIdInProperty(properties);
        (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendSuccessEvent(eventName, properties, measurements) {
        if (!properties) {
            properties = {};
        }
        properties[constants_1.Telemetry.isSuccess] = constants_1.Telemetry.yes;
        TelemetryUtils.sendEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(eventName, errorName, errorType, errorMessage, properties, measurements) {
        var _a;
        if (!properties) {
            properties = {};
        }
        properties[constants_1.Telemetry.component] = constants_1.Plugins.pluginNameComplex;
        properties[constants_1.Telemetry.errorCode] = `${constants_1.Plugins.pluginNameShort}.${errorName}`;
        properties[constants_1.Telemetry.errorType] = errorType;
        properties[constants_1.Telemetry.errorMessage] = errorMessage;
        properties[constants_1.Telemetry.isSuccess] = constants_1.Telemetry.no;
        TelemetryUtils.addAppIdInProperty(properties);
        (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, properties, measurements);
    }
    static addAppIdInProperty(properties) {
        const appId = globalVars_1.globalVars.teamsAppId || "";
        properties[constants_1.Telemetry.appId] = appId;
    }
}
exports.TelemetryUtils = TelemetryUtils;
TelemetryUtils.getErrorProperty = (errorType, errorMessage) => {
    return {
        "error-type": errorType,
        "error-message": errorMessage,
    };
};
//# sourceMappingURL=telemetry.js.map