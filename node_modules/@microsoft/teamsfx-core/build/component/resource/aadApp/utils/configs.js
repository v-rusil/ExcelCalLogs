"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPermissionErrorMessage = exports.CheckGrantPermissionConfig = exports.UpdatePermissionConfig = exports.PostProvisionConfig = exports.SetApplicationInContextConfig = exports.ProvisionConfig = exports.ConfigUtils = exports.Utils = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../constants");
const errors_1 = require("../errors");
const format_1 = require("./format");
const uuid_1 = require("uuid");
const localSettingsConstants_1 = require("../../../../common/localSettingsConstants");
const telemetry_1 = require("./telemetry");
const results_1 = require("../results");
const permissions_1 = require("../permissions");
const utils_1 = require("../../../../common/utils");
const constants_2 = require("../../../../component/constants");
const tools_1 = require("../../../../common/tools");
const aadComponentKey = constants_2.ComponentNames.AadApp;
const tabComponentKey = constants_2.ComponentNames.TeamsTab;
const botComponentKey = constants_2.ComponentNames.TeamsBot;
class Utils {
    static addLogAndTelemetryWithLocalDebug(logProvider, message, messageLocal, isLocalDebug = false, properties) {
        if (!isLocalDebug) {
            logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(message.log);
            telemetry_1.TelemetryUtils.sendSuccessEvent(message.telemetry, properties);
        }
        else {
            logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(messageLocal.log);
            telemetry_1.TelemetryUtils.sendSuccessEvent(messageLocal.telemetry, properties);
        }
    }
    static addLogAndTelemetry(logProvider, message, properties) {
        logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(message.log);
        telemetry_1.TelemetryUtils.sendSuccessEvent(message.telemetry, properties);
    }
    static addLocalDebugPrefix(isLocalDebug, key) {
        return isLocalDebug ? constants_1.Constants.localDebugPrefix + key : key;
    }
    static getConfigFileName(envName) {
        if (!envName) {
            return constants_1.ConfigFilePath.LocalSettings;
        }
        else {
            return constants_1.ConfigFilePath.State(envName);
        }
    }
    static getInputFileName(envName) {
        return constants_1.ConfigFilePath.Input(envName);
    }
    static async getCurrentTenantId(m365TokenProvider) {
        var _a;
        const tokenObjectRes = await (m365TokenProvider === null || m365TokenProvider === void 0 ? void 0 : m365TokenProvider.getJsonObject({ scopes: tools_1.GraphScopes }));
        const tokenObject = (tokenObjectRes === null || tokenObjectRes === void 0 ? void 0 : tokenObjectRes.isOk()) ? tokenObjectRes.value : undefined;
        const tenantId = (_a = tokenObject) === null || _a === void 0 ? void 0 : _a.tid;
        return tenantId;
    }
    static skipCreateAadForProvision(envInfo) {
        var _a, _b, _c, _d;
        const envConfig = envInfo.config;
        const envState = envInfo.state[aadComponentKey];
        const objectId = (_a = envConfig.auth) === null || _a === void 0 ? void 0 : _a.objectId;
        const clientId = (_b = envConfig.auth) === null || _b === void 0 ? void 0 : _b.clientId;
        const clientSecret = (_c = envConfig.auth) === null || _c === void 0 ? void 0 : _c.clientSecret;
        const oauth2PermissionScopeId = (_d = envConfig.auth) === null || _d === void 0 ? void 0 : _d.accessAsUserScopeId;
        if (objectId && clientId && oauth2PermissionScopeId && clientSecret) {
            envState.objectId = objectId;
            envState.clientId = clientId;
            envState.clientSecret = clientSecret;
            envState.oauth2PermissionScopeId = oauth2PermissionScopeId;
            return true;
        }
        else if (objectId || clientId || oauth2PermissionScopeId || clientSecret) {
            throw results_1.ResultFactory.UserError(errors_1.GetSkipAppConfigError.name, errors_1.GetSkipAppConfigError.message(Utils.getInputFileName(envInfo.envName)));
        }
        else {
            return false;
        }
    }
    static skipCreateAadForLocalProvision(localSettings) {
        var _a, _b, _c, _d;
        const objectId = (_a = localSettings.auth) === null || _a === void 0 ? void 0 : _a.objectId;
        const clientId = (_b = localSettings.auth) === null || _b === void 0 ? void 0 : _b.clientId;
        const clientSecret = (_c = localSettings.auth) === null || _c === void 0 ? void 0 : _c.clientSecret;
        const oauth2PermissionScopeId = (_d = localSettings.auth) === null || _d === void 0 ? void 0 : _d.oauth2PermissionScopeId;
        if (objectId && clientId && oauth2PermissionScopeId && clientSecret) {
            return true;
        }
        else if (objectId || clientId || oauth2PermissionScopeId || clientSecret) {
            throw results_1.ResultFactory.UserError(errors_1.GetSkipAppConfigError.name, errors_1.GetSkipAppConfigError.message(constants_1.ConfigFilePath.LocalSettings));
        }
        else {
            return false;
        }
    }
    static skipAADProvision(ctx, isLocalDebug = false) {
        var _a, _b, _c, _d;
        const objectId = isLocalDebug
            ? ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.objectId, true)
            : (_a = ctx.envInfo.config.auth) === null || _a === void 0 ? void 0 : _a.objectId;
        const clientId = isLocalDebug
            ? ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.clientId, true)
            : (_b = ctx.envInfo.config.auth) === null || _b === void 0 ? void 0 : _b.clientId;
        const oauth2PermissionScopeId = isLocalDebug
            ? ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.oauth2PermissionScopeId, true)
            : (_c = ctx.envInfo.config.auth) === null || _c === void 0 ? void 0 : _c.accessAsUserScopeId;
        const clientSecret = isLocalDebug
            ? ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.clientSecret, true)
            : (_d = ctx.envInfo.config.auth) === null || _d === void 0 ? void 0 : _d.clientSecret;
        if (objectId && clientId && clientSecret) {
            if (!isLocalDebug) {
                ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.objectId, objectId);
                ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.clientId, clientId);
                ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.clientSecret, clientSecret);
                if (oauth2PermissionScopeId) {
                    ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.oauth2PermissionScopeId, oauth2PermissionScopeId);
                }
            }
            return true;
        }
        else if (objectId || clientId || clientSecret) {
            throw results_1.ResultFactory.UserError(errors_1.GetSkipAppConfigError.name, errors_1.GetSkipAppConfigError.message(Utils.getInputFileName(ctx.envInfo.envName)));
        }
        else {
            return false;
        }
    }
    static parseRedirectUriMessage(redirectUris) {
        let message = "";
        if (redirectUris.web && redirectUris.web.redirectUris) {
            message += `Platform: Web, RedirectUri: ${redirectUris.web.redirectUris.join(",")}; `;
        }
        if (redirectUris.spa && redirectUris.spa.redirectUris) {
            message += `Platform: Single Page Application, RedirectUri: ${redirectUris.spa.redirectUris.join(",")}; `;
        }
        return message;
    }
}
exports.Utils = Utils;
class ConfigUtils {
    static getAadConfig(ctx, key, isLocalDebug = false) {
        var _a, _b, _c;
        if (isLocalDebug) {
            return (_b = (_a = ctx.localSettings) === null || _a === void 0 ? void 0 : _a.auth) === null || _b === void 0 ? void 0 : _b.get(key);
        }
        else {
            return (_c = ctx.envInfo.state.get(constants_1.Plugins.pluginNameComplex)) === null || _c === void 0 ? void 0 : _c.get(key);
        }
    }
    static getLocalDebugConfigOfOtherPlugins(ctx, key) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        switch (key) {
            case constants_1.ConfigKeysOfOtherPlugin.localDebugTabDomain:
                return (_b = (_a = ctx.localSettings) === null || _a === void 0 ? void 0 : _a.frontend) === null || _b === void 0 ? void 0 : _b.get(localSettingsConstants_1.LocalSettingsFrontendKeys.TabDomain);
            case constants_1.ConfigKeysOfOtherPlugin.localDebugTabEndpoint:
                return (_d = (_c = ctx.localSettings) === null || _c === void 0 ? void 0 : _c.frontend) === null || _d === void 0 ? void 0 : _d.get(localSettingsConstants_1.LocalSettingsFrontendKeys.TabEndpoint);
            case constants_1.ConfigKeysOfOtherPlugin.localDebugBotEndpoint:
                return (_f = (_e = ctx.localSettings) === null || _e === void 0 ? void 0 : _e.bot) === null || _f === void 0 ? void 0 : _f.get(localSettingsConstants_1.LocalSettingsBotKeys.BotEndpoint);
            case constants_1.ConfigKeysOfOtherPlugin.teamsBotIdLocal:
                return (_h = (_g = ctx.localSettings) === null || _g === void 0 ? void 0 : _g.bot) === null || _h === void 0 ? void 0 : _h.get(localSettingsConstants_1.LocalSettingsBotKeys.BotId);
            default:
                return undefined;
        }
    }
    static checkAndSaveConfig(ctx, key, value, isLocalDebug = false) {
        var _a, _b, _c;
        if (!value) {
            return;
        }
        if (isLocalDebug) {
            (_b = (_a = ctx.localSettings) === null || _a === void 0 ? void 0 : _a.auth) === null || _b === void 0 ? void 0 : _b.set(key, value);
        }
        else {
            (_c = ctx.envInfo.state.get(constants_1.Plugins.pluginNameComplex)) === null || _c === void 0 ? void 0 : _c.set(key, value);
        }
    }
    static async getPermissionRequest(ctx) {
        if (ctx.permissionRequestProvider === undefined) {
            throw results_1.ResultFactory.SystemError(errors_1.MissingPermissionsRequestProvider.name, errors_1.MissingPermissionsRequestProvider.message());
        }
        const permissionRequestResult = await ctx.permissionRequestProvider.getPermissionRequest();
        if (permissionRequestResult.isOk()) {
            return permissionRequestResult.value;
        }
        else {
            throw permissionRequestResult.error;
        }
    }
}
exports.ConfigUtils = ConfigUtils;
class ProvisionConfig {
    constructor(isLocalDebug = false, generateScopeId = true) {
        this.isLocalDebug = isLocalDebug;
        if (generateScopeId) {
            this.oauth2PermissionScopeId = uuid_1.v4();
        }
    }
    async restoreConfigFromLocalSettings(ctx, inputs, localSettings) {
        var _a, _b;
        this.setDisplayName(ctx.projectSetting.appName);
        const permissionRes = await permissions_1.getPermissionRequest(inputs.projectPath);
        if (permissionRes.isErr()) {
            return teamsfx_api_1.err(permissionRes.error);
        }
        this.permissionRequest = permissionRes.value;
        const objectId = (_a = localSettings.auth) === null || _a === void 0 ? void 0 : _a.objectId;
        if (objectId) {
            this.objectId = objectId;
        }
        const clientSecret = (_b = localSettings.auth) === null || _b === void 0 ? void 0 : _b.clientSecret;
        if (clientSecret) {
            this.password = clientSecret;
        }
        return teamsfx_api_1.ok(undefined);
    }
    async restoreConfigFromEnvInfo(ctx, inputs, envInfo) {
        this.setDisplayName(ctx.projectSetting.appName);
        const permissionRes = await permissions_1.getPermissionRequest(inputs.projectPath);
        if (permissionRes.isErr()) {
            return teamsfx_api_1.err(permissionRes.error);
        }
        this.permissionRequest = permissionRes.value;
        const aadResource = envInfo.state[aadComponentKey];
        const objectId = aadResource === null || aadResource === void 0 ? void 0 : aadResource.objectId;
        if (objectId) {
            this.objectId = objectId;
        }
        const clientSecret = aadResource === null || aadResource === void 0 ? void 0 : aadResource.clientSecret;
        if (clientSecret) {
            this.password = clientSecret;
        }
        return teamsfx_api_1.ok(undefined);
    }
    async restoreConfigFromContext(ctx) {
        this.setDisplayName(ctx.projectSettings.appName);
        if (!tools_1.isAadManifestEnabled()) {
            this.permissionRequest = await ConfigUtils.getPermissionRequest(ctx);
        }
        const objectId = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.objectId, this.isLocalDebug);
        if (objectId) {
            this.objectId = objectId;
        }
        const clientSecret = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.clientSecret, this.isLocalDebug);
        if (clientSecret) {
            this.password = clientSecret;
        }
    }
    saveConfigIntoContext(ctx, tenantId) {
        const oauthAuthority = ProvisionConfig.getOauthAuthority(tenantId);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.clientId, this.clientId, this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.clientSecret, this.password, this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.objectId, this.objectId, this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.oauth2PermissionScopeId, this.oauth2PermissionScopeId, this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.tenantId, tenantId, this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.oauthHost, constants_1.Constants.oauthAuthorityPrefix, this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.oauthAuthority, oauthAuthority, this.isLocalDebug);
    }
    saveConfigIntoLocalSettings(localSettings, tenantId) {
        const oauthAuthority = ProvisionConfig.getOauthAuthority(tenantId);
        if (!localSettings.auth) {
            localSettings.auth = {};
        }
        if (localSettings.auth) {
            if (this.clientId)
                localSettings.auth.clientId = this.clientId;
            if (this.password)
                localSettings.auth.clientSecret = this.password;
            if (this.objectId)
                localSettings.auth.objectId = this.objectId;
            if (this.oauth2PermissionScopeId)
                localSettings.auth.oauth2PermissionScopeId = this.oauth2PermissionScopeId;
            localSettings.auth.tenantId = tenantId;
            localSettings.auth.oauthHost = constants_1.Constants.oauthAuthorityPrefix;
            localSettings.auth.oauthAuthority = oauthAuthority;
        }
    }
    saveConfigIntoEnvInfo(envInfo, tenantId) {
        if (!envInfo.state[aadComponentKey]) {
            envInfo.state[aadComponentKey] = {};
            envInfo.state[aadComponentKey].secretFields = ["clientSecret"];
        }
        const envState = envInfo.state[aadComponentKey];
        const oauthAuthority = ProvisionConfig.getOauthAuthority(tenantId);
        if (this.clientId)
            envState.clientId = this.clientId;
        if (this.password)
            envState.clientSecret = this.password;
        if (this.objectId)
            envState.objectId = this.objectId;
        if (this.oauth2PermissionScopeId)
            envState.oauth2PermissionScopeId = this.oauth2PermissionScopeId;
        envState.tenantId = tenantId;
        envState.oauthHost = constants_1.Constants.oauthAuthorityPrefix;
        envState.oauthAuthority = oauthAuthority;
    }
    static getOauthAuthority(tenantId) {
        return `${constants_1.Constants.oauthAuthorityPrefix}/${tenantId}`;
    }
    setDisplayName(appName) {
        const displayName = utils_1.convertToAlphanumericOnly(appName);
        if (displayName) {
            this.displayName = displayName.substr(0, constants_1.Constants.aadAppMaxLength);
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetDisplayNameError[0]));
        }
    }
}
exports.ProvisionConfig = ProvisionConfig;
class SetApplicationInContextConfig {
    constructor(isLocalDebug = false) {
        this.isLocalDebug = isLocalDebug;
    }
    restoreConfigFromContext(ctx) {
        var _a, _b, _c, _d;
        let frontendDomain;
        let frontendEndpoint;
        if (this.isLocalDebug) {
            frontendDomain = ConfigUtils.getLocalDebugConfigOfOtherPlugins(ctx, constants_1.ConfigKeysOfOtherPlugin.localDebugTabDomain);
        }
        else {
            frontendDomain = ctx.config.get(constants_1.ConfigKeys.domain);
            if (!frontendDomain) {
                frontendDomain = (_a = ctx.envInfo.state
                    .get(constants_1.Plugins.frontendHosting)) === null || _a === void 0 ? void 0 : _a.get(constants_1.ConfigKeysOfOtherPlugin.frontendHostingDomain);
                frontendEndpoint = (_b = ctx.envInfo.state
                    .get(constants_1.Plugins.frontendHosting)) === null || _b === void 0 ? void 0 : _b.get(constants_1.ConfigKeysOfOtherPlugin.frontendHostingEndpoint);
            }
        }
        if (frontendEndpoint) {
            this.frontendEndpoint = format_1.format(frontendEndpoint, format_1.Formats.Endpoint);
        }
        if (frontendDomain) {
            this.frontendDomain = format_1.format(frontendDomain, format_1.Formats.Domain);
        }
        const botId = this.isLocalDebug
            ? ConfigUtils.getLocalDebugConfigOfOtherPlugins(ctx, constants_1.ConfigKeysOfOtherPlugin.teamsBotIdLocal)
            : (_c = ctx.envInfo.state.get(constants_1.Plugins.teamsBot)) === null || _c === void 0 ? void 0 : _c.get(constants_1.ConfigKeysOfOtherPlugin.teamsBotId);
        if (botId) {
            this.botId = format_1.format(botId, format_1.Formats.UUID);
        }
        if (tools_1.isAadManifestEnabled()) {
            const botEndpoint = (_d = ctx.envInfo.state
                .get(constants_1.Plugins.teamsBot)) === null || _d === void 0 ? void 0 : _d.get(constants_1.ConfigKeysOfOtherPlugin.teamsBotEndpoint);
            if (botEndpoint) {
                this.botEndpoint = format_1.format(botEndpoint, format_1.Formats.Endpoint);
            }
        }
        const clientId = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.clientId, this.isLocalDebug);
        if (clientId) {
            this.clientId = clientId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.clientId, constants_1.Plugins.pluginName)[0]));
        }
    }
    restoreConfigFromLocalSettings(localSettings) {
        var _a, _b, _c;
        const frontendDomain = (_a = localSettings.frontend) === null || _a === void 0 ? void 0 : _a.tabDomain;
        if (frontendDomain) {
            this.frontendDomain = format_1.format(frontendDomain, format_1.Formats.Domain);
        }
        const botId = (_b = localSettings.bot) === null || _b === void 0 ? void 0 : _b.botId;
        if (botId) {
            this.botId = format_1.format(botId, format_1.Formats.UUID);
        }
        const clientId = (_c = localSettings.auth) === null || _c === void 0 ? void 0 : _c.clientId;
        if (clientId) {
            this.clientId = clientId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.clientId, constants_1.Plugins.pluginName)[0]));
        }
    }
    restoreConfigFromEnvInfo(ctx, envInfo) {
        var _a, _b;
        const aadResource = envInfo.state[aadComponentKey];
        let frontendDomain = aadResource === null || aadResource === void 0 ? void 0 : aadResource.domain;
        if (!frontendDomain) {
            frontendDomain = (_a = envInfo.state[tabComponentKey]) === null || _a === void 0 ? void 0 : _a.domain;
        }
        if (frontendDomain) {
            this.frontendDomain = format_1.format(frontendDomain, format_1.Formats.Domain);
        }
        const botId = (_b = envInfo.state[botComponentKey]) === null || _b === void 0 ? void 0 : _b.botId;
        if (botId) {
            this.botId = format_1.format(botId, format_1.Formats.UUID);
        }
        const clientId = aadResource === null || aadResource === void 0 ? void 0 : aadResource.clientId;
        if (clientId) {
            this.clientId = clientId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.clientId, constants_1.Plugins.pluginName)[0]));
        }
    }
    saveConfigIntoContext(ctx, frontendDomain, botId, botEndpoint) {
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.applicationIdUri, this.applicationIdUri, this.isLocalDebug);
        if (tools_1.isAadManifestEnabled()) {
            ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.botId, botId);
            ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.botEndpoint, botEndpoint);
            if (frontendDomain) {
                ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.frontendEndpoint, `https://${frontendDomain}`);
            }
        }
    }
}
exports.SetApplicationInContextConfig = SetApplicationInContextConfig;
class PostProvisionConfig {
    constructor(isLocalDebug = false) {
        this.isLocalDebug = isLocalDebug;
    }
    restoreConfigFromLocalSettings(localSettings) {
        var _a, _b, _c, _d, _e;
        const frontendEndpoint = (_a = localSettings.frontend) === null || _a === void 0 ? void 0 : _a.tabEndpoint;
        if (frontendEndpoint) {
            this.frontendEndpoint = format_1.format(frontendEndpoint, format_1.Formats.Endpoint);
        }
        const botEndpoint = (_b = localSettings.bot) === null || _b === void 0 ? void 0 : _b.botEndpoint;
        if (botEndpoint) {
            this.botEndpoint = format_1.format(botEndpoint, format_1.Formats.Endpoint);
        }
        const objectId = (_c = localSettings.auth) === null || _c === void 0 ? void 0 : _c.objectId;
        if (objectId) {
            this.objectId = objectId;
        }
        if (objectId) {
            this.objectId = objectId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName)[0]));
        }
        const applicationIdUri = (_d = localSettings.auth) === null || _d === void 0 ? void 0 : _d.applicationIdUris;
        if (applicationIdUri) {
            this.applicationIdUri = applicationIdUri;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.applicationIdUri, constants_1.Plugins.pluginName)[0]));
        }
        const clientId = (_e = localSettings.auth) === null || _e === void 0 ? void 0 : _e.clientId;
        if (objectId) {
            this.clientId = clientId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.clientId, constants_1.Plugins.pluginName)[0]));
        }
    }
    restoreConfigFromEnvInfo(ctx, envInfo) {
        var _a, _b;
        const aadResource = envInfo.state[aadComponentKey];
        let frontendEndpoint = aadResource === null || aadResource === void 0 ? void 0 : aadResource.endpoint;
        if (!frontendEndpoint) {
            frontendEndpoint = (_a = envInfo.state[tabComponentKey]) === null || _a === void 0 ? void 0 : _a.endpoint;
        }
        if (frontendEndpoint) {
            this.frontendEndpoint = format_1.format(frontendEndpoint, format_1.Formats.Endpoint);
        }
        const botEndpoint = (_b = envInfo.state[botComponentKey]) === null || _b === void 0 ? void 0 : _b.siteEndpoint;
        if (botEndpoint) {
            this.botEndpoint = format_1.format(botEndpoint, format_1.Formats.Endpoint);
        }
        const objectId = aadResource === null || aadResource === void 0 ? void 0 : aadResource.objectId;
        if (objectId) {
            this.objectId = objectId;
        }
        if (objectId) {
            this.objectId = objectId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName)[0]));
        }
        const applicationIdUri = aadResource === null || aadResource === void 0 ? void 0 : aadResource.applicationIdUris;
        if (applicationIdUri) {
            this.applicationIdUri = applicationIdUri;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.applicationIdUri, constants_1.Plugins.pluginName)[0]));
        }
        const clientId = aadResource === null || aadResource === void 0 ? void 0 : aadResource.clientId;
        if (clientId) {
            this.clientId = clientId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.clientId, constants_1.Plugins.pluginName)[0]));
        }
    }
    async restoreConfigFromContext(ctx) {
        var _a, _b;
        let frontendEndpoint;
        if (this.isLocalDebug) {
            frontendEndpoint = ConfigUtils.getLocalDebugConfigOfOtherPlugins(ctx, constants_1.ConfigKeysOfOtherPlugin.localDebugTabEndpoint);
        }
        else {
            frontendEndpoint = ctx.config.get(constants_1.ConfigKeys.endpoint);
            if (!frontendEndpoint) {
                frontendEndpoint = (_a = ctx.envInfo.state
                    .get(constants_1.Plugins.frontendHosting)) === null || _a === void 0 ? void 0 : _a.get(constants_1.ConfigKeysOfOtherPlugin.frontendHostingEndpoint);
            }
        }
        if (frontendEndpoint) {
            this.frontendEndpoint = format_1.format(frontendEndpoint, format_1.Formats.Endpoint);
        }
        const botEndpoint = this.isLocalDebug
            ? ConfigUtils.getLocalDebugConfigOfOtherPlugins(ctx, constants_1.ConfigKeysOfOtherPlugin.localDebugBotEndpoint)
            : (_b = ctx.envInfo.state.get(constants_1.Plugins.teamsBot)) === null || _b === void 0 ? void 0 : _b.get(constants_1.ConfigKeysOfOtherPlugin.teamsBotEndpoint);
        if (botEndpoint) {
            this.botEndpoint = format_1.format(botEndpoint, format_1.Formats.Endpoint);
        }
        const objectId = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.objectId, this.isLocalDebug);
        if (objectId) {
            this.objectId = objectId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName)[0]));
        }
        const applicationIdUri = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.applicationIdUri, this.isLocalDebug);
        if (applicationIdUri) {
            this.applicationIdUri = applicationIdUri;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.applicationIdUri, constants_1.Plugins.pluginName)[0]));
        }
        const clientId = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.clientId, this.isLocalDebug);
        if (clientId) {
            this.clientId = clientId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.clientId, constants_1.Plugins.pluginName)[0]));
        }
    }
}
exports.PostProvisionConfig = PostProvisionConfig;
class UpdatePermissionConfig {
    constructor(isLocalDebug = false) {
        this.isLocalDebug = isLocalDebug;
    }
    async restoreConfigFromContext(ctx) {
        const objectId = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.objectId, this.isLocalDebug);
        if (objectId) {
            this.objectId = objectId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName)[0]));
        }
        this.permissionRequest = await ConfigUtils.getPermissionRequest(ctx);
    }
}
exports.UpdatePermissionConfig = UpdatePermissionConfig;
class CheckGrantPermissionConfig {
    constructor(isGrantPermission = false) {
        this.isGrantPermission = isGrantPermission;
    }
    async restoreConfigFromContext(ctx) {
        var _a;
        const objectId = (_a = ctx.config) === null || _a === void 0 ? void 0 : _a.get(constants_1.ConfigKeys.objectId);
        if (objectId) {
            this.objectId = objectId;
        }
        else {
            const msg = getPermissionErrorMessage(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName)[0], this.isGrantPermission);
            const msg1 = getPermissionErrorMessage(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName)[1], this.isGrantPermission);
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, [msg, msg1]);
        }
    }
}
exports.CheckGrantPermissionConfig = CheckGrantPermissionConfig;
function getPermissionErrorMessage(message, isGrantPermission = false, objectId) {
    return isGrantPermission
        ? `${constants_1.Constants.permissions.name}: ${objectId}. Error: ${message}`
        : message;
}
exports.getPermissionErrorMessage = getPermissionErrorMessage;
//# sourceMappingURL=configs.js.map