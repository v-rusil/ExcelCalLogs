"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPermissionMap = exports.getPermissionRequest = exports.checkPermissionRequest = exports.createPermissionRequestFile = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const constants_1 = require("../../../constants");
const constants_2 = require("../constants");
const jsonPermissionList = tslib_1.__importStar(require("./permissions.json"));
const permissionFile = "permissions.json";
async function createPermissionRequestFile(projectPath) {
    const filePath = path.join(projectPath, permissionFile);
    await fs_extra_1.default.writeJSON(filePath, constants_1.DEFAULT_PERMISSION_REQUEST, {
        spaces: 4,
    });
    return teamsfx_api_1.ok(filePath);
}
exports.createPermissionRequestFile = createPermissionRequestFile;
async function checkPermissionRequest(projectPath) {
    const filePath = path.join(projectPath, permissionFile);
    if (!(await fs_extra_1.default.pathExists(filePath))) {
        return teamsfx_api_1.err(new teamsfx_api_1.UserError(constants_2.Plugins.pluginNameShort, constants_1.SolutionError.MissingPermissionsJson, `${filePath} is missing`));
    }
    return teamsfx_api_1.ok(filePath);
}
exports.checkPermissionRequest = checkPermissionRequest;
async function getPermissionRequest(projectPath) {
    const checkRes = await checkPermissionRequest(projectPath);
    if (checkRes.isErr()) {
        return teamsfx_api_1.err(checkRes.error);
    }
    const permissionRequest = await fs_extra_1.default.readJSON(checkRes.value);
    return teamsfx_api_1.ok(JSON.stringify(permissionRequest));
}
exports.getPermissionRequest = getPermissionRequest;
function getPermissionMap() {
    const permissionList = jsonPermissionList;
    const map = {};
    permissionList.value.forEach((permission) => {
        const resourceId = permission.appId;
        map[resourceId] = {};
        map[resourceId].scopes = {};
        map[resourceId].roles = {};
        map[resourceId].scopeIds = {};
        map[resourceId].roleIds = {};
        map[resourceId].id = resourceId;
        map[resourceId].displayName = permission.displayName;
        permission.oauth2PermissionScopes.forEach((scope) => {
            map[resourceId].scopes[scope.value] = scope.id;
            map[resourceId].scopeIds[scope.id] = scope.value;
        });
        permission.appRoles.forEach((appRole) => {
            map[resourceId].roles[appRole.value] = appRole.id;
            map[resourceId].roleIds[appRole.id] = appRole.value;
        });
        map[permission.displayName] = map[resourceId];
    });
    return map;
}
exports.getPermissionMap = getPermissionMap;
//# sourceMappingURL=index.js.map