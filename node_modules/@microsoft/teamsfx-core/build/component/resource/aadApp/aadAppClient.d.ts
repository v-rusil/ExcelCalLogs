import { M365TokenProvider, PluginContext, v2 } from "@microsoft/teamsfx-api";
import { AadOwner } from "../../../common/permissionInterface";
import { IAADDefinition, RequiredResourceAccess } from "./interfaces/IAADDefinition";
import { ProvisionConfig } from "./utils/configs";
import { AADManifest } from "./interfaces/AADManifest";
export declare class AadAppClient {
    static createAadAppUsingManifest(stage: string, manifest: AADManifest, config: ProvisionConfig): Promise<void>;
    static createAadApp(stage: string, config: ProvisionConfig): Promise<void>;
    static createAadAppSecret(stage: string, config: ProvisionConfig): Promise<void>;
    static updateAadAppUsingManifest(stage: string, manifest: AADManifest, skip?: boolean): Promise<void>;
    static updateAadAppRedirectUri(stage: string, objectId: string, redirectUris: IAADDefinition, skip?: boolean): Promise<void>;
    static updateAadAppIdUri(stage: string, objectId: string, applicationIdUri: string, skip?: boolean): Promise<void>;
    static updateAadAppPermission(stage: string, objectId: string, permissions: RequiredResourceAccess[], skip?: boolean): Promise<void>;
    static getAadAppUsingManifest(stage: string, objectId: string, clientSecret: string | undefined, oauth2PermissionScopeId: string | undefined, m365TokenProvider?: M365TokenProvider, envName?: string): Promise<ProvisionConfig>;
    static getAadApp(stage: string, objectId: string, clientSecret: string | undefined, m365TokenProvider?: M365TokenProvider, envName?: string, skip?: boolean): Promise<ProvisionConfig>;
    static checkPermission(stage: string, objectId: string, userObjectId: string): Promise<boolean>;
    static grantPermission(ctx: PluginContext | v2.Context, objectId: string, userObjectId: string): Promise<void>;
    static listCollaborator(stage: string, objectId: string): Promise<AadOwner[] | undefined>;
    static retryHanlder(stage: string, fn: () => Promise<any>): Promise<any>;
    private static getAadAppProvisionObject;
    private static handleError;
    private static getAadUrlObject;
    private static getAadApplicationIdObject;
    private static getAadPermissionObject;
}
//# sourceMappingURL=aadAppClient.d.ts.map