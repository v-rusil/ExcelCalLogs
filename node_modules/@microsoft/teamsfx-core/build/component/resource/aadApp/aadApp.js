"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadApp = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const constants_1 = require("../../constants");
const path = tslib_1.__importStar(require("path"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const folder_1 = require("../../../folder");
const utils_1 = require("./utils");
const migrate_1 = require("../../migrate");
const generateAadManifestTemplate_1 = require("../../../core/generateAadManifestTemplate");
const projectSettingsHelper_1 = require("../../../common/projectSettingsHelper");
const aadAppForTeamsImpl_1 = require("./aadAppForTeamsImpl");
const constants_2 = require("./constants");
const results_1 = require("./results");
const telemetry_1 = require("./utils/telemetry");
const dialog_1 = require("./utils/dialog");
const errors_1 = require("./errors");
const lib_1 = require("@feathersjs/hooks/lib");
const CommonErrorHandlerMW_1 = require("../../../core/middleware/CommonErrorHandlerMW");
const constants_3 = require("../../constants");
const constants_4 = require("../../constants");
let AadApp = class AadApp {
    constructor() {
        this.type = "cloud";
        this.name = constants_1.ComponentNames.AadApp;
        this.outputs = constants_1.AadAppOutputs;
        this.finalOutputKeys = [
            "applicationIdUris",
            "clientId",
            "clientSecret",
            "objectId",
            "oauth2PermissionScopeId",
            "frontendEndpoint",
            "botId",
            "botEndpoint",
            "domain",
            "endpoint",
            "oauthAuthority",
            "oauthHost",
            "tenantId",
        ];
        this.secretFields = ["clientSecret"];
    }
    async generateManifest(context, inputs) {
        const projectSetting = migrate_1.convertProjectSettingsV3ToV2(context.projectSetting);
        await generateAadManifestTemplate_1.generateAadManifestTemplate(inputs.projectPath, projectSetting);
        return teamsfx_api_1.ok(undefined);
    }
    async generateAuthFiles(context, inputs, needTab, needBot) {
        var _a;
        const res = await utils_1.createAuthFiles(inputs, (_a = context.projectSetting.programmingLanguage) !== null && _a !== void 0 ? _a : constants_4.Language.JavaScript, needTab, needBot, projectSettingsHelper_1.isVSProject(context.projectSetting));
        if (res.isErr())
            return teamsfx_api_1.err(res.error);
        return teamsfx_api_1.ok(undefined);
    }
    async generateBicep(context, inputs) {
        const bicep = {
            type: "bicep",
            Parameters: await fs_extra_1.default.readJson(path.join(folder_1.getTemplatesFolder(), "bicep", "aadApp.parameters.json")),
        };
        return teamsfx_api_1.ok([bicep]);
    }
    async provision(context, inputs) {
        var _a;
        var _b, _c;
        (_a = (_b = context.envInfo.state)[_c = constants_1.ComponentNames.AadApp]) !== null && _a !== void 0 ? _a : (_b[_c] = {});
        const aadAppImplement = new aadAppForTeamsImpl_1.AadAppForTeamsImpl();
        const convertCtx = utils_1.convertContext(context, inputs);
        const res = await this.runWithExceptionCatchingAsync(async () => aadAppImplement.provisionUsingManifest(convertCtx), convertCtx, constants_2.Messages.EndProvision.telemetry);
        if (res.isErr()) {
            return res;
        }
        this.setState(convertCtx, context);
        return res;
    }
    async configure(context, inputs) {
        const aadAppImplement = new aadAppForTeamsImpl_1.AadAppForTeamsImpl();
        const convertCtx = utils_1.convertContext(context, inputs);
        const res = await this.runWithExceptionCatchingAsync(async () => aadAppImplement.postProvisionUsingManifest(convertCtx), convertCtx, constants_2.Messages.EndPostProvision.telemetry);
        if (res.isErr()) {
            return res;
        }
        this.setState(convertCtx, context);
        return res;
    }
    async setApplicationInContext(context, inputs) {
        const aadAppImplement = new aadAppForTeamsImpl_1.AadAppForTeamsImpl();
        const convertCtx = utils_1.convertContext(context, inputs);
        const res = await this.runWithExceptionCatchingAsync(async () => aadAppImplement.setApplicationInContext(convertCtx), convertCtx, "setApplicationInContext");
        if (res.isErr()) {
            return res;
        }
        this.setState(convertCtx, context);
        return res;
    }
    async deploy(context, inputs) {
        const aadAppImplement = new aadAppForTeamsImpl_1.AadAppForTeamsImpl();
        const convertCtx = utils_1.convertContext(context, inputs);
        const res = await this.runWithExceptionCatchingAsync(() => aadAppImplement.deploy(convertCtx), convertCtx, constants_2.Messages.EndDeploy.telemetry);
        if (res.isErr()) {
            return res;
        }
        this.setState(convertCtx, context);
        return res;
    }
    async buildAadManifest(context, inputs) {
        const aadAppImplement = new aadAppForTeamsImpl_1.AadAppForTeamsImpl();
        const convertCtx = utils_1.convertContext(context, inputs);
        const res = await this.runWithExceptionCatchingAsync(async () => {
            await aadAppImplement.loadAndBuildManifest(convertCtx);
            return results_1.ResultFactory.Success();
        }, convertCtx, constants_2.Messages.EndBuildAadManifest.telemetry);
        if (res.isErr()) {
            return res;
        }
        this.setState(convertCtx, context);
        return res;
    }
    async listCollaborator(ctx, aadObjectIdV3) {
        const aadAppImplement = new aadAppForTeamsImpl_1.AadAppForTeamsImpl();
        const res = await this.runWithExceptionCatchingAsync(async () => aadAppImplement.listCollaborator(ctx, aadObjectIdV3), ctx, constants_2.Messages.EndListCollaborator.telemetry);
        return res;
    }
    async grantPermission(ctx, userInfo, aadObjectIdV3) {
        const aadAppImplement = new aadAppForTeamsImpl_1.AadAppForTeamsImpl();
        const res = await this.runWithExceptionCatchingAsync(async () => aadAppImplement.grantPermission(ctx, userInfo, aadObjectIdV3), ctx, constants_2.Messages.EndGrantPermission.telemetry);
        return res;
    }
    async checkPermission(ctx, userInfo, aadObjectIdV3) {
        const aadAppImplement = new aadAppForTeamsImpl_1.AadAppForTeamsImpl();
        const res = await this.runWithExceptionCatchingAsync(async () => aadAppImplement.checkPermission(ctx, userInfo, aadObjectIdV3), ctx, constants_2.Messages.EndCheckPermission.telemetry);
        return res;
    }
    setState(convertCtx, context) {
        const convertState = convertCtx.envInfo.state.get("fx-resource-aad-app-for-teams");
        convertState.forEach((v, k) => {
            context.envInfo.state[constants_1.ComponentNames.AadApp][k] = v;
        });
    }
    async runWithExceptionCatchingAsync(fn, ctx, stage) {
        try {
            return await fn();
        }
        catch (e) {
            return this.returnError(e, ctx, stage);
        }
    }
    returnError(e, ctx, stage) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        if (e instanceof teamsfx_api_1.SystemError || e instanceof teamsfx_api_1.UserError) {
            let errorMessage = e.message;
            // For errors contains innerError, e.g. failures when calling Graph API
            if (e.innerError) {
                errorMessage += ` Detailed error: ${e.innerError.message}.`;
                if ((_b = (_a = e.innerError.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.errorMessage) {
                    // For errors return from App Studio API
                    errorMessage += ` Reason: ${(_d = (_c = e.innerError.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.errorMessage}`;
                }
                else if ((_g = (_f = (_e = e.innerError.response) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.error) === null || _g === void 0 ? void 0 : _g.message) {
                    // For errors return from Graph API
                    errorMessage += ` Reason: ${(_k = (_j = (_h = e.innerError.response) === null || _h === void 0 ? void 0 : _h.data) === null || _j === void 0 ? void 0 : _j.error) === null || _k === void 0 ? void 0 : _k.message}`;
                }
                e.message = errorMessage;
            }
            (_l = ctx.logProvider) === null || _l === void 0 ? void 0 : _l.error(errorMessage);
            telemetry_1.TelemetryUtils.sendErrorEvent(stage, e.name, e instanceof teamsfx_api_1.UserError ? constants_2.Telemetry.userError : constants_2.Telemetry.systemError, errorMessage);
            (_m = dialog_1.DialogUtils.progress) === null || _m === void 0 ? void 0 : _m.end(false);
            return teamsfx_api_1.err(e);
        }
        else {
            if (!(e instanceof Error)) {
                e = new Error(e.toString());
            }
            (_o = ctx.logProvider) === null || _o === void 0 ? void 0 : _o.error(e.message);
            telemetry_1.TelemetryUtils.sendErrorEvent(stage, errors_1.UnhandledError.name, constants_2.Telemetry.systemError, errors_1.UnhandledError.message() + " " + e.message);
            return teamsfx_api_1.err(results_1.ResultFactory.SystemError(errors_1.UnhandledError.name, errors_1.UnhandledError.message(), e, undefined, undefined));
        }
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        CommonErrorHandlerMW_1.CommonErrorHandlerMW({
            telemetry: { component: constants_3.BuiltInFeaturePluginNames.aad },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AadApp.prototype, "buildAadManifest", null);
tslib_1.__decorate([
    lib_1.hooks([
        CommonErrorHandlerMW_1.CommonErrorHandlerMW({
            telemetry: { component: constants_3.BuiltInFeaturePluginNames.aad },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, String]),
    tslib_1.__metadata("design:returntype", Promise)
], AadApp.prototype, "listCollaborator", null);
tslib_1.__decorate([
    lib_1.hooks([
        CommonErrorHandlerMW_1.CommonErrorHandlerMW({
            telemetry: { component: constants_3.BuiltInFeaturePluginNames.aad },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, String]),
    tslib_1.__metadata("design:returntype", Promise)
], AadApp.prototype, "grantPermission", null);
tslib_1.__decorate([
    lib_1.hooks([
        CommonErrorHandlerMW_1.CommonErrorHandlerMW({
            telemetry: { component: constants_3.BuiltInFeaturePluginNames.aad },
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, String]),
    tslib_1.__metadata("design:returntype", Promise)
], AadApp.prototype, "checkPermission", null);
AadApp = tslib_1.__decorate([
    typedi_1.Service(constants_1.ComponentNames.AadApp)
], AadApp);
exports.AadApp = AadApp;
//# sourceMappingURL=aadApp.js.map