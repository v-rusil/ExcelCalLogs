"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadAppForTeamsImpl = void 0;
const results_1 = require("./results");
const configs_1 = require("./utils/configs");
const telemetry_1 = require("./utils/telemetry");
const tokenProvider_1 = require("./utils/tokenProvider");
const aadAppClient_1 = require("./aadAppClient");
const errors_1 = require("./errors");
const dialog_1 = require("./utils/dialog");
const constants_1 = require("./constants");
const uuid_1 = require("uuid");
const constants_2 = require("../../../common/constants");
const tools_1 = require("../../../common/tools");
const permissions_1 = require("./permissions");
const aadAppManifestManager_1 = require("./aadAppManifestManager");
const format_1 = require("./utils/format");
const generateAadManifestTemplate_1 = require("../../../core/generateAadManifestTemplate");
const projectSettingsHelper_1 = require("../../../common/projectSettingsHelper");
const constants_3 = require("../../constants");
const constants_4 = require("../../constants");
class AadAppForTeamsImpl {
    async provision(ctx, isLocalDebug = false) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        if (tools_1.isAadManifestEnabled()) {
            return await this.provisionUsingManifest(ctx, isLocalDebug);
        }
        telemetry_1.TelemetryUtils.init(ctx);
        configs_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.StartProvision, constants_1.Messages.StartLocalDebug, isLocalDebug);
        const telemetryMessage = isLocalDebug
            ? constants_1.Messages.EndLocalDebug.telemetry
            : constants_1.Messages.EndProvision.telemetry;
        await tokenProvider_1.TokenProvider.init({ m365: ctx.m365TokenProvider });
        // Move objectId etc. from input to output.
        const skip = configs_1.Utils.skipAADProvision(ctx, false);
        dialog_1.DialogUtils.init(ctx.ui, constants_1.ProgressTitle.Provision, constants_1.ProgressTitle.ProvisionSteps);
        let config = new configs_1.ProvisionConfig(false);
        await config.restoreConfigFromContext(ctx);
        const permissions = AadAppForTeamsImpl.parsePermission(config.permissionRequest, ctx.logProvider);
        await ((_a = dialog_1.DialogUtils.progress) === null || _a === void 0 ? void 0 : _a.start(constants_1.ProgressDetail.Starting));
        if (config.objectId) {
            if (!skip) {
                await ((_b = dialog_1.DialogUtils.progress) === null || _b === void 0 ? void 0 : _b.next(constants_1.ProgressDetail.GetAadApp));
                config = await aadAppClient_1.AadAppClient.getAadApp(telemetryMessage, config.objectId, config.password, ctx.m365TokenProvider, ctx.envInfo.envName);
                (_c = ctx.logProvider) === null || _c === void 0 ? void 0 : _c.info(constants_1.Messages.getLog(constants_1.Messages.GetAadAppSuccess));
            }
        }
        else {
            await ((_d = dialog_1.DialogUtils.progress) === null || _d === void 0 ? void 0 : _d.next(constants_1.ProgressDetail.ProvisionAadApp));
            await aadAppClient_1.AadAppClient.createAadApp(telemetryMessage, config);
            config.password = undefined;
            (_e = ctx.logProvider) === null || _e === void 0 ? void 0 : _e.info(constants_1.Messages.getLog(constants_1.Messages.CreateAadAppSuccess));
        }
        if (!config.password) {
            await ((_f = dialog_1.DialogUtils.progress) === null || _f === void 0 ? void 0 : _f.next(constants_1.ProgressDetail.CreateAadAppSecret));
            await aadAppClient_1.AadAppClient.createAadAppSecret(telemetryMessage, config);
            (_g = ctx.logProvider) === null || _g === void 0 ? void 0 : _g.info(constants_1.Messages.getLog(constants_1.Messages.CreateAadAppPasswordSuccess));
        }
        await ((_h = dialog_1.DialogUtils.progress) === null || _h === void 0 ? void 0 : _h.next(constants_1.ProgressDetail.UpdatePermission));
        await aadAppClient_1.AadAppClient.updateAadAppPermission(telemetryMessage, config.objectId, permissions, skip);
        (_j = ctx.logProvider) === null || _j === void 0 ? void 0 : _j.info(constants_1.Messages.getLog(constants_1.Messages.UpdatePermissionSuccess));
        await ((_k = dialog_1.DialogUtils.progress) === null || _k === void 0 ? void 0 : _k.end(true));
        config.saveConfigIntoContext(ctx, tokenProvider_1.TokenProvider.tenantId);
        configs_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.EndProvision, constants_1.Messages.EndLocalDebug, isLocalDebug, skip ? { [constants_1.Telemetry.skip]: constants_1.Telemetry.yes } : {});
        return results_1.ResultFactory.Success();
    }
    async provisionUsingManifest(ctx, isLocalDebug = false) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        telemetry_1.TelemetryUtils.init(ctx);
        configs_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.StartProvision, constants_1.Messages.StartLocalDebug, isLocalDebug);
        const telemetryMessage = isLocalDebug
            ? constants_1.Messages.EndLocalDebug.telemetry
            : constants_1.Messages.EndProvision.telemetry;
        await tokenProvider_1.TokenProvider.init({ m365: ctx.m365TokenProvider });
        // Move objectId etc. from input to output.
        const skip = configs_1.Utils.skipAADProvision(ctx, false);
        dialog_1.DialogUtils.init(ctx.ui, constants_1.ProgressTitle.Provision, constants_1.ProgressTitle.ProvisionSteps);
        let config = new configs_1.ProvisionConfig(false);
        await config.restoreConfigFromContext(ctx);
        const manifest = await aadAppManifestManager_1.AadAppManifestManager.loadAadManifest(ctx);
        await ((_a = dialog_1.DialogUtils.progress) === null || _a === void 0 ? void 0 : _a.start(constants_1.ProgressDetail.Starting));
        if (manifest.id) {
            const existingOauth2PermissionScopeId = (_b = ctx.envInfo.config.auth) === null || _b === void 0 ? void 0 : _b.accessAsUserScopeId;
            if (!skip || !existingOauth2PermissionScopeId) {
                await ((_c = dialog_1.DialogUtils.progress) === null || _c === void 0 ? void 0 : _c.next(constants_1.ProgressDetail.GetAadApp));
                config = await aadAppClient_1.AadAppClient.getAadAppUsingManifest(telemetryMessage, manifest.id, config.password, await this.getScopeIdForTeams(manifest), ctx.m365TokenProvider, ctx.envInfo.envName);
                (_d = ctx.logProvider) === null || _d === void 0 ? void 0 : _d.info(constants_1.Messages.getLog(constants_1.Messages.GetAadAppSuccess));
            }
        }
        else {
            await ((_e = dialog_1.DialogUtils.progress) === null || _e === void 0 ? void 0 : _e.next(constants_1.ProgressDetail.ProvisionAadApp));
            if (!manifest.name) {
                throw results_1.ResultFactory.UserError(errors_1.AadManifestMissingName.name, errors_1.AadManifestMissingName.message());
            }
            config.oauth2PermissionScopeId = await this.getScopeIdForTeams(manifest);
            await aadAppClient_1.AadAppClient.createAadAppUsingManifest(telemetryMessage, manifest, config);
            config.password = undefined;
            (_f = ctx.logProvider) === null || _f === void 0 ? void 0 : _f.info(constants_1.Messages.getLog(constants_1.Messages.CreateAadAppSuccess));
        }
        if (!config.password) {
            await ((_g = dialog_1.DialogUtils.progress) === null || _g === void 0 ? void 0 : _g.next(constants_1.ProgressDetail.CreateAadAppSecret));
            await aadAppClient_1.AadAppClient.createAadAppSecret(telemetryMessage, config);
            (_h = ctx.logProvider) === null || _h === void 0 ? void 0 : _h.info(constants_1.Messages.getLog(constants_1.Messages.CreateAadAppPasswordSuccess));
        }
        await ((_j = dialog_1.DialogUtils.progress) === null || _j === void 0 ? void 0 : _j.end(true));
        config.saveConfigIntoContext(ctx, tokenProvider_1.TokenProvider.tenantId);
        configs_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.EndProvision, constants_1.Messages.EndLocalDebug, isLocalDebug, skip ? { [constants_1.Telemetry.skip]: constants_1.Telemetry.yes } : {});
        return results_1.ResultFactory.Success();
    }
    getScopeIdForTeams(manifest) {
        var _a;
        let scopeId;
        let findAccessAsUser;
        (_a = manifest.oauth2Permissions) === null || _a === void 0 ? void 0 : _a.forEach((oauth2Permission) => {
            if (oauth2Permission.value === "access_as_user") {
                scopeId = oauth2Permission.id;
                findAccessAsUser = true;
            }
        });
        if (!findAccessAsUser) {
            throw results_1.ResultFactory.UserError(errors_1.AADManifestMissingScopeIdForTeamsApp.name, errors_1.AADManifestMissingScopeIdForTeamsApp.message());
        }
        return scopeId;
    }
    setApplicationInContext(ctx, isLocalDebug = false) {
        var _a, _b, _c, _d, _e;
        const config = new configs_1.SetApplicationInContextConfig(isLocalDebug);
        config.restoreConfigFromContext(ctx);
        const userSetFrontendDomain = format_1.format((_a = ctx.envInfo.config.auth) === null || _a === void 0 ? void 0 : _a.frontendDomain, format_1.Formats.Domain);
        const userSetBotId = format_1.format((_b = ctx.envInfo.config.auth) === null || _b === void 0 ? void 0 : _b.botId, format_1.Formats.UUID);
        const userSetBotEndpoint = format_1.format((_c = ctx.envInfo.config.auth) === null || _c === void 0 ? void 0 : _c.botEndpoint, format_1.Formats.Endpoint);
        if (!config.frontendDomain && !config.botId) {
            const azureSolutionSettings = (_d = ctx.projectSettings) === null || _d === void 0 ? void 0 : _d.solutionSettings;
            if ((azureSolutionSettings === null || azureSolutionSettings === void 0 ? void 0 : azureSolutionSettings.capabilities.includes("Tab")) ||
                (azureSolutionSettings === null || azureSolutionSettings === void 0 ? void 0 : azureSolutionSettings.capabilities.includes("Bot"))) {
                throw results_1.ResultFactory.UserError(errors_1.AppIdUriInvalidError.name, errors_1.AppIdUriInvalidError.message());
            }
        }
        config.frontendDomain = userSetFrontendDomain !== null && userSetFrontendDomain !== void 0 ? userSetFrontendDomain : config.frontendDomain;
        config.frontendEndpoint = userSetFrontendDomain
            ? `https://${userSetFrontendDomain}`
            : config.frontendEndpoint;
        config.botId = userSetBotId !== null && userSetBotId !== void 0 ? userSetBotId : config.botId;
        config.botEndpoint = userSetBotEndpoint !== null && userSetBotEndpoint !== void 0 ? userSetBotEndpoint : config.botEndpoint;
        if (config.frontendDomain || config.botId) {
            let applicationIdUri = "api://";
            let frontendHost = config.frontendDomain;
            if (config.frontendEndpoint) {
                const url = new URL(config.frontendEndpoint);
                frontendHost = url.host;
            }
            applicationIdUri += frontendHost ? `${frontendHost}/` : "";
            applicationIdUri += config.botId ? "botid-" + config.botId : config.clientId;
            config.applicationIdUri = applicationIdUri;
            (_e = ctx.logProvider) === null || _e === void 0 ? void 0 : _e.info(constants_1.Messages.getLog(constants_1.Messages.SetAppIdUriSuccess));
        }
        else {
            throw results_1.ResultFactory.UserError(errors_1.CannotGenerateIdentifierUrisError.name, errors_1.CannotGenerateIdentifierUrisError.message());
        }
        config.saveConfigIntoContext(ctx, config.frontendDomain, config.botId, config.botEndpoint);
        return results_1.ResultFactory.Success();
    }
    async postProvision(ctx, isLocalDebug = false) {
        var _a, _b, _c, _d, _e, _f;
        if (tools_1.isAadManifestEnabled()) {
            return await this.postProvisionUsingManifest(ctx, isLocalDebug);
        }
        telemetry_1.TelemetryUtils.init(ctx);
        configs_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.StartPostProvision, constants_1.Messages.StartPostLocalDebug, isLocalDebug);
        const skip = configs_1.Utils.skipAADProvision(ctx, false);
        dialog_1.DialogUtils.init(ctx.ui, constants_1.ProgressTitle.PostProvision, constants_1.ProgressTitle.PostProvisionSteps);
        await tokenProvider_1.TokenProvider.init({ m365: ctx.m365TokenProvider });
        const config = new configs_1.PostProvisionConfig(false);
        config.restoreConfigFromContext(ctx);
        await ((_a = dialog_1.DialogUtils.progress) === null || _a === void 0 ? void 0 : _a.start(constants_1.ProgressDetail.Starting));
        await ((_b = dialog_1.DialogUtils.progress) === null || _b === void 0 ? void 0 : _b.next(constants_1.ProgressDetail.UpdateRedirectUri));
        const isVs = projectSettingsHelper_1.isVSProject(ctx.projectSettings);
        const redirectUris = AadAppForTeamsImpl.getRedirectUris(config.frontendEndpoint, config.botEndpoint, config.clientId, isVs);
        await aadAppClient_1.AadAppClient.updateAadAppRedirectUri(isLocalDebug ? constants_1.Messages.EndPostLocalDebug.telemetry : constants_1.Messages.EndPostProvision.telemetry, config.objectId, redirectUris, skip);
        (_c = ctx.logProvider) === null || _c === void 0 ? void 0 : _c.info(constants_1.Messages.getLog(constants_1.Messages.UpdateRedirectUriSuccess));
        await ((_d = dialog_1.DialogUtils.progress) === null || _d === void 0 ? void 0 : _d.next(constants_1.ProgressDetail.UpdateAppIdUri));
        await aadAppClient_1.AadAppClient.updateAadAppIdUri(isLocalDebug ? constants_1.Messages.EndPostLocalDebug.telemetry : constants_1.Messages.EndPostProvision.telemetry, config.objectId, config.applicationIdUri, skip);
        (_e = ctx.logProvider) === null || _e === void 0 ? void 0 : _e.info(constants_1.Messages.getLog(constants_1.Messages.UpdateAppIdUriSuccess));
        await ((_f = dialog_1.DialogUtils.progress) === null || _f === void 0 ? void 0 : _f.end(true));
        configs_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.EndPostProvision, constants_1.Messages.EndPostLocalDebug, isLocalDebug, skip ? { [constants_1.Telemetry.skip]: constants_1.Telemetry.yes } : {});
        return results_1.ResultFactory.Success();
    }
    async postProvisionUsingManifest(ctx, isLocalDebug = false) {
        var _a, _b;
        telemetry_1.TelemetryUtils.init(ctx);
        configs_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.StartPostProvision, constants_1.Messages.StartPostLocalDebug, isLocalDebug);
        const skip = configs_1.Utils.skipAADProvision(ctx, false);
        dialog_1.DialogUtils.init(ctx.ui, constants_1.ProgressTitle.PostProvisionUsingManifest, constants_1.ProgressTitle.PostProvisionUsingManifestSteps);
        await tokenProvider_1.TokenProvider.init({ m365: ctx.m365TokenProvider });
        await ((_a = dialog_1.DialogUtils.progress) === null || _a === void 0 ? void 0 : _a.start(constants_1.ProgressDetail.Starting));
        const manifest = await aadAppManifestManager_1.AadAppManifestManager.loadAadManifest(ctx);
        await aadAppClient_1.AadAppClient.updateAadAppUsingManifest(isLocalDebug ? constants_1.Messages.EndPostLocalDebug.telemetry : constants_1.Messages.EndPostProvision.telemetry, manifest, skip);
        await aadAppManifestManager_1.AadAppManifestManager.writeManifestFileToBuildFolder(manifest, ctx);
        await ((_b = dialog_1.DialogUtils.progress) === null || _b === void 0 ? void 0 : _b.end(true));
        configs_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.EndPostProvision, constants_1.Messages.EndPostLocalDebug, isLocalDebug, Object.assign({ [constants_1.Telemetry.signInAudience]: manifest.signInAudience }, (skip ? { [constants_1.Telemetry.skip]: constants_1.Telemetry.yes } : {})));
        return results_1.ResultFactory.Success();
    }
    async checkPermission(ctx, userInfo, aadObjectIdV3) {
        var _a, _b;
        ctx.logProvider.info(constants_1.Messages.StartCheckPermission.log);
        await tokenProvider_1.TokenProvider.init({ m365: (_a = ctx.tokenProvider) === null || _a === void 0 ? void 0 : _a.m365TokenProvider }, tokenProvider_1.TokenAudience.Graph);
        const objectId = tools_1.isV3Enabled()
            ? aadObjectIdV3
            : ((_b = ctx.envInfo) === null || _b === void 0 ? void 0 : _b.state[constants_4.ComponentNames.AadApp]).objectId;
        if (!objectId) {
            const params = errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName);
            const msgs0 = configs_1.getPermissionErrorMessage(params[0], false);
            const msgs1 = configs_1.getPermissionErrorMessage(params[1], false);
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, [msgs0, msgs1]);
        }
        const userObjectId = userInfo.aadId;
        const isAadOwner = await aadAppClient_1.AadAppClient.checkPermission(constants_1.Messages.EndCheckPermission.telemetry, objectId, userObjectId);
        const result = [
            {
                name: constants_1.Constants.permissions.name,
                type: constants_1.Constants.permissions.type,
                roles: isAadOwner ? [constants_1.Constants.permissions.owner] : [constants_1.Constants.permissions.noPermission],
                resourceId: objectId,
            },
        ];
        ctx.logProvider.info(constants_1.Messages.EndCheckPermission.log);
        return results_1.ResultFactory.Success(result);
    }
    async listCollaborator(ctx, aadObjectIdV3) {
        var _a, _b;
        ctx.logProvider.info(constants_1.Messages.StartListCollaborator.log);
        await tokenProvider_1.TokenProvider.init({ m365: (_a = ctx.tokenProvider) === null || _a === void 0 ? void 0 : _a.m365TokenProvider }, tokenProvider_1.TokenAudience.Graph);
        const objectId = tools_1.isV3Enabled()
            ? aadObjectIdV3
            : ((_b = ctx.envInfo) === null || _b === void 0 ? void 0 : _b.state[constants_4.ComponentNames.AadApp]).objectId;
        if (!objectId) {
            const msgs = errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName);
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, msgs);
        }
        const owners = await aadAppClient_1.AadAppClient.listCollaborator(constants_1.Messages.EndListCollaborator.telemetry, objectId);
        ctx.logProvider.info(constants_1.Messages.EndListCollaborator.log);
        return results_1.ResultFactory.Success(owners || []);
    }
    async grantPermission(ctx, userInfo, aadObjectIdV3) {
        var _a, _b;
        ctx.logProvider.info(constants_1.Messages.StartGrantPermission.log);
        await tokenProvider_1.TokenProvider.init({ m365: (_a = ctx.tokenProvider) === null || _a === void 0 ? void 0 : _a.m365TokenProvider }, tokenProvider_1.TokenAudience.Graph);
        const objectId = tools_1.isV3Enabled()
            ? aadObjectIdV3
            : ((_b = ctx.envInfo) === null || _b === void 0 ? void 0 : _b.state[constants_4.ComponentNames.AadApp]).objectId;
        if (!objectId) {
            const params = errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName);
            const msg0 = configs_1.getPermissionErrorMessage(params[0], true);
            const msg1 = configs_1.getPermissionErrorMessage(params[1], true);
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, [msg0, msg1]);
        }
        const userObjectId = userInfo.aadId;
        await aadAppClient_1.AadAppClient.grantPermission(ctx, objectId, userObjectId);
        const result = [
            {
                name: constants_1.Constants.permissions.name,
                type: constants_1.Constants.permissions.type,
                roles: [constants_1.Constants.permissions.owner],
                resourceId: objectId,
            },
        ];
        ctx.logProvider.info(constants_1.Messages.EndGrantPermission.log);
        return results_1.ResultFactory.Success(result);
    }
    static getRedirectUris(frontendEndpoint, botEndpoint, clientId, isVs = false) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const redirectUris = {
            web: {
                redirectUris: [],
            },
            spa: {
                redirectUris: [],
            },
        };
        if (frontendEndpoint) {
            (_b = (_a = redirectUris.web) === null || _a === void 0 ? void 0 : _a.redirectUris) === null || _b === void 0 ? void 0 : _b.push(`${frontendEndpoint}/auth-end.html`);
            (_d = (_c = redirectUris.spa) === null || _c === void 0 ? void 0 : _c.redirectUris) === null || _d === void 0 ? void 0 : _d.push(`${frontendEndpoint}/blank-auth-end.html`);
            (_f = (_e = redirectUris.spa) === null || _e === void 0 ? void 0 : _e.redirectUris) === null || _f === void 0 ? void 0 : _f.push(`${frontendEndpoint}/auth-end.html?clientId=${clientId}`);
        }
        if (botEndpoint) {
            (_h = (_g = redirectUris.web) === null || _g === void 0 ? void 0 : _g.redirectUris) === null || _h === void 0 ? void 0 : _h.push(isVs ? `${botEndpoint}/bot-auth-end.html` : `${botEndpoint}/auth-end.html`);
        }
        return redirectUris;
    }
    static parsePermission(permissionRequest, logProvider) {
        let permissionRequestParsed;
        try {
            permissionRequestParsed = JSON.parse(permissionRequest);
        }
        catch (error) {
            throw results_1.ResultFactory.UserError(errors_1.ParsePermissionError.name, errors_1.ParsePermissionError.message(), error, undefined, errors_1.ParsePermissionError.helpLink);
        }
        const permissions = AadAppForTeamsImpl.generateRequiredResourceAccess(permissionRequestParsed);
        if (!permissions) {
            throw results_1.ResultFactory.UserError(errors_1.ParsePermissionError.name, errors_1.ParsePermissionError.message(), undefined, undefined, errors_1.ParsePermissionError.helpLink);
        }
        logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(constants_1.Messages.getLog(constants_1.Messages.ParsePermissionSuccess));
        return permissions;
    }
    static generateRequiredResourceAccess(permissions) {
        if (!permissions) {
            return undefined;
        }
        const map = permissions_1.getPermissionMap();
        const requiredResourceAccessList = [];
        permissions.forEach((permission) => {
            var _a, _b, _c, _d, _e, _f;
            const requiredResourceAccess = {};
            const resourceIdOrName = permission.resource;
            let resourceId = resourceIdOrName;
            if (!uuid_1.validate(resourceIdOrName)) {
                const res = map[resourceIdOrName];
                if (!res) {
                    throw results_1.ResultFactory.UserError(errors_1.UnknownPermissionName.name, errors_1.UnknownPermissionName.message(resourceIdOrName), undefined, undefined, errors_1.UnknownPermissionName.helpLink);
                }
                const id = res.id;
                if (!id) {
                    throw results_1.ResultFactory.UserError(errors_1.UnknownPermissionName.name, errors_1.UnknownPermissionName.message(resourceIdOrName), undefined, undefined, errors_1.UnknownPermissionName.helpLink);
                }
                resourceId = id;
            }
            requiredResourceAccess.resourceAppId = resourceId;
            requiredResourceAccess.resourceAccess = [];
            if (!permission.delegated) {
                permission.delegated = [];
            }
            if (!permission.application) {
                permission.application = [];
            }
            permission.delegated = (_a = permission.delegated) === null || _a === void 0 ? void 0 : _a.concat(permission.scopes);
            permission.delegated = (_b = permission.delegated) === null || _b === void 0 ? void 0 : _b.filter((scopeName, i) => { var _a; return i === ((_a = permission.delegated) === null || _a === void 0 ? void 0 : _a.indexOf(scopeName)); });
            permission.application = (_c = permission.application) === null || _c === void 0 ? void 0 : _c.concat(permission.roles);
            permission.application = (_d = permission.application) === null || _d === void 0 ? void 0 : _d.filter((roleName, i) => { var _a; return i === ((_a = permission.application) === null || _a === void 0 ? void 0 : _a.indexOf(roleName)); });
            (_e = permission.application) === null || _e === void 0 ? void 0 : _e.forEach((roleName) => {
                if (!roleName) {
                    return;
                }
                const resourceAccess = {
                    id: roleName,
                    type: "Role",
                };
                if (!uuid_1.validate(roleName)) {
                    const roleId = map[resourceId].roles[roleName];
                    if (!roleId) {
                        throw results_1.ResultFactory.UserError(errors_1.UnknownPermissionRole.name, errors_1.UnknownPermissionRole.message(roleName, permission.resource), undefined, undefined, errors_1.UnknownPermissionRole.helpLink);
                    }
                    resourceAccess.id = roleId;
                }
                requiredResourceAccess.resourceAccess.push(resourceAccess);
            });
            (_f = permission.delegated) === null || _f === void 0 ? void 0 : _f.forEach((scopeName) => {
                if (!scopeName) {
                    return;
                }
                const resourceAccess = {
                    id: scopeName,
                    type: "Scope",
                };
                if (!uuid_1.validate(scopeName)) {
                    const scopeId = map[resourceId].scopes[scopeName];
                    if (!scopeId) {
                        throw results_1.ResultFactory.UserError(errors_1.UnknownPermissionScope.name, errors_1.UnknownPermissionScope.message(scopeName, permission.resource), undefined, undefined, errors_1.UnknownPermissionScope.helpLink);
                    }
                    resourceAccess.id = map[resourceId].scopes[scopeName];
                }
                requiredResourceAccess.resourceAccess.push(resourceAccess);
            });
            requiredResourceAccessList.push(requiredResourceAccess);
        });
        return requiredResourceAccessList;
    }
    async scaffold(ctx) {
        if (tools_1.isAadManifestEnabled()) {
            telemetry_1.TelemetryUtils.init(ctx);
            configs_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartScaffold);
            await generateAadManifestTemplate_1.generateAadManifestTemplate(ctx.root, ctx.projectSettings);
            configs_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndScaffold);
        }
        return results_1.ResultFactory.Success();
    }
    async deploy(ctx) {
        var _a, _b;
        if (tools_1.isAadManifestEnabled()) {
            telemetry_1.TelemetryUtils.init(ctx);
            configs_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartDeploy);
            try {
                dialog_1.DialogUtils.init(ctx.ui, constants_1.ProgressTitle.Deploy, constants_1.ProgressTitle.DeploySteps);
                await tokenProvider_1.TokenProvider.init({ m365: ctx.m365TokenProvider });
                await ((_a = dialog_1.DialogUtils.progress) === null || _a === void 0 ? void 0 : _a.start(constants_1.ProgressDetail.Starting));
                const skip = configs_1.Utils.skipAADProvision(ctx, false);
                const manifest = await this.loadAndBuildManifest(ctx);
                this.validateDeployManifest(manifest);
                await aadAppClient_1.AadAppClient.updateAadAppUsingManifest(constants_1.Messages.EndDeploy.telemetry, manifest, skip);
                configs_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndDeploy, skip ? { [constants_1.Telemetry.skip]: constants_1.Telemetry.yes } : {});
            }
            catch (err) {
                throw err;
            }
            finally {
                await ((_b = dialog_1.DialogUtils.progress) === null || _b === void 0 ? void 0 : _b.end(true));
            }
        }
        return results_1.ResultFactory.Success();
    }
    async loadAndBuildManifest(ctx) {
        var _a, _b;
        let isProvisionSucceeded;
        telemetry_1.TelemetryUtils.init(ctx);
        configs_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartBuildAadManifest);
        if (ctx.envInfo.envName === "local") {
            isProvisionSucceeded = !!((_a = ctx.envInfo.state.get(constants_3.PluginNames.AAD)) === null || _a === void 0 ? void 0 : _a.get(constants_3.REMOTE_AAD_ID));
        }
        else {
            isProvisionSucceeded = !!((_b = ctx.envInfo.state
                .get("solution")) === null || _b === void 0 ? void 0 : _b.get(constants_3.SOLUTION_PROVISION_SUCCEEDED));
        }
        if (!isProvisionSucceeded) {
            throw results_1.ResultFactory.UserError(errors_1.AadManifestNotProvisioned.name, errors_1.AadManifestNotProvisioned.message(), undefined, undefined, constants_2.HelpLinks.WhyNeedProvision);
        }
        const manifest = await aadAppManifestManager_1.AadAppManifestManager.loadAadManifest(ctx);
        if (!manifest.id) {
            throw results_1.ResultFactory.UserError(errors_1.AadManifestMissingObjectId.name, errors_1.AadManifestMissingObjectId.message());
        }
        await aadAppManifestManager_1.AadAppManifestManager.writeManifestFileToBuildFolder(manifest, ctx);
        configs_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndBuildAadManifest);
        return manifest;
    }
    validateDeployManifest(manifest) {
        if (manifest.name === "") {
            throw results_1.ResultFactory.UserError(errors_1.AadManifestMissingName.name, errors_1.AadManifestMissingName.message());
        }
        if (!manifest.id) {
            throw results_1.ResultFactory.UserError(errors_1.AadManifestMissingObjectId.name, errors_1.AadManifestMissingObjectId.message());
        }
        if (!manifest.identifierUris || manifest.identifierUris.length === 0) {
            throw results_1.ResultFactory.UserError(errors_1.AadManifestMissingIdentifierUris.name, errors_1.AadManifestMissingIdentifierUris.message());
        }
    }
}
exports.AadAppForTeamsImpl = AadAppForTeamsImpl;
//# sourceMappingURL=aadAppForTeamsImpl.js.map