"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Progress = exports.Messages = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const constants_1 = require("../../constants");
const messages_1 = require("../../messages");
class Messages {
}
exports.Messages = Messages;
Messages.SkipBuild = "Skip building Tab frontend project because no change was detected since last build.";
Messages.SkipDeploy = `Skip deployment of Tab frontend project because no change was detected. To fully redeploy Tab frontend project, please remove '${path_1.default.join(constants_1.PathConstants.tabWorkingDir, constants_1.PathConstants.deploymentInfoFolder)}' folder and rerun the command.`;
Messages.StartCheckStaticWebsiteEnabled = (name) => `Checking if static website feature is enabled in Azure Storage account '${name}'.`;
Messages.StartEnableStaticWebsite = (name) => `Enabling static website feature for Azure Storage account '${name}'.`;
Messages.SkipEnableStaticWebsite = (name) => `Static website feature is already enabled for Azure Storage account ${name}.`;
Messages.StartSyncLocalToStorage = (localPath, storageName) => `Uploading local path '${localPath}' to Azure Storage account '${storageName}'.`;
Messages.StartDeleteAllBlobs = (storageName, containerName) => `Deleting all existing blobs in container '${containerName}' for Azure Storage account '${storageName}'.`;
Messages.StartUploadFiles = (sourceFolder, storageName) => `Uploading files in '${sourceFolder}' to Azure Storage account '${storageName}'.`;
Messages.FailedOperationWithErrorCode = (doOperation, errorCode) => `Failed to '${doOperation}' with error code '${errorCode}'.`;
Messages.GetEmptySasToken = "Failed to retrieve SAS token for Azure Storage account.";
exports.Progress = [
    messages_1.ProgressMessages.getDeploymentSrcAndDest,
    messages_1.ProgressMessages.clearStorageAccount,
    messages_1.ProgressMessages.uploadTabToStorage,
];
//# sourceMappingURL=messages.js.map