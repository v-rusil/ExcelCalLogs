"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageConfig = void 0;
const hostingConstant_1 = require("../../../common/azure-hosting/hostingConstant");
const hostingError_1 = require("../../../common/azure-hosting/hostingError");
const error_1 = require("../../error");
const tools_1 = require("../../../common/tools");
const constants_1 = require("./constants");
class StorageConfig {
    constructor(subscriptionId, resourceGroupName, location, storageName, credentials) {
        this.subscriptionId = subscriptionId;
        this.resourceGroupName = resourceGroupName;
        this.location = location;
        this.storageName = storageName;
        this.credentials = credentials;
    }
    static async fromEnvInfo(envInfo, scenario, tokenProvider) {
        const credentials = await tokenProvider.getIdentityCredentialAsync();
        if (!credentials) {
            throw new hostingError_1.PreconditionError(hostingConstant_1.AzureOpsConstant.FAIL_TO_GET_AZURE_CREDENTIALS(), [
                hostingConstant_1.AzureOpsConstant.TRY_LOGIN_AZURE(),
            ]);
        }
        const storage = envInfo.state[scenario];
        const resourceId = error_1.CheckThrowSomethingMissing(constants_1.errorSource, "storageResourceId", storage === null || storage === void 0 ? void 0 : storage.storageResourceId);
        return new StorageConfig(tools_1.getSubscriptionIdFromResourceId(resourceId), tools_1.getResourceGroupNameFromResourceId(resourceId), envInfo.state.solution.location, tools_1.getStorageAccountNameFromResourceId(resourceId), credentials);
    }
}
exports.StorageConfig = StorageConfig;
//# sourceMappingURL=configs.js.map