"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildQuestionNode = exports.confirmPasswordQuestion = exports.adminPasswordQuestion = exports.adminNameQuestion = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../common/localizeUtils");
const constants_1 = require("./constants");
const checkInput_1 = require("./utils/checkInput");
exports.adminNameQuestion = {
    name: constants_1.Constants.questionKey.adminName,
    title: localizeUtils_1.getLocalizedString("plugins.sql.getQuestionAdminName.title"),
    type: "text",
    validation: {
        validFunc: async (input, previousInputs) => {
            const res = checkInput_1.sqlUserNameValidator(input);
            return res;
        },
    },
};
exports.adminPasswordQuestion = {
    name: constants_1.Constants.questionKey.adminPassword,
    title: localizeUtils_1.getLocalizedString("plugins.sql.getQuestionAdminPassword.title"),
    type: "text",
    password: true,
    validation: {
        validFunc: async (input, previousInputs) => {
            const password = input;
            const name = previousInputs[constants_1.Constants.questionKey.adminName];
            const res = checkInput_1.sqlPasswordValidatorGenerator(name)(password);
            return res;
        },
    },
};
exports.confirmPasswordQuestion = {
    name: constants_1.Constants.questionKey.confirmPassword,
    title: localizeUtils_1.getLocalizedString("plugins.sql.getQuestionConfirmPassword.title"),
    type: "text",
    password: true,
    validation: {
        validFunc: async (input, previousInputs) => {
            const confirm = input;
            const password = previousInputs[constants_1.Constants.questionKey.adminPassword];
            const res = checkInput_1.sqlConfirmPasswordValidatorGenerator(password)(confirm);
            return res;
        },
    },
};
function buildQuestionNode() {
    const sqlNode = new teamsfx_api_1.QTreeNode({
        type: "group",
    });
    sqlNode.addChild(new teamsfx_api_1.QTreeNode(exports.adminNameQuestion));
    sqlNode.addChild(new teamsfx_api_1.QTreeNode(exports.adminPasswordQuestion));
    sqlNode.addChild(new teamsfx_api_1.QTreeNode(exports.confirmPasswordQuestion));
    return sqlNode;
}
exports.buildQuestionNode = buildQuestionNode;
//# sourceMappingURL=questions.js.map