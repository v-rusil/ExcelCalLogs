"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureSqlResource = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
require("reflect-metadata");
const typedi_1 = require("typedi");
const constants_1 = require("../../constants");
const configure_1 = require("./actions/configure");
const provision_1 = require("./actions/provision");
const path = tslib_1.__importStar(require("path"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const folder_1 = require("../../../folder");
const tools_1 = require("../../../common/tools");
const utils_1 = require("../../utils");
let AzureSqlResource = class AzureSqlResource {
    constructor() {
        this.name = constants_1.ComponentNames.AzureSQL;
        this.outputs = constants_1.AzureSqlOutputs;
        this.finalOutputKeys = ["sqlResourceId", "endpoint", "databaseName"];
    }
    async generateBicep(context, inputs) {
        const prefix = inputs.provisionType === "database"
            ? "azureSql.provisionDatabase"
            : "azureSql.provisionServer";
        const mPath = path.join(folder_1.getTemplatesFolder(), "bicep", `${prefix}.module.bicep`);
        const oPath = path.join(folder_1.getTemplatesFolder(), "bicep", `${prefix}.orchestration.bicep`);
        let module = await fs_extra_1.default.readFile(mPath, "utf-8");
        let orch = await fs_extra_1.default.readFile(oPath, "utf-8");
        const suffix = tools_1.getUuid().substring(0, 6);
        const compileCtx = {
            suffix: suffix,
        };
        if (inputs.provisionType === "database") {
            module = await tools_1.generateBicepFromFile(mPath, compileCtx);
            orch = await tools_1.generateBicepFromFile(oPath, compileCtx);
        }
        const bicep = {
            type: "bicep",
            Provision: {
                Modules: { azureSql: module },
                Orchestration: orch,
            },
        };
        if (inputs.provisionType === "server") {
            bicep.Parameters = await fs_extra_1.default.readJson(path.join(folder_1.getTemplatesFolder(), "bicep", "azureSql.parameters.json"));
        }
        return teamsfx_api_1.ok([bicep]);
    }
    async provision(context, inputs) {
        if (utils_1.isLocalEnv(context)) {
            return teamsfx_api_1.ok(undefined);
        }
        const res = await provision_1.ProvisionActionImplement.execute(context, inputs);
        if (res.isErr())
            return teamsfx_api_1.err(res.error);
        return teamsfx_api_1.ok(undefined);
    }
    async configure(context, inputs) {
        if (utils_1.isLocalEnv(context)) {
            return teamsfx_api_1.ok(undefined);
        }
        const res = await configure_1.ConfigureActionImplement.execute(context, inputs);
        if (res.isErr())
            return teamsfx_api_1.err(res.error);
        return teamsfx_api_1.ok(undefined);
    }
};
AzureSqlResource = tslib_1.__decorate([
    typedi_1.Service("azure-sql")
], AzureSqlResource);
exports.AzureSqlResource = AzureSqlResource;
//# sourceMappingURL=azureSql.js.map