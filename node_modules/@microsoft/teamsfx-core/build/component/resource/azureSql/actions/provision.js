"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvisionActionImplement = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../../../constants");
const logger_1 = require("../../../middleware/logger");
const runWithCatchError_1 = require("../../../middleware/runWithCatchError");
const telemetry_1 = require("../../../middleware/telemetry");
const management_1 = require("../clients/management");
const config_1 = require("../config");
const constants_2 = require("../constants");
const errors_1 = require("../errors");
const questions_1 = require("../questions");
const results_1 = require("../results");
class ProvisionActionImplement {
    static async execute(context, inputs) {
        var _a;
        var _b, _c;
        const ctx = context;
        const state = ((_a = (_b = ctx.envInfo.state)[_c = constants_1.ComponentNames.AzureSQL]) !== null && _a !== void 0 ? _a : (_b[_c] = {}));
        config_1.removeDatabases(state);
        let shouldAsk;
        if (state.sqlResourceId) {
            const sqlMgrConfig = config_1.LoadManagementConfig(state);
            const sqlMgrClient = await management_1.ManagementClient.create(ctx.tokenProvider.azureAccountProvider, sqlMgrConfig);
            shouldAsk = !(await sqlMgrClient.existAzureSQL());
        }
        else {
            shouldAsk = true;
        }
        if (shouldAsk) {
            const node = questions_1.buildQuestionNode();
            const res = await teamsfx_api_1.traverse(node, inputs, ctx.userInteraction);
            if (res.isErr()) {
                throw results_1.SqlResultFactory.UserError(errors_1.ErrorMessage.SqlAskInputError.name, errors_1.ErrorMessage.SqlAskInputError.message(), res.error);
            }
            state.admin = inputs[constants_2.Constants.questionKey.adminName];
            state.adminPassword = inputs[constants_2.Constants.questionKey.adminPassword];
        }
        return teamsfx_api_1.ok([{ type: "service", name: "azure", remarks: "configure azure-sql" }]);
    }
}
ProvisionActionImplement.source = "SQL";
ProvisionActionImplement.stage = "pre-provision";
ProvisionActionImplement.telemetryComponentName = "fx-resource-azure-sql";
ProvisionActionImplement.loggerPrefix = "[SQL Component]";
ProvisionActionImplement.logFormatter = (message) => `${ProvisionActionImplement.loggerPrefix} ${message}`;
tslib_1.__decorate([
    lib_1.hooks([
        telemetry_1.TelemetryMW(telemetry_1.ActionTelemetryImplement.bind(null, ProvisionActionImplement.stage, ProvisionActionImplement.telemetryComponentName)),
        runWithCatchError_1.RunWithCatchErrorMW(ProvisionActionImplement.source, runWithCatchError_1.ActionErrorHandler),
        logger_1.LoggerMW(logger_1.ActionLogger.bind(null, ProvisionActionImplement.logFormatter)),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ProvisionActionImplement, "execute", null);
exports.ProvisionActionImplement = ProvisionActionImplement;
//# sourceMappingURL=provision.js.map