"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeDatabases = exports.loadDatabases = exports.LoadSqlConfig = exports.LoadManagementConfig = void 0;
const tools_1 = require("../../../common/tools");
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const results_1 = require("./results");
function LoadManagementConfig(state) {
    const subscriptionId = loadSubscriptionId(state);
    const resourceGroup = loadResourceGroup(state);
    const sqlEndpoint = state[constants_1.Constants.sqlEndpoint];
    const sqlServer = sqlEndpoint.split(".")[0];
    return {
        azureSubscriptionId: subscriptionId,
        resourceGroup: resourceGroup,
        sqlEndpoint: sqlEndpoint,
        sqlServer: sqlServer,
    };
}
exports.LoadManagementConfig = LoadManagementConfig;
function LoadSqlConfig(state, identity) {
    const sqlEndpoint = state[constants_1.Constants.sqlEndpoint];
    const databases = loadDatabases(state);
    return {
        sqlEndpoint: sqlEndpoint,
        identity: identity,
        databases: Object.values(databases),
    };
}
exports.LoadSqlConfig = LoadSqlConfig;
function loadDatabases(state) {
    const databases = {};
    for (const key of Object.keys(state)) {
        if (key.startsWith(constants_1.Constants.databaseName)) {
            databases[key] = state[key];
        }
    }
    return databases;
}
exports.loadDatabases = loadDatabases;
function removeDatabases(state) {
    for (const key of Object.keys(state)) {
        if (key.startsWith(constants_1.Constants.databaseName) && key !== constants_1.Constants.databaseName) {
            delete state[key];
        }
    }
}
exports.removeDatabases = removeDatabases;
function loadSubscriptionId(state) {
    let subscriptionId = "";
    const sqlResourceId = state["sqlResourceId"];
    if (sqlResourceId) {
        try {
            subscriptionId = tools_1.getSubscriptionIdFromResourceId(sqlResourceId);
        }
        catch (error) {
            throw results_1.SqlResultFactory.UserError(errors_1.ErrorMessage.SqlInvalidConfigError.name, errors_1.ErrorMessage.SqlInvalidConfigError.message(sqlResourceId, error.message), error);
        }
    }
    return subscriptionId;
}
function loadResourceGroup(state) {
    let resourceGroup = "";
    const sqlResourceId = state["sqlResourceId"];
    if (sqlResourceId) {
        try {
            resourceGroup = tools_1.getResourceGroupNameFromResourceId(sqlResourceId);
        }
        catch (error) {
            throw results_1.SqlResultFactory.UserError(errors_1.ErrorMessage.SqlInvalidConfigError.name, errors_1.ErrorMessage.SqlInvalidConfigError.message(sqlResourceId, error.message), error);
        }
    }
    return resourceGroup;
}
//# sourceMappingURL=config.js.map