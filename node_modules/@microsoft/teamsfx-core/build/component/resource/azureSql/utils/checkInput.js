"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.sqlConfirmPasswordValidatorGenerator = exports.sqlPasswordValidatorGenerator = exports.sqlUserNameValidator = void 0;
const localizeUtils_1 = require("../../../../common/localizeUtils");
function sqlUserNameValidator(name) {
    name = name === null || name === void 0 ? void 0 : name.trim();
    if (!name) {
        return localizeUtils_1.getLocalizedString("plugins.sql.getQuestionAdminName.validation.sqlUserNameEmpty");
    }
    if (invalidSqlUserName.names.includes(name.toLowerCase())) {
        return localizeUtils_1.getLocalizedString("plugins.sql.getQuestionAdminName.validation.sqlUserNameContainsSqlIdentifier");
    }
    if (name.search(/[^a-zA-Z0-9]+/) >= 0) {
        return localizeUtils_1.getLocalizedString("plugins.sql.getQuestionAdminName.validation.sqlUserNameContainsNonAlphanumeric");
    }
    if (name.match(/^[0-9]/)) {
        return localizeUtils_1.getLocalizedString("plugins.sql.getQuestionAdminName.validation.sqlUserNameStartWithNumber");
    }
    return undefined;
}
exports.sqlUserNameValidator = sqlUserNameValidator;
class invalidSqlUserName {
}
invalidSqlUserName.names = [
    "admin",
    "administrator",
    "sa",
    "root",
    "dbmanager",
    "loginmanager",
    "dbo",
    "guest",
    "public",
    "db_accessadmin",
    "db_backupoperator",
    "db_datareader",
    "db_datawriter",
    "db_ddladmin",
    "db_denydatareader",
    "db_denydatawriter",
    "db_owner",
    "db_securityadmin",
    "information_schema",
    "sys",
];
/**
 * Your password must be at least 8 characters in length.
 * Your password must be no more than 128 characters in length.
 * Your password must contain characters from three of the following categories â€“ English uppercase letters, English lowercase letters, numbers (0-9), and non-alphanumeric characters (!, $, #, %, etc.).
 * Your password cannot contain all or part of the login name. Part of a login name is defined as three or more consecutive alphanumeric characters.
 */
function sqlPasswordValidatorGenerator(name) {
    return (password) => {
        password = password === null || password === void 0 ? void 0 : password.trim();
        if (!password) {
            return localizeUtils_1.getLocalizedString("plugins.sql.getQuestionAdminPassword.validation.sqlPasswordEmpty");
        }
        if (password.length < 8) {
            return localizeUtils_1.getLocalizedString("plugins.sql.getQuestionAdminPassword.validation.sqlPasswordLengthLessThan8");
        }
        if (password.length > 128) {
            return localizeUtils_1.getLocalizedString("plugins.sql.getQuestionAdminPassword.validation.sqlPasswordLengthGreatThan128");
        }
        const containLowerLetters = password.match(/[a-z]+/) ? 1 : 0;
        const containUpperLetters = password.match(/[A-Z]+/) ? 1 : 0;
        const containNumbers = password.match(/[0-9]+/) ? 1 : 0;
        const containSpecialCharacters = password.match(/[\[\]{}/~`_"$&+,:;=?@#|'<>.^*()%!-]+/) ? 1 : 0;
        if (containLowerLetters + containUpperLetters + containNumbers + containSpecialCharacters < 3) {
            return localizeUtils_1.getLocalizedString("plugins.sql.getQuestionAdminPassword.validation.sqlPasswordMustContain3Categories");
        }
        if (password.toLowerCase().search(name.toLowerCase()) >= 0) {
            return localizeUtils_1.getLocalizedString("plugins.sql.getQuestionAdminPassword.validation.sqlPasswordCannotContainUserName");
        }
        return undefined;
    };
}
exports.sqlPasswordValidatorGenerator = sqlPasswordValidatorGenerator;
function sqlConfirmPasswordValidatorGenerator(password) {
    return (confirm) => {
        if (password !== confirm) {
            return localizeUtils_1.getLocalizedString("plugins.sql.getQuestionConfirmPassword.validation.sqlPasswordMustMatch");
        }
        return undefined;
    };
}
exports.sqlConfirmPasswordValidatorGenerator = sqlConfirmPasswordValidatorGenerator;
//# sourceMappingURL=checkInput.js.map