"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityResource = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("@feathersjs/hooks/lib");
require("reflect-metadata");
const typedi_1 = require("typedi");
const constants_1 = require("../constants");
const actionExecutionMW_1 = require("../middleware/actionExecutionMW");
const azureResource_1 = require("./azureResource");
let IdentityResource = class IdentityResource extends azureResource_1.AzureResource {
    constructor() {
        super(...arguments);
        this.name = constants_1.ComponentNames.Identity;
        this.bicepModuleName = constants_1.ComponentNames.Identity;
        this.outputs = constants_1.IdentityOutputs;
        this.finalOutputKeys = ["identityResourceId", "identityName", "identityClientId"];
    }
    async generateBicep(context, inputs) {
        return super.generateBicep(context, inputs);
    }
};
tslib_1.__decorate([
    lib_1.hooks([
        actionExecutionMW_1.ActionExecutionMW({
            enableTelemetry: true,
            telemetryComponentName: "fx-resource-azure-identity",
            telemetryEventName: "generate-arm-templates",
            errorSource: "msi",
        }),
    ]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], IdentityResource.prototype, "generateBicep", null);
IdentityResource = tslib_1.__decorate([
    typedi_1.Service(constants_1.ComponentNames.Identity)
], IdentityResource);
exports.IdentityResource = IdentityResource;
//# sourceMappingURL=identity.js.map