import { ActionContext, CloudResource, FxError, Inputs, InputsWithProjectPath, M365TokenProvider, QTreeNode, ResourceContextV3, Result, TokenProvider, v2, v3 } from "@microsoft/teamsfx-api";
import "reflect-metadata";
import { ResourcePermission, TeamsAppAdmin } from "../../../common/permissionInterface";
import { AppUser } from "./interfaces/appUser";
export declare class AppManifest implements CloudResource {
    name: string;
    outputs: {
        teamsAppId: {
            key: string;
        };
        tenantId: {
            key: string;
        };
    };
    finalOutputKeys: string[];
    init(context: v2.Context, inputs: InputsWithProjectPath, existingApp?: boolean): Promise<Result<undefined, FxError>>;
    addCapability(inputs: InputsWithProjectPath, capabilities: v3.ManifestCapability[], isM365?: boolean): Promise<Result<undefined, FxError>>;
    updateCapability(inputs: InputsWithProjectPath, capability: v3.ManifestCapability): Promise<Result<undefined, FxError>>;
    deleteCapability(inputs: InputsWithProjectPath, capability: v3.ManifestCapability): Promise<Result<undefined, FxError>>;
    capabilityExceedLimit(inputs: InputsWithProjectPath, capability: "staticTab" | "configurableTab" | "Bot" | "MessageExtension" | "WebApplicationInfo"): Promise<Result<boolean, FxError>>;
    provision(ctx: ResourceContextV3, inputs: InputsWithProjectPath, actionContext?: ActionContext): Promise<Result<undefined, FxError>>;
    provisionForCLI(ctx: v2.Context, inputs: InputsWithProjectPath, envInfo: v3.EnvInfoV3, tokenProvider: TokenProvider, actionContext?: ActionContext): Promise<Result<string, FxError>>;
    configure(ctx: ResourceContextV3, inputs: InputsWithProjectPath, actionContext?: ActionContext): Promise<Result<undefined, FxError>>;
    publish(ctx: ResourceContextV3, inputs: InputsWithProjectPath, actionCtx?: ActionContext): Promise<Result<undefined, FxError>>;
    validate(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<string[], FxError>>;
    build(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<string, FxError>>;
    deploy(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<undefined, FxError>>;
    deployV3(context: ResourceContextV3, inputs: InputsWithProjectPath): Promise<Result<Map<string, string>, FxError>>;
    /**
     * Check if manifest templates already exist.
     */
    preCheck(projectPath: string): Promise<string[]>;
    private getTeamsAppId;
    listCollaborator(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3 | undefined, m365TokenProvider: M365TokenProvider, teamsAppIdV3?: string): Promise<Result<TeamsAppAdmin[], FxError>>;
    grantPermission(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3 | undefined, m365TokenProvider: M365TokenProvider, userInfo: AppUser, teamsAppIdV3?: string): Promise<Result<ResourcePermission[], FxError>>;
    checkPermission(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v3.EnvInfoV3 | undefined, m365TokenProvider: M365TokenProvider, userInfo: AppUser, teamsAppIdV3?: string): Promise<Result<ResourcePermission[], FxError>>;
}
export declare function publishQuestion(inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
//# sourceMappingURL=appManifest.d.ts.map