import { FxError, Result, TeamsAppManifest, InputsWithProjectPath, v3, ContextV3 } from "@microsoft/teamsfx-api";
import "reflect-metadata";
export declare class ManifestUtils {
    readAppManifest(projectPath: string): Promise<Result<TeamsAppManifest, FxError>>;
    _readAppManifest(manifestTemplatePath: string): Promise<Result<TeamsAppManifest, FxError>>;
    writeAppManifest(appManifest: TeamsAppManifest, projectPath: string): Promise<Result<undefined, FxError>>;
    getTeamsAppManifestPath(projectPath: string): Promise<string>;
    addCapabilities(inputs: InputsWithProjectPath, capabilities: v3.ManifestCapability[], isM365?: boolean): Promise<Result<undefined, FxError>>;
    updateCapability(projectPath: string, capability: v3.ManifestCapability): Promise<Result<undefined, FxError>>;
    deleteCapability(projectPath: string, capability: v3.ManifestCapability): Promise<Result<undefined, FxError>>;
    capabilityExceedLimit(projectPath: string, capability: "staticTab" | "configurableTab" | "Bot" | "MessageExtension" | "WebApplicationInfo"): Promise<Result<boolean, FxError>>;
    _capabilityExceedLimit(manifest: TeamsAppManifest, capability: "staticTab" | "configurableTab" | "Bot" | "MessageExtension" | "WebApplicationInfo"): boolean;
    _getCapabilities(template: TeamsAppManifest): Result<string[], FxError>;
    /**
     * Only works for manifest.template.json
     * @param projectRoot
     * @returns
     */
    getCapabilities(projectRoot: string): Promise<Result<string[], FxError>>;
    getManifest(projectPath: string, envInfo: v3.EnvInfoV3, ignoreEnvStateValueMissing: boolean, telemetryProps?: Record<string, string>): Promise<Result<TeamsAppManifest, FxError>>;
    getManifestV3(manifestTemplatePath: string, state: any, withEmptyCapabilities?: boolean): Promise<Result<TeamsAppManifest, FxError>>;
    isExistingTab(inputs: InputsWithProjectPath, context: ContextV3): Promise<Result<boolean, FxError>>;
}
export declare function resolveManifestTemplate(envInfo: v3.EnvInfoV3, templateString: string, keepEnvStatePlaceHoldersIfValuesNotExist?: boolean): string;
export declare function getManifestTemplatePath(projectRoot: string): Promise<string>;
export declare const manifestUtils: ManifestUtils;
//# sourceMappingURL=ManifestUtils.d.ts.map