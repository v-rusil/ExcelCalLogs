"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStudioClient = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const errors_1 = require("./errors");
const results_1 = require("./results");
const constants_1 = require("./constants");
const utils_1 = require("./utils/utils");
const telemetry_1 = require("./utils/telemetry");
const constants_2 = require("./constants");
const constants_3 = require("../../../common/constants");
const localizeUtils_1 = require("../../../common/localizeUtils");
const telemetry_2 = require("../../../common/telemetry");
const tools_1 = require("../../../common/tools");
// eslint-disable-next-line @typescript-eslint/no-namespace
var AppStudioClient;
(function (AppStudioClient) {
    const baseUrl = constants_2.getAppStudioEndpoint();
    let region;
    /**
     * Set user region
     * @param _region e.g. https://dev.teams.microsoft.com/amer
     */
    function setRegion(_region) {
        region = _region;
    }
    AppStudioClient.setRegion = setRegion;
    /**
     * Creates a new axios instance to call app studio to prevent setting the accessToken on global instance.
     * @param {string}  appStudioToken
     * @returns {AxiosInstance}
     */
    function createRequesterWithToken(appStudioToken, _regionalUrl) {
        const instance = axios_1.default.create({
            baseURL: _regionalUrl !== null && _regionalUrl !== void 0 ? _regionalUrl : baseUrl,
        });
        instance.defaults.headers.common["Authorization"] = `Bearer ${appStudioToken}`;
        instance.defaults.headers.common["Client-Source"] = "teamstoolkit";
        instance.interceptors.request.use(function (config) {
            config.params = Object.assign({ teamstoolkit: true }, config.params);
            return config;
        });
        return instance;
    }
    function wrapException(e, apiName) {
        var _a, _b, _c, _d, _e;
        const correlationId = (_a = e.response) === null || _a === void 0 ? void 0 : _a.headers[constants_1.Constants.CORRELATION_ID];
        const requestPath = ((_b = e.request) === null || _b === void 0 ? void 0 : _b.path) ? `${e.request.method} ${e.request.path}` : "";
        const extraData = ((_c = e.response) === null || _c === void 0 ? void 0 : _c.data) ? `data: ${JSON.stringify(e.response.data)}` : "";
        const error = results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.DeveloperPortalAPIFailedError.name, errors_1.AppStudioError.DeveloperPortalAPIFailedError.message(e, correlationId, requestPath, apiName, extraData));
        telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.appStudioApi, error, {
            method: (_d = e.request) === null || _d === void 0 ? void 0 : _d.method,
            "status-code": `${(_e = e === null || e === void 0 ? void 0 : e.response) === null || _e === void 0 ? void 0 : _e.status}`,
            url: `<${apiName}-url>`,
        });
        return error;
    }
    /**
     * Import an app registration in app studio with the given archived file and returns the app definition.
     * @param {Buffer}  file - Zip file with manifest.json and two icons
     * @param {string}  appStudioToken
     * @param {boolean} overwrite
     * @param {LogProvider} logProvider
     * @returns {Promise<AppDefinition>}
     */
    async function importApp(file, appStudioToken, logProvider, overwrite = false) {
        var _a, _b, _c;
        try {
            const requester = createRequesterWithToken(appStudioToken, region);
            const response = await utils_1.RetryHandler.Retry(() => requester.post(`/api/appdefinitions/v2/import`, file, {
                headers: { "Content-Type": "application/zip" },
                params: {
                    overwriteIfAppAlreadyExists: overwrite,
                },
            }));
            if (response && response.data) {
                const app = response.data;
                await (logProvider === null || logProvider === void 0 ? void 0 : logProvider.debug(`Received data from app studio ${JSON.stringify(app)}`));
                return app;
            }
            else {
                throw new Error(`Cannot create teams app`);
            }
        }
        catch (e) {
            if (((_a = e.response) === null || _a === void 0 ? void 0 : _a.status) === 409) {
                const error = results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.TeamsAppCreateConflictError.name, errors_1.AppStudioError.TeamsAppCreateConflictError.message(), constants_3.HelpLinks.SwitchAccountOrSub);
                throw error;
            }
            // Corner case: The provided app ID conflict with an existing published app
            // See Developer Portal PR: 507264
            if (((_b = e.response) === null || _b === void 0 ? void 0 : _b.status) == 422 &&
                ((_c = e.response) === null || _c === void 0 ? void 0 : _c.data.includes("App already exists and published"))) {
                const error = results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.TeamsAppCreateConflictWithPublishedAppError.name, errors_1.AppStudioError.TeamsAppCreateConflictWithPublishedAppError.message());
                throw error;
            }
            const error = wrapException(e, constants_1.APP_STUDIO_API_NAMES.CREATE_APP);
            throw error;
        }
    }
    AppStudioClient.importApp = importApp;
    async function getApp(teamsAppId, appStudioToken, logProvider) {
        var _a;
        let requester;
        try {
            let response;
            if (region) {
                requester = createRequesterWithToken(appStudioToken, region);
                try {
                    response = await utils_1.RetryHandler.Retry(() => requester.get(`/api/appdefinitions/${teamsAppId}`));
                }
                catch (e) {
                    // Teams apps created by non-regional API cannot be found by regional API
                    if (((_a = e.response) === null || _a === void 0 ? void 0 : _a.status) == 404) {
                        requester = createRequesterWithToken(appStudioToken);
                        response = await utils_1.RetryHandler.Retry(() => requester.get(`/api/appdefinitions/${teamsAppId}`));
                    }
                    else {
                        throw e;
                    }
                }
            }
            else {
                requester = createRequesterWithToken(appStudioToken);
                response = await utils_1.RetryHandler.Retry(() => requester.get(`/api/appdefinitions/${teamsAppId}`));
            }
            if (response && response.data) {
                const app = response.data;
                if (app && app.teamsAppId && app.teamsAppId === teamsAppId) {
                    return app;
                }
                else {
                    await (logProvider === null || logProvider === void 0 ? void 0 : logProvider.error(`teamsAppId mismatch. Input: ${teamsAppId}. Got: ${app.teamsAppId}`));
                }
            }
        }
        catch (e) {
            const error = wrapException(e, constants_1.APP_STUDIO_API_NAMES.GET_APP);
            throw error;
        }
        throw new Error(`Cannot get the app definition with app ID ${teamsAppId}`);
    }
    AppStudioClient.getApp = getApp;
    /**
     * Check if app exists in the user's organization by the Teams app id
     * @param teamsAppId
     * @param appStudioToken
     * @param logProvider
     * @returns
     */
    async function checkExistsInTenant(teamsAppId, appStudioToken, logProvider) {
        const requester = createRequesterWithToken(appStudioToken, region);
        try {
            const response = await utils_1.RetryHandler.Retry(() => requester.get(`/api/appdefinitions/manifest/${teamsAppId}`));
            if (response && response.data) {
                return response.data;
            }
            else {
                return false;
            }
        }
        catch (e) {
            wrapException(e, constants_1.APP_STUDIO_API_NAMES.EXISTS_IN_TENANTS);
            return false;
        }
    }
    AppStudioClient.checkExistsInTenant = checkExistsInTenant;
    /**
     * Publish Teams app to Teams App Catalog
     * @param teamsAppId
     * @param file
     * @param appStudioToken
     * @returns
     */
    async function publishTeamsApp(teamsAppId, file, appStudioToken) {
        try {
            const requester = createRequesterWithToken(appStudioToken, region);
            const response = await utils_1.RetryHandler.Retry(() => requester.post("/api/publishing", file, {
                headers: { "Content-Type": "application/zip" },
            }));
            if (response && response.data) {
                if (response.data.error) {
                    // To avoid App Studio BadGateway error
                    // The app is actually published to app catalog.
                    if (response.data.error.code === "BadGateway") {
                        const appDefinition = await getAppByTeamsAppId(teamsAppId, appStudioToken);
                        if (appDefinition) {
                            return appDefinition.teamsAppId;
                        }
                    }
                    const error = new Error(response === null || response === void 0 ? void 0 : response.data.error.message);
                    error.response = response;
                    error.request = response.request;
                    const exception = wrapException(error, constants_1.APP_STUDIO_API_NAMES.PUBLISH_APP);
                    throw exception;
                }
                else {
                    return response.data.id;
                }
            }
            else {
                throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppPublishFailedError.name, errors_1.AppStudioError.TeamsAppPublishFailedError.message(teamsAppId, "POST /api/publishing"));
            }
        }
        catch (e) {
            if (e instanceof teamsfx_api_1.SystemError) {
                throw e;
            }
            else {
                const error = wrapException(e, constants_1.APP_STUDIO_API_NAMES.PUBLISH_APP);
                throw error;
            }
        }
    }
    AppStudioClient.publishTeamsApp = publishTeamsApp;
    /**
     * Update existed publish request
     * @param teamsAppId
     * @param file
     * @param appStudioToken
     * @returns
     */
    async function publishTeamsAppUpdate(teamsAppId, file, appStudioToken) {
        var _a, _b, _c;
        try {
            // Get App Definition from Teams App Catalog
            const appDefinition = await getAppByTeamsAppId(teamsAppId, appStudioToken);
            const requester = createRequesterWithToken(appStudioToken, region);
            let response = null;
            if (appDefinition) {
                // update the existing app
                response = await requester.post(`/api/publishing/${appDefinition.teamsAppId}/appdefinitions`, file, { headers: { "Content-Type": "application/zip" } });
            }
            else {
                throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppPublishFailedError.name, errors_1.AppStudioError.TeamsAppPublishFailedError.message(teamsAppId, `GET /api/publishing/${teamsAppId}`));
            }
            const requestPath = `${(_a = response.request) === null || _a === void 0 ? void 0 : _a.method} ${(_b = response.request) === null || _b === void 0 ? void 0 : _b.path}`;
            if (response && response.data) {
                if (response.data.error || response.data.errorMessage) {
                    const error = new Error(((_c = response.data.error) === null || _c === void 0 ? void 0 : _c.message) || response.data.errorMessage);
                    error.response = response;
                    error.request = response.request;
                    const exception = wrapException(error, constants_1.APP_STUDIO_API_NAMES.UPDATE_PUBLISHED_APP);
                    throw exception;
                }
                else {
                    return response.data.teamsAppId;
                }
            }
            else {
                throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppPublishFailedError.name, errors_1.AppStudioError.TeamsAppPublishFailedError.message(teamsAppId, requestPath));
            }
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.SystemError) {
                throw error;
            }
            else {
                const exception = wrapException(error, constants_1.APP_STUDIO_API_NAMES.UPDATE_PUBLISHED_APP);
                throw exception;
            }
        }
    }
    AppStudioClient.publishTeamsAppUpdate = publishTeamsAppUpdate;
    async function getAppByTeamsAppId(teamsAppId, appStudioToken) {
        const requester = createRequesterWithToken(appStudioToken, region);
        try {
            const response = await requester.get(`/api/publishing/${teamsAppId}`);
            if (response && response.data && response.data.value && response.data.value.length > 0) {
                const appdefinitions = response.data.value[0].appDefinitions.map((item) => {
                    return {
                        lastModifiedDateTime: item.lastModifiedDateTime
                            ? new Date(item.lastModifiedDateTime)
                            : null,
                        publishingState: item.publishingState,
                        teamsAppId: item.teamsAppId,
                        displayName: item.displayName,
                    };
                });
                return appdefinitions[appdefinitions.length - 1];
            }
            else {
                return undefined;
            }
        }
        catch (e) {
            const error = wrapException(e, constants_1.APP_STUDIO_API_NAMES.GET_PUBLISHED_APP);
            return undefined;
        }
    }
    AppStudioClient.getAppByTeamsAppId = getAppByTeamsAppId;
    async function getUserList(teamsAppId, appStudioToken) {
        let app;
        try {
            app = await getApp(teamsAppId, appStudioToken);
        }
        catch (error) {
            throw error;
        }
        return app.userList;
    }
    AppStudioClient.getUserList = getUserList;
    async function checkPermission(teamsAppId, appStudioToken, userObjectId) {
        let userList;
        try {
            userList = await getUserList(teamsAppId, appStudioToken);
        }
        catch (error) {
            return constants_1.Constants.PERMISSIONS.noPermission;
        }
        const findUser = userList === null || userList === void 0 ? void 0 : userList.find((user) => user.aadId === userObjectId);
        if (!findUser) {
            return constants_1.Constants.PERMISSIONS.noPermission;
        }
        if (findUser.isAdministrator) {
            return constants_1.Constants.PERMISSIONS.admin;
        }
        else {
            return constants_1.Constants.PERMISSIONS.operative;
        }
    }
    AppStudioClient.checkPermission = checkPermission;
    async function grantPermission(teamsAppId, appStudioToken, newUser) {
        var _a, _b, _c, _d;
        let app;
        try {
            app = await getApp(teamsAppId, appStudioToken);
        }
        catch (error) {
            throw error;
        }
        if (checkUser(app, newUser)) {
            return;
        }
        const findUser = (_a = app.userList) === null || _a === void 0 ? void 0 : _a.findIndex((user) => user["aadId"] === newUser.aadId);
        if (findUser && findUser >= 0) {
            return;
        }
        (_b = app.userList) === null || _b === void 0 ? void 0 : _b.push(newUser);
        let requester;
        try {
            let response;
            if (region) {
                try {
                    requester = createRequesterWithToken(appStudioToken, region);
                    response = await requester.post(`/api/appdefinitions/${teamsAppId}/owner`, app);
                }
                catch (e) {
                    // Teams apps created by non-regional API cannot be found by regional API
                    if (((_c = e.response) === null || _c === void 0 ? void 0 : _c.status) == 404) {
                        requester = createRequesterWithToken(appStudioToken);
                        response = await requester.post(`/api/appdefinitions/${teamsAppId}/owner`, app);
                    }
                    else {
                        throw e;
                    }
                }
            }
            else {
                requester = createRequesterWithToken(appStudioToken);
                response = await requester.post(`/api/appdefinitions/${teamsAppId}/owner`, app);
            }
            if (!response || !response.data || !checkUser(response.data, newUser)) {
                throw new Error(constants_1.ErrorMessages.GrantPermissionFailed);
            }
        }
        catch (err) {
            if (((_d = err === null || err === void 0 ? void 0 : err.message) === null || _d === void 0 ? void 0 : _d.indexOf("Request failed with status code 400")) >= 0) {
                requester = createRequesterWithToken(appStudioToken, region);
                await requester.post(`/api/appdefinitions/${teamsAppId}/owner`, app.userList);
            }
            else {
                wrapException(err, constants_1.APP_STUDIO_API_NAMES.UPDATE_OWNER);
                throw err;
            }
        }
    }
    AppStudioClient.grantPermission = grantPermission;
    async function getAppPackage(teamsAppId, appStudioToken, logProvider) {
        logProvider === null || logProvider === void 0 ? void 0 : logProvider.info("Downloading app package for app " + teamsAppId);
        const requester = createRequesterWithToken(appStudioToken, region);
        try {
            const response = await utils_1.RetryHandler.Retry(() => requester.get(`/api/appdefinitions/${teamsAppId}/manifest`));
            if (response && response.data) {
                logProvider === null || logProvider === void 0 ? void 0 : logProvider.info("Download app package successfully");
                return response.data;
            }
            else {
                throw new Error(localizeUtils_1.getLocalizedString("plugins.appstudio.emptyAppPackage", teamsAppId));
            }
        }
        catch (e) {
            const error = wrapException(e, constants_1.APP_STUDIO_API_NAMES.GET_APP_PACKAGE);
            throw error;
        }
    }
    AppStudioClient.getAppPackage = getAppPackage;
    async function partnerCenterAppPackageValidation(file, appStudioToken) {
        const requester = createRequesterWithToken(appStudioToken, region);
        try {
            const response = await utils_1.RetryHandler.Retry(() => requester.post("/api/appdefinitions/partnerCenterAppPackageValidation", file, {
                headers: { "Content-Type": "application/zip" },
            }));
            return response === null || response === void 0 ? void 0 : response.data;
        }
        catch (e) {
            const error = wrapException(e, constants_1.APP_STUDIO_API_NAMES.VALIDATE_APP_PACKAGE);
            throw error;
        }
    }
    AppStudioClient.partnerCenterAppPackageValidation = partnerCenterAppPackageValidation;
    function checkUser(app, newUser) {
        var _a;
        const findUser = (_a = app.userList) === null || _a === void 0 ? void 0 : _a.findIndex((user) => user["aadId"] === newUser.aadId);
        if (findUser != undefined && findUser >= 0) {
            return true;
        }
        else {
            return false;
        }
    }
    async function getSideloadingStatus(appStudioToken) {
        var _a, _b, _c, _d, _e, _f, _g;
        const apiName = "<check-sideloading-status>";
        const apiPath = "/api/usersettings/mtUserAppPolicy";
        const instance = axios_1.default.create({
            baseURL: region !== null && region !== void 0 ? region : constants_2.getAppStudioEndpoint(),
            timeout: 30000,
        });
        instance.defaults.headers.common["Authorization"] = `Bearer ${appStudioToken}`;
        let retry = 0;
        const retryIntervalSeconds = 2;
        do {
            let response = undefined;
            try {
                response = await instance.get(apiPath);
                let result;
                if (response.status >= 400) {
                    result = undefined;
                }
                else {
                    result = (_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.isSideloadingAllowed;
                }
                if (result !== undefined) {
                    telemetry_2.sendTelemetryEvent(telemetry_2.Component.core, telemetry_2.TelemetryEvent.CheckSideloading, {
                        [telemetry_2.TelemetryProperty.IsSideloadingAllowed]: result + "",
                    });
                }
                else {
                    telemetry_2.sendTelemetryErrorEvent(telemetry_2.Component.core, telemetry_2.TelemetryEvent.CheckSideloading, new teamsfx_api_1.SystemError("M365Account", "UnknownValue", `AppStudio response code: ${response.status}, body: ${response.data}`), {
                        [telemetry_2.TelemetryProperty.CheckSideloadingStatusCode]: `${response.status}`,
                        [telemetry_2.TelemetryProperty.CheckSideloadingMethod]: "get",
                        [telemetry_2.TelemetryProperty.CheckSideloadingUrl]: apiName,
                    });
                }
                return result;
            }
            catch (error) {
                telemetry_2.sendTelemetryErrorEvent(telemetry_2.Component.core, telemetry_2.TelemetryEvent.CheckSideloading, new teamsfx_api_1.SystemError({
                    error,
                    source: "M365Account",
                    message: errors_1.AppStudioError.DeveloperPortalAPIFailedError.message(error, (_e = (_d = (_c = error.response) === null || _c === void 0 ? void 0 : _c.headers) === null || _d === void 0 ? void 0 : _d[constants_1.Constants.CORRELATION_ID]) !== null && _e !== void 0 ? _e : "", apiPath, apiName, ((_f = error.response) === null || _f === void 0 ? void 0 : _f.data) ? `data: ${JSON.stringify(error.response.data)}` : "")[0],
                }), {
                    [telemetry_2.TelemetryProperty.CheckSideloadingStatusCode]: `${(_g = error === null || error === void 0 ? void 0 : error.response) === null || _g === void 0 ? void 0 : _g.status}`,
                    [telemetry_2.TelemetryProperty.CheckSideloadingMethod]: "get",
                    [telemetry_2.TelemetryProperty.CheckSideloadingUrl]: apiName,
                });
                await tools_1.waitSeconds((retry + 1) * retryIntervalSeconds);
            }
        } while (++retry < 3);
        return undefined;
    }
    AppStudioClient.getSideloadingStatus = getSideloadingStatus;
})(AppStudioClient = exports.AppStudioClient || (exports.AppStudioClient = {}));
//# sourceMappingURL=appStudioClient.js.map