import { Inputs, OptionItem } from "@microsoft/teamsfx-api";
import { OpenAPI } from "openapi-types";
import { PluginLifeCycle } from "./constants";
import { IApimPluginConfig } from "./config";
export interface IAnswer {
    apiDocumentPath: string | undefined;
    apiPrefix: string | undefined;
    apiId: string | undefined;
    versionIdentity: string | undefined;
    openApiDocumentSpec?: OpenAPI.Document | undefined;
    save(lifecycle: PluginLifeCycle, apimConfig: IApimPluginConfig): void;
    validate?(lifecycle: PluginLifeCycle, apimConfig: IApimPluginConfig, projectRootDir: string): Promise<void>;
}
export declare function buildAnswer(inputs: Inputs | undefined): IAnswer;
declare class BaseAnswer {
    protected inputs: Inputs;
    constructor(inputs: Inputs);
    protected getOptionItem(questionName: string): OptionItem;
    protected getString(questionName: string): string;
}
export declare class VSCodeAnswer extends BaseAnswer implements IAnswer {
    constructor(inputs: Inputs);
    get apiDocumentPath(): string | undefined;
    get openApiDocumentSpec(): OpenAPI.Document | undefined;
    get apiPrefix(): string | undefined;
    get apiId(): string | undefined;
    get versionIdentity(): string | undefined;
    save(lifecycle: PluginLifeCycle, apimConfig: IApimPluginConfig): void;
}
export declare class CLIAnswer extends BaseAnswer implements IAnswer {
    constructor(inputs: Inputs);
    get apiDocumentPath(): string | undefined;
    get apiPrefix(): string | undefined;
    get apiId(): string | undefined;
    get versionIdentity(): string | undefined;
    save(lifecycle: PluginLifeCycle, apimConfig: IApimPluginConfig): void;
    validate(lifecycle: PluginLifeCycle, apimConfig: IApimPluginConfig, projectRootDir: string): Promise<void>;
    private validateWithMessage;
}
export {};
//# sourceMappingURL=answer.d.ts.map