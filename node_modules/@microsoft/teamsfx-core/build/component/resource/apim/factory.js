"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Factory = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const arm_apimanagement_1 = require("@azure/arm-apimanagement");
const arm_resources_1 = require("@azure/arm-resources");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const axios_1 = tslib_1.__importDefault(require("axios"));
const tools_1 = require("../../../common/tools");
const config_1 = require("./config");
const constants_1 = require("./constants");
const error_1 = require("./error");
const aadManager_1 = require("./managers/aadManager");
const apimManager_1 = require("./managers/apimManager");
const questionManager_1 = require("./managers/questionManager");
const scaffoldManager_1 = require("./managers/scaffoldManager");
const teamsAppAadManager_1 = require("./managers/teamsAppAadManager");
const CLI = tslib_1.__importStar(require("./questions/cliQuestion"));
const VSCode = tslib_1.__importStar(require("./questions/vscodeQuestion"));
const aadService_1 = require("./services/aadService");
const apimService_1 = require("./services/apimService");
const commonUtils_1 = require("./utils/commonUtils");
const openApiProcessor_1 = require("./utils/openApiProcessor");
class Factory {
    static async buildApimManager(envInfo, telemetryReporter, azureAccountProvider, logProvider) {
        const openApiProcessor = new openApiProcessor_1.OpenApiProcessor(telemetryReporter, logProvider);
        const solutionConfig = new config_1.SolutionConfig(envInfo);
        const lazyApimService = new commonUtils_1.Lazy(async () => await Factory.buildApimService(solutionConfig, azureAccountProvider, telemetryReporter, logProvider));
        return new apimManager_1.ApimManager(lazyApimService, openApiProcessor, telemetryReporter, logProvider);
    }
    static async buildAadManager(m365TokenProvider, telemetryReporter, logProvider) {
        const lazyAadService = new commonUtils_1.Lazy(async () => await Factory.buildAadService(m365TokenProvider, telemetryReporter, logProvider));
        return new aadManager_1.AadManager(lazyAadService, telemetryReporter, logProvider);
    }
    static async buildTeamsAppAadManager(m365TokenProvider, telemetryReporter, logProvider) {
        const lazyAadService = new commonUtils_1.Lazy(async () => await Factory.buildAadService(m365TokenProvider, telemetryReporter, logProvider));
        return new teamsAppAadManager_1.TeamsAppAadManager(lazyAadService, telemetryReporter, logProvider);
    }
    static async buildScaffoldManager(telemetryReporter, logProvider) {
        const openApiProcessor = new openApiProcessor_1.OpenApiProcessor(telemetryReporter, logProvider);
        return new scaffoldManager_1.ScaffoldManager(openApiProcessor, telemetryReporter, logProvider);
    }
    static async buildQuestionManager(platform, envInfo, azureAccountProvider, telemetryReporter, logProvider) {
        switch (platform) {
            case teamsfx_api_1.Platform.VSCode:
                const solutionConfig = new config_1.SolutionConfig(envInfo);
                // Lazy init apim service to get the latest subscription id in configuration
                const lazyApimService = new commonUtils_1.Lazy(async () => await Factory.buildApimService(solutionConfig, azureAccountProvider, telemetryReporter, logProvider));
                const openApiProcessor = new openApiProcessor_1.OpenApiProcessor(telemetryReporter, logProvider);
                const openApiDocumentQuestion = new VSCode.OpenApiDocumentQuestion(openApiProcessor, telemetryReporter, logProvider);
                const existingOpenApiDocumentFunc = new VSCode.ExistingOpenApiDocumentFunc(openApiProcessor, telemetryReporter, logProvider);
                const apiPrefixQuestion = new VSCode.ApiPrefixQuestion(telemetryReporter, logProvider);
                const apiVersionQuestion = new VSCode.ApiVersionQuestion(lazyApimService, telemetryReporter, logProvider);
                const newApiVersionQuestion = new VSCode.NewApiVersionQuestion(telemetryReporter, logProvider);
                return new questionManager_1.VscQuestionManager(openApiDocumentQuestion, apiPrefixQuestion, apiVersionQuestion, newApiVersionQuestion, existingOpenApiDocumentFunc);
            case teamsfx_api_1.Platform.CLI:
            case teamsfx_api_1.Platform.CLI_HELP:
                const cliOpenApiDocumentQuestion = new CLI.OpenApiDocumentQuestion();
                const cliApiPrefixQuestion = new CLI.ApiPrefixQuestion();
                const cliApiVersionQuestion = new CLI.ApiVersionQuestion();
                return new questionManager_1.CliQuestionManager(cliOpenApiDocumentQuestion, cliApiPrefixQuestion, cliApiVersionQuestion);
            default:
                throw error_1.BuildError(error_1.NotImplemented);
        }
    }
    static async buildApimService(solutionConfig, azureAccountProvider, telemetryReporter, logger) {
        const credential = error_1.AssertNotEmpty("credential", await (azureAccountProvider === null || azureAccountProvider === void 0 ? void 0 : azureAccountProvider.getIdentityCredentialAsync()));
        const identityCredential = error_1.AssertNotEmpty("identityCredential", await (azureAccountProvider === null || azureAccountProvider === void 0 ? void 0 : azureAccountProvider.getIdentityCredentialAsync()));
        let subscriptionId;
        if (solutionConfig.subscriptionId) {
            subscriptionId = solutionConfig.subscriptionId;
        }
        else {
            // fall back to asking user subscription info because some operations like "AddResource" can be before provision
            let subscriptionInfo = await (azureAccountProvider === null || azureAccountProvider === void 0 ? void 0 : azureAccountProvider.getSelectedSubscription());
            subscriptionInfo = error_1.AssertNotEmpty("subscriptionInfo", subscriptionInfo);
            subscriptionId = subscriptionInfo.subscriptionId;
        }
        const apiManagementClient = new arm_apimanagement_1.ApiManagementClient(credential, subscriptionId);
        const resourceProviderClient = new arm_resources_1.ResourceManagementClient(identityCredential, subscriptionId);
        return new apimService_1.ApimService(apiManagementClient, resourceProviderClient.providers, credential, subscriptionId, telemetryReporter, logger);
    }
    static async buildAadService(m365TokenProvider, telemetryReporter, logger) {
        const graphTokenRes = await (m365TokenProvider === null || m365TokenProvider === void 0 ? void 0 : m365TokenProvider.getAccessToken({ scopes: tools_1.GraphScopes }));
        const graphToken = (graphTokenRes === null || graphTokenRes === void 0 ? void 0 : graphTokenRes.isOk()) ? graphTokenRes.value : undefined;
        error_1.AssertNotEmpty("accessToken", graphToken);
        const axiosInstance = axios_1.default.create({
            baseURL: constants_1.AadDefaultValues.graphApiBasePath,
            headers: {
                authorization: `Bearer ${graphToken}`,
                "content-type": "application/json",
            },
        });
        return new aadService_1.AadService(axiosInstance, telemetryReporter, logger);
    }
}
exports.Factory = Factory;
//# sourceMappingURL=factory.js.map