"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssertConfigNotEmpty = exports.AssertNotEmpty = exports.BuildError = exports.FailedToParseResourceIdError = exports.UnhandledError = exports.ShortenToEmpty = exports.InvalidPropertyType = exports.EmptyProperty = exports.InvalidFunctionEndpoint = exports.NotImplemented = exports.InvalidCliOptionError = exports.AadOperationError = exports.ApimOperationError = exports.InvalidConfigValue = exports.NoPluginConfig = exports.EmptyConfigValue = exports.InvalidAadObjectId = exports.EmptyVersionInOpenApiDocument = exports.EmptyTitleInOpenApiDocument = exports.InvalidOpenApiDocument = exports.NoValidOpenApiDocument = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localizeUtils_1 = require("../../../common/localizeUtils");
const constants_1 = require("./constants");
var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["User"] = 0] = "User";
    ErrorType[ErrorType["System"] = 1] = "System";
})(ErrorType || (ErrorType = {}));
// User error
exports.NoValidOpenApiDocument = {
    type: ErrorType.User,
    code: "NoValidOpenApiDocument",
    message: () => [
        localizeUtils_1.getDefaultString("plugins.apim.error.NoValidOpenApiDocument"),
        localizeUtils_1.getLocalizedString("plugins.apim.error.NoValidOpenApiDocument"),
    ],
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.InvalidOpenApiDocument = {
    type: ErrorType.User,
    code: "InvalidOpenApiDocument",
    message: (filePath) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.InvalidOpenApiDocument", filePath),
        localizeUtils_1.getLocalizedString("plugins.apim.error.InvalidOpenApiDocument", filePath),
    ],
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.EmptyTitleInOpenApiDocument = {
    type: ErrorType.User,
    code: "EmptyTitleInOpenApiDocument",
    message: (filePath) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.EmptyTitleInOpenApiDocument", filePath),
        localizeUtils_1.getLocalizedString("plugins.apim.error.EmptyTitleInOpenApiDocument", filePath),
    ],
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.EmptyVersionInOpenApiDocument = {
    type: ErrorType.User,
    code: "EmptyVersionInOpenApiDocument",
    message: (filePath) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.EmptyVersionInOpenApiDocument", filePath),
        localizeUtils_1.getLocalizedString("plugins.apim.error.EmptyVersionInOpenApiDocument", filePath),
    ],
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.InvalidAadObjectId = {
    type: ErrorType.User,
    code: "InvalidAadObjectId",
    message: (objectId) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.InvalidAadObjectId", objectId),
        localizeUtils_1.getLocalizedString("plugins.apim.error.InvalidAadObjectId", objectId),
    ],
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.EmptyConfigValue = {
    type: ErrorType.User,
    code: "EmptyConfigValue",
    message: (component, name, filePath, retryOperation) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.EmptyConfigValue", name, component, filePath, retryOperation),
        localizeUtils_1.getLocalizedString("plugins.apim.error.EmptyConfigValue", name, component, filePath, retryOperation),
    ],
};
exports.NoPluginConfig = {
    type: ErrorType.User,
    code: "NoPluginConfig",
    message: (component, retryOperation) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.NoPluginConfig", component, retryOperation),
        localizeUtils_1.getLocalizedString("plugins.apim.error.NoPluginConfig", component, retryOperation),
    ],
};
exports.InvalidConfigValue = {
    type: ErrorType.User,
    code: "InvalidConfigValue",
    message: (component, name, message) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.InvalidConfigValue", name, component, message),
        localizeUtils_1.getLocalizedString("plugins.apim.error.InvalidConfigValue", name, component, message),
    ],
};
exports.ApimOperationError = {
    type: ErrorType.User,
    code: "ApimOperationError",
    message: (operation, resourceType) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.ApimOperationError", operation, resourceType),
        localizeUtils_1.getLocalizedString("plugins.apim.error.ApimOperationError", operation, resourceType),
    ],
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.AadOperationError = {
    type: ErrorType.User,
    code: "AadOperationError",
    message: (operation, resourceType) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.AadOperationError", operation, resourceType),
        localizeUtils_1.getLocalizedString("plugins.apim.error.AadOperationError", operation, resourceType),
    ],
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.InvalidCliOptionError = {
    type: ErrorType.User,
    code: "InvalidCliOptionError",
    message: (reason) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.InvalidCliOptionError", reason),
        localizeUtils_1.getLocalizedString("plugins.apim.error.InvalidCliOptionError", reason),
    ],
};
// System error
exports.NotImplemented = {
    type: ErrorType.System,
    code: "NotImplemented",
    message: () => [
        localizeUtils_1.getDefaultString("plugins.apim.error.NotImplemented"),
        localizeUtils_1.getLocalizedString("plugins.apim.error.NotImplemented"),
    ],
};
exports.InvalidFunctionEndpoint = {
    type: ErrorType.System,
    code: "InvalidFunctionEndpoint",
    message: () => [
        localizeUtils_1.getDefaultString("plugins.apim.error.InvalidFunctionEndpoint"),
        localizeUtils_1.getLocalizedString("plugins.apim.error.InvalidFunctionEndpoint"),
    ],
};
exports.EmptyProperty = {
    type: ErrorType.System,
    code: "EmptyProperty",
    message: (name) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.EmptyProperty", name),
        localizeUtils_1.getLocalizedString("plugins.apim.error.EmptyProperty", name),
    ],
};
exports.InvalidPropertyType = {
    type: ErrorType.System,
    code: "InvalidPropertyType",
    message: (name, type) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.InvalidPropertyType", name, type),
        localizeUtils_1.getLocalizedString("plugins.apim.error.InvalidPropertyType", name, type),
    ],
};
exports.ShortenToEmpty = {
    type: ErrorType.System,
    code: "ShortenToEmpty",
    message: (value) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.ShortenToEmpty", value),
        localizeUtils_1.getLocalizedString("plugins.apim.error.ShortenToEmpty", value),
    ],
};
exports.UnhandledError = {
    type: ErrorType.System,
    code: "UnhandledError",
    message: () => [
        localizeUtils_1.getDefaultString("plugins.apim.error.UnhandledError"),
        localizeUtils_1.getLocalizedString("plugins.apim.error.UnhandledError"),
    ],
};
exports.FailedToParseResourceIdError = {
    type: ErrorType.User,
    code: "FailedToParseResourceId",
    message: (name, resourceId) => [
        localizeUtils_1.getDefaultString("plugins.apim.error.FailedToParseResourceIdError", name, resourceId),
        localizeUtils_1.getLocalizedString("plugins.apim.error.FailedToParseResourceIdError", name, resourceId),
    ],
};
function BuildError(pluginError, ...params) {
    let innerError = undefined;
    if (params.length > 0 && params[0] instanceof Error) {
        innerError = params.shift();
    }
    const msgs = pluginError.message(...params);
    const message = innerError
        ? [`${msgs[0]} ${innerError === null || innerError === void 0 ? void 0 : innerError.message}`, `${msgs[1]} ${innerError === null || innerError === void 0 ? void 0 : innerError.message}`]
        : msgs;
    switch (pluginError.type) {
        case ErrorType.User:
            return new teamsfx_api_1.UserError({
                name: pluginError.code,
                source: constants_1.ProjectConstants.pluginShortName,
                message: message[0],
                displayMessage: message[1],
                error: innerError,
                helpLink: pluginError.helpLink,
            });
        case ErrorType.System:
            return new teamsfx_api_1.SystemError({
                name: pluginError.code,
                source: constants_1.ProjectConstants.pluginShortName,
                message: message[0],
                displayMessage: message[1],
                error: innerError,
                issueLink: pluginError.helpLink,
            });
    }
}
exports.BuildError = BuildError;
function AssertNotEmpty(name, value) {
    if (!value) {
        throw BuildError(exports.EmptyProperty, name);
    }
    return value;
}
exports.AssertNotEmpty = AssertNotEmpty;
function AssertConfigNotEmpty(component, name, value, envName) {
    if (!value) {
        throw BuildError(exports.EmptyConfigValue, component, name, constants_1.ProjectConstants.configFilePathArmSupported(envName), constants_1.ConfigRetryOperations[component][name]);
    }
    return value;
}
exports.AssertConfigNotEmpty = AssertConfigNotEmpty;
//# sourceMappingURL=error.js.map