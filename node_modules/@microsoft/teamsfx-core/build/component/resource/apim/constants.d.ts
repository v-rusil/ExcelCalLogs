import { IName } from "./interfaces/IName";
export declare class ProjectConstants {
    static readonly pluginShortName: string;
    static readonly pluginName: string;
    static readonly pluginDisplayName: string;
    static readonly configFilePathArmSupported: (envName: string) => string;
    static readonly configFilePath: string;
    static readonly workingDir: string;
    static readonly openApiDocumentFileName: string;
    static readonly readMeFileName: string;
    static readonly maxRetries: number;
    static readonly retryTimeInterval: number;
    static readonly helpLink: string;
    static readonly apimResourceProvider: string;
}
export declare class ApimDefaultValues {
    static readonly functionBasePath: string;
    static readonly productDescription: string;
    static readonly oAuthServerDescription: string;
    static readonly enableScopeName: string;
    static readonly userId: string;
    static readonly apiPrefix: string;
    static readonly apiVersion: string;
}
export declare class AadDefaultValues {
    static readonly graphApiBasePath: string;
    static readonly redirectUris: string[];
}
export declare class QuestionConstants {
    static readonly namespace: string;
    static readonly VSCode: {
        new (): {};
        readonly OpenApiDocument: {
            new (): {};
            readonly questionName: string;
            readonly funcName: string;
            readonly description: string;
            readonly excludeFolders: string[];
            readonly openApiDocumentFileExtensions: string[];
        };
        readonly ExistingOpenApiDocument: {
            new (): {};
            readonly questionName: string;
        };
        readonly ApiPrefix: {
            new (): {};
            readonly questionName: string;
            readonly description: string;
            readonly prompt: string;
        };
        readonly ApiVersion: {
            new (): {};
            readonly questionName: string;
            readonly description: string;
            readonly createNewApiVersionOption: string;
        };
        readonly NewApiVersion: {
            new (): {};
            readonly questionName: string;
            readonly description: string;
        };
    };
    static readonly CLI: {
        new (): {};
        readonly OpenApiDocument: {
            new (): {};
            readonly questionName: string;
            readonly description: string;
        };
        readonly ApiPrefix: {
            new (): {};
            readonly questionName: string;
            readonly description: string;
        };
        readonly ApiId: {
            new (): {};
            readonly questionName: string;
            readonly description: string;
        };
        readonly ApiVersion: {
            new (): {};
            readonly questionName: string;
            readonly description: string;
        };
    };
}
export declare class ValidationConstants {
    static readonly defaultMinLength = 1;
    static readonly defaultMaxLength = 256;
    static readonly resourceIdValidPattern: {
        regex: RegExp;
        message: string;
    };
    static readonly defaultValidPattern: {
        regex: RegExp;
        message: string;
    };
    static readonly guidValidPattern: {
        regex: RegExp;
        message: string;
    };
    static readonly CLI: {
        invalidOptionMessage: (optionName: string) => string;
        emptyOptionMessage: (optionName: string) => string;
        overrideOptionMessage: (optionName: string) => string;
    };
}
export declare class ApimPathInfo {
    static readonly BicepTemplateRelativeDir: string;
    static readonly ProvisionModuleFileName = "apimProvision.bicep";
    static readonly ConfigurationModuleFileName = "apimConfiguration.bicep";
}
export declare class ApimPluginConfigKeys {
    static readonly apimClientAADObjectId: string;
    static readonly apimClientAADClientId: string;
    static readonly apimClientAADClientSecret: string;
    static readonly apiPrefix: string;
    static readonly versionSetId: string;
    static readonly apiPath: string;
    static readonly apiDocumentPath: string;
    static readonly serviceResourceId: string;
    static readonly productResourceId: string;
    static readonly authServerResourceId: string;
    static readonly publisherEmail: string;
    static readonly publisherName: string;
}
export declare class FunctionPluginConfigKeys {
    static readonly functionEndpoint: string;
}
export declare class AadPluginConfigKeys {
    static readonly objectId: string;
    static readonly clientId: string;
    static readonly oauth2PermissionScopeId: string;
    static readonly applicationIdUris: string;
}
export declare class SolutionConfigKeys {
    static readonly resourceNameSuffix: string;
    static readonly teamsAppTenantId: string;
    static readonly resourceGroupName: string;
    static readonly location: string;
    static readonly remoteTeamsAppId: string;
    static readonly subscriptionId: string;
}
export declare enum TeamsToolkitComponent {
    FunctionPlugin = "fx-resource-function",
    AadPlugin = "fx-resource-aad-app-for-teams",
    Solution = "solution",
    ApimPlugin = "fx-resource-apim"
}
export declare enum TeamsToolkitComponentV3 {
    FunctionPlugin = "teams-api",
    AadPlugin = "aad-app",
    Solution = "solution",
    ApimPlugin = "apim"
}
export declare const RetryOperation: Readonly<{
    Create: string;
    Update: string;
    Provision: string;
    Deploy: string;
    Login: string;
}>;
export declare type RetryOperation = typeof RetryOperation[keyof typeof RetryOperation];
export declare const ComponentRetryOperations: {
    [key in TeamsToolkitComponent | TeamsToolkitComponentV3]: RetryOperation;
};
export declare const ConfigRetryOperations: {
    [key in TeamsToolkitComponent | TeamsToolkitComponentV3]: {
        [key: string]: RetryOperation;
    };
};
export declare enum PluginLifeCycle {
    CallFunc = "call-func",
    GetQuestions = "get-questions",
    Scaffold = "scaffold",
    Provision = "provision",
    GenerateArmTemplates = "generate-arm-templates",
    UpdateArmTemplates = "update-arm-templates",
    PostProvision = "post-provision",
    Deploy = "deploy"
}
export declare enum ProgressStep {
    None = "",
    Scaffold = "Scaffolding OpenAPI document",
    Provision = "Provisioning API Management",
    PostProvision = "Configuring API Management",
    Deploy = "Importing API to API Management"
}
export declare const PluginLifeCycleToProgressStep: {
    [key in PluginLifeCycle]: ProgressStep;
};
export declare const ProgressMessages: {
    [key in ProgressStep]: {
        [step: string]: string;
    };
};
export declare enum OperationStatus {
    Started = "started",
    Failed = "failed",
    Succeeded = "succeeded"
}
export declare class AzureResource {
    static ResourceGroup: IName;
    static APIM: IName;
    static Product: IName;
    static OAuthServer: IName;
    static VersionSet: IName;
    static API: IName;
    static ProductAPI: IName;
    static Aad: IName;
    static AadSecret: IName;
    static ServicePrincipal: IName;
    static ResourceProvider: IName;
}
export declare class Operation {
    static Create: IName;
    static Update: IName;
    static Get: IName;
    static List: IName;
    static ListNextPage: IName;
    static Import: IName;
    static Register: IName;
}
export declare enum ErrorHandlerResult {
    Continue = "Continue",
    Return = "Return"
}
export declare enum OpenApiSchemaVersion {
    V2 = "v2",
    V3 = "v3"
}
export declare class UserTask {
    static addResourceFuncName: string;
    static addFeatureFuncName: string;
}
export declare class ApimOutputBicepSnippet {
    static readonly ServiceResourceId = "provisionOutputs.apimOutput.value.serviceResourceId";
}
//# sourceMappingURL=constants.d.ts.map