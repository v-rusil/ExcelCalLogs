"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Telemetry = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const globalVars_1 = require("../../../../core/globalVars");
const constants_1 = require("../constants");
class TelemetryEventName {
}
TelemetryEventName.apimOperation = "apim-operation";
TelemetryEventName.aadOperation = "aad-operation";
TelemetryEventName.openApiDocument = "openapi-document";
class TelemetryPropertyName {
}
TelemetryPropertyName.component = "component";
TelemetryPropertyName.success = "success";
TelemetryPropertyName.errorType = "error-type";
TelemetryPropertyName.errorCode = "error-code";
TelemetryPropertyName.errorMessage = "error-message";
class Telemetry {
    static sendLifeCycleEvent(telemetryReporter, lifeCycle, status, error) {
        const properties = globalVars_1.globalVars.teamsAppId ? { appid: globalVars_1.globalVars.teamsAppId } : undefined;
        this.sendOperationEvent(telemetryReporter, lifeCycle, status, properties, undefined, error);
    }
    static sendApimOperationEvent(telemetryReporter, operation, resourceType, status, error) {
        const properties = {
            operation: operation.shortName,
            resource: resourceType.shortName,
            status: status,
        };
        this.sendOperationEvent(telemetryReporter, TelemetryEventName.apimOperation, status, properties, undefined, error);
    }
    static sendAadOperationEvent(telemetryReporter, operation, resourceType, status, retries, error) {
        const properties = {
            operation: operation.shortName,
            resource: resourceType.shortName,
            status: status,
            retries: retries.toString(),
        };
        this.sendOperationEvent(telemetryReporter, TelemetryEventName.aadOperation, status, properties, undefined, error);
    }
    static sendOperationEvent(telemetryReporter, eventName, status, properties, measurements, error) {
        switch (status) {
            case constants_1.OperationStatus.Started:
                telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendTelemetryEvent(`${eventName}-start`, this.buildProperties(properties), measurements);
                break;
            case constants_1.OperationStatus.Succeeded:
                telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendTelemetryEvent(eventName, this.buildProperties(properties));
                break;
            case constants_1.OperationStatus.Failed:
                telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendTelemetryErrorEvent(eventName, this.buildProperties(properties, error));
                break;
        }
    }
    static buildProperties(properties, error) {
        properties = properties !== null && properties !== void 0 ? properties : {};
        properties[TelemetryPropertyName.component] = constants_1.ProjectConstants.pluginName;
        if (!error) {
            properties[TelemetryPropertyName.success] = "yes";
            return properties;
        }
        properties[TelemetryPropertyName.success] = "no";
        properties[TelemetryPropertyName.errorCode] = error.name;
        properties[TelemetryPropertyName.errorMessage] = error.message;
        if (error instanceof teamsfx_api_1.UserError) {
            properties[TelemetryPropertyName.errorType] = "user";
        }
        if (error instanceof teamsfx_api_1.SystemError) {
            properties[TelemetryPropertyName.errorType] = "system";
        }
        return properties;
    }
}
exports.Telemetry = Telemetry;
//# sourceMappingURL=telemetry.js.map