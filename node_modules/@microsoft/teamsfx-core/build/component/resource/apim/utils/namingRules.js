"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamingRules = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const md5_1 = tslib_1.__importDefault(require("md5"));
const constants_1 = require("../constants");
const error_1 = require("../error");
class NamingRules {
    static validate(value, namingRule) {
        if (namingRule.minLength && value.length < namingRule.minLength) {
            return `The value should be longer than ${namingRule.minLength}.`;
        }
        if (namingRule.maxLength && value.length > namingRule.maxLength) {
            return `The value should be shorter than ${namingRule.maxLength}.`;
        }
        if (!namingRule.validPattern.regex.test(value)) {
            return namingRule.validPattern.message;
        }
        return undefined;
    }
    static sanitizeId(str, lowerCase, startWithNumber) {
        str = lowerCase ? str.toLowerCase() : str;
        str = str.replace(/[^0-9a-zA-Z]+/g, "-");
        str = startWithNumber ? str.replace(/^[-]+/, "") : str.replace(/^[-0-9]+/, "");
        return str.replace(/-$/, "");
    }
    static short(str, maxLength) {
        if (maxLength <= 0) {
            throw error_1.BuildError(error_1.ShortenToEmpty, str);
        }
        const result = str.substring(0, maxLength);
        return result;
    }
}
exports.NamingRules = NamingRules;
NamingRules.apiPrefix = {
    minLength: constants_1.ValidationConstants.defaultMinLength,
    maxLength: 40,
    validPattern: constants_1.ValidationConstants.resourceIdValidPattern,
    sanitize: (apiTitle) => {
        return NamingRules.short(NamingRules.sanitizeId(apiTitle, true, true), 40);
    },
};
NamingRules.versionIdentity = {
    minLength: constants_1.ValidationConstants.defaultMinLength,
    maxLength: 15,
    validPattern: constants_1.ValidationConstants.resourceIdValidPattern,
    sanitize: (apiVersion) => {
        return NamingRules.short(NamingRules.sanitizeId(apiVersion, true, true), 15);
    },
};
NamingRules.versionSetId = {
    minLength: constants_1.ValidationConstants.defaultMinLength,
    maxLength: constants_1.ValidationConstants.defaultMaxLength,
    validPattern: constants_1.ValidationConstants.defaultValidPattern,
    sanitize(apiNamePrefix, suffix) {
        return md5_1.default(`${apiNamePrefix}-${suffix}`);
    },
};
NamingRules.apiPath = {
    minLength: constants_1.ValidationConstants.defaultMinLength,
    maxLength: constants_1.ValidationConstants.defaultMaxLength,
    validPattern: constants_1.ValidationConstants.defaultValidPattern,
    sanitize(apiNamePrefix, suffix) {
        return `${NamingRules.short(apiNamePrefix, constants_1.ValidationConstants.defaultMaxLength - suffix.length - 1)}-${suffix}`;
    },
};
NamingRules.apiId = {
    minLength: constants_1.ValidationConstants.defaultMinLength,
    maxLength: 80,
    validPattern: constants_1.ValidationConstants.resourceIdValidPattern,
    sanitize(apiNamePrefix, versionIdentity, suffix) {
        return `${NamingRules.short(apiNamePrefix, 40)}-${NamingRules.short(suffix, 20)}-${NamingRules.short(versionIdentity, 15)}`;
    },
};
NamingRules.apimClientAADObjectId = {
    validPattern: constants_1.ValidationConstants.guidValidPattern,
};
NamingRules.apimClientAADClientId = {
    validPattern: constants_1.ValidationConstants.guidValidPattern,
};
NamingRules.aadDisplayName = {
    sanitize(appName) {
        return `${NamingRules.short(appName, constants_1.ValidationConstants.defaultMaxLength - 7)}-client`;
    },
};
NamingRules.aadSecretDisplayName = {
    sanitize(appName) {
        return NamingRules.short(appName, constants_1.ValidationConstants.defaultMaxLength);
    },
};
NamingRules.versionSetDisplayName = {
    sanitize(apiTitle) {
        return NamingRules.short(apiTitle, constants_1.ValidationConstants.defaultMaxLength);
    },
};
//# sourceMappingURL=namingRules.js.map