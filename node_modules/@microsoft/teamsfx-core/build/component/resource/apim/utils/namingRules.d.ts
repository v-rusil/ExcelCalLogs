export interface INamingRule {
    maxLength?: number;
    minLength?: number;
    validPattern: IValidPattern;
}
export interface ISanitizer {
    sanitize: (...params: string[]) => string;
}
export interface IValidPattern {
    regex: RegExp;
    message: string;
}
export declare class NamingRules {
    static apiPrefix: INamingRule & ISanitizer;
    static versionIdentity: INamingRule & ISanitizer;
    static versionSetId: INamingRule & ISanitizer;
    static apiPath: INamingRule & ISanitizer;
    static apiId: INamingRule & ISanitizer;
    static apimClientAADObjectId: INamingRule;
    static apimClientAADClientId: INamingRule;
    static aadDisplayName: ISanitizer;
    static aadSecretDisplayName: ISanitizer;
    static versionSetDisplayName: ISanitizer;
    static validate(value: string, namingRule: INamingRule): string | undefined;
    static sanitizeId(str: string, lowerCase: boolean, startWithNumber: boolean): string;
    static short(str: string, maxLength: number): string;
}
//# sourceMappingURL=namingRules.d.ts.map