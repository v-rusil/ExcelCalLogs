"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadService = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const error_1 = require("../error");
const constants_1 = require("../constants");
const log_1 = require("../log");
const commonUtils_1 = require("../utils/commonUtils");
const telemetry_1 = require("../utils/telemetry");
class AadService {
    constructor(axios, telemetryReporter, logger, maxRetries) {
        this.logger = logger;
        this.telemetryReporter = telemetryReporter;
        this.axios = axios;
        this.maxRetries = maxRetries;
    }
    async createAad(aadName) {
        const body = {
            displayName: aadName,
        };
        const response = await this.execute(constants_1.Operation.Create, constants_1.AzureResource.Aad, undefined, "post", "/applications", body);
        const data = error_1.AssertNotEmpty("response.data", response === null || response === void 0 ? void 0 : response.data);
        return data;
    }
    async addSecret(objectId, displayName) {
        const body = {
            passwordCredential: {
                displayName: displayName,
            },
        };
        const response = await this.execute(constants_1.Operation.Create, constants_1.AzureResource.AadSecret, undefined, "post", `/applications/${objectId}/addPassword`, body);
        const data = error_1.AssertNotEmpty("response.data", response === null || response === void 0 ? void 0 : response.data);
        return data;
    }
    async getAad(objectId) {
        const response = await this.execute(constants_1.Operation.Get, constants_1.AzureResource.Aad, objectId, "get", `/applications/${objectId}`, undefined);
        return response === null || response === void 0 ? void 0 : response.data;
    }
    async updateAad(objectId, data) {
        await this.execute(constants_1.Operation.Update, constants_1.AzureResource.Aad, objectId, "patch", `/applications/${objectId}`, data);
    }
    async getServicePrincipals(appId) {
        var _a;
        const response = await this.execute(constants_1.Operation.Get, constants_1.AzureResource.ServicePrincipal, appId, "get", `/servicePrincipals?$filter=appId eq '${appId}'`);
        const servicePrincipals = response === null || response === void 0 ? void 0 : response.data;
        const result = error_1.AssertNotEmpty("servicePrincipals.value", servicePrincipals === null || servicePrincipals === void 0 ? void 0 : servicePrincipals.value);
        if (result.length === 0) {
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info(log_1.LogMessages.resourceNotFound(constants_1.AzureResource.ServicePrincipal, appId));
        }
        return result;
    }
    async createServicePrincipalIfNotExists(appId) {
        const existingServicePrincipals = await this.getServicePrincipals(appId);
        if (existingServicePrincipals.length > 0) {
            return;
        }
        const body = {
            appId: appId,
        };
        await this.execute(constants_1.Operation.Create, constants_1.AzureResource.ServicePrincipal, appId, "post", "/servicePrincipals", body);
    }
    async execute(operation, resourceType, resourceId, method, url, data) {
        return await commonUtils_1.RetryHandler.retry(async (executionIndex) => {
            var _a, _b, _c, _d, _e, _f, _g;
            try {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info(executionIndex === 0
                    ? log_1.LogMessages.operationStarts(operation, resourceType, resourceId)
                    : log_1.LogMessages.operationRetry(operation, resourceType, resourceId));
                telemetry_1.Telemetry.sendAadOperationEvent(this.telemetryReporter, operation, resourceType, constants_1.OperationStatus.Started, executionIndex);
                const result = await this.axios.request({ method: method, url: url, data: data });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.info(log_1.LogMessages.operationSuccess(operation, resourceType, resourceId));
                telemetry_1.Telemetry.sendAadOperationEvent(this.telemetryReporter, operation, resourceType, constants_1.OperationStatus.Succeeded, executionIndex);
                return result;
            }
            catch (error) {
                error.message = `[Detail] ${(_f = (_e = (_d = (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.error) === null || _e === void 0 ? void 0 : _e.message) !== null && _f !== void 0 ? _f : error.message}`;
                (_g = this.logger) === null || _g === void 0 ? void 0 : _g.warning(log_1.LogMessages.operationFailed(operation, resourceType, resourceId));
                const wrappedError = error_1.BuildError(error_1.AadOperationError, error, operation.displayName, resourceType.displayName);
                telemetry_1.Telemetry.sendAadOperationEvent(this.telemetryReporter, operation, resourceType, constants_1.OperationStatus.Failed, executionIndex, wrappedError);
                throw wrappedError;
            }
        }, this.maxRetries);
    }
}
exports.AadService = AadService;
//# sourceMappingURL=aadService.js.map