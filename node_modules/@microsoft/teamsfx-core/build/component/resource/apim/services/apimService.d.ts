import { ApiManagementClient } from "@azure/arm-apimanagement";
import { ApiContract, ApiManagementServiceResource, ApiVersionSetContract, ApiVersionSetGetHeaders } from "@azure/arm-apimanagement/src/models";
import { OpenApiSchemaVersion } from "../constants";
import { LogProvider, TelemetryReporter } from "@microsoft/teamsfx-api";
import { TokenCredential } from "@azure/identity";
import { OpenAPI } from "openapi-types";
import { Providers } from "@azure/arm-resources";
export declare class ApimService {
    private readonly subscriptionId;
    private readonly apimClient;
    private readonly telemetryReporter;
    private readonly logger;
    private readonly credential;
    private readonly resourceProviderClient;
    constructor(apimClient: ApiManagementClient, resourceProviderClient: Providers, credential: TokenCredential, subscriptionId: string, telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    getService(resourceGroupName: string, serviceName: string): Promise<ApiManagementServiceResource | undefined>;
    getApi(resourceGroupName: string, serviceName: string, apiId: string): Promise<ApiContract | undefined>;
    listApi(resourceGroupName: string, serviceName: string, versionSetId?: string): Promise<ApiContract[]>;
    importApi(resourceGroupName: string, serviceName: string, apiId: string, apiPath: string, version: string, versionSetId: string, oAuthServerId: string, schemaVersion: OpenApiSchemaVersion, spec: OpenAPI.Document): Promise<void>;
    getVersionSet(resourceGroupName: string, serviceName: string, versionSetId: string): Promise<(ApiVersionSetContract & ApiVersionSetGetHeaders) | undefined>;
    createVersionSet(resourceGroupName: string, serviceName: string, versionSetId: string, versionSetName?: string): Promise<void>;
    checkProductApiExistence(resourceGroupName: string, serviceName: string, productId: string, apiId: string): Promise<boolean>;
    addApiToProduct(resourceGroupName: string, serviceName: string, productId: string, apiId: string): Promise<void>;
    getUserId(): Promise<string>;
    private execute;
    private generateVersionSetResourceId;
}
//# sourceMappingURL=apimService.d.ts.map