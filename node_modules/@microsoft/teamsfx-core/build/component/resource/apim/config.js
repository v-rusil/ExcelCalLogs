"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolutionConfig = exports.AadPluginConfig = exports.FunctionPluginConfig = exports.ApimPluginConfig = void 0;
const constants_1 = require("./constants");
const error_1 = require("./error");
const namingRules_1 = require("./utils/namingRules");
class ApimPluginConfig {
    constructor(config, envName) {
        if (!config) {
            const cname = constants_1.TeamsToolkitComponentV3.AadPlugin;
            throw error_1.BuildError(error_1.NoPluginConfig, cname, constants_1.ComponentRetryOperations[cname]);
        }
        this.config = config;
        this.envName = envName;
    }
    get apimClientAADObjectId() {
        return this.getValue(constants_1.ApimPluginConfigKeys.apimClientAADObjectId, namingRules_1.NamingRules.apimClientAADObjectId);
    }
    set apimClientAADObjectId(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.apimClientAADObjectId, value);
    }
    get apimClientAADClientId() {
        return this.getValue(constants_1.ApimPluginConfigKeys.apimClientAADClientId, namingRules_1.NamingRules.apimClientAADClientId);
    }
    set apimClientAADClientId(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.apimClientAADClientId, value);
    }
    get apimClientAADClientSecret() {
        return this.getValue(constants_1.ApimPluginConfigKeys.apimClientAADClientSecret);
    }
    set apimClientAADClientSecret(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.apimClientAADClientSecret, value);
    }
    get apiPrefix() {
        return this.getValue(constants_1.ApimPluginConfigKeys.apiPrefix, namingRules_1.NamingRules.apiPrefix);
    }
    set apiPrefix(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.apiPrefix, value);
    }
    get versionSetId() {
        return this.getValue(constants_1.ApimPluginConfigKeys.versionSetId, namingRules_1.NamingRules.versionSetId);
    }
    set versionSetId(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.versionSetId, value);
    }
    get apiPath() {
        return this.getValue(constants_1.ApimPluginConfigKeys.apiPath, namingRules_1.NamingRules.apiPath);
    }
    set apiPath(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.apiPath, value);
    }
    get apiDocumentPath() {
        return this.getValue(constants_1.ApimPluginConfigKeys.apiDocumentPath);
    }
    set apiDocumentPath(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.apiDocumentPath, value);
    }
    get serviceResourceId() {
        return this.getValue(constants_1.ApimPluginConfigKeys.serviceResourceId);
    }
    set serviceResourceId(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.serviceResourceId, value);
    }
    get productResourceId() {
        return this.getValue(constants_1.ApimPluginConfigKeys.productResourceId);
    }
    set productResourceId(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.productResourceId, value);
    }
    get authServerResourceId() {
        return this.getValue(constants_1.ApimPluginConfigKeys.authServerResourceId);
    }
    set authServerResourceId(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.authServerResourceId, value);
    }
    get publisherEmail() {
        return this.getValue(constants_1.ApimPluginConfigKeys.publisherEmail);
    }
    set publisherEmail(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.publisherEmail, value);
    }
    get publisherName() {
        return this.getValue(constants_1.ApimPluginConfigKeys.publisherName);
    }
    set publisherName(value) {
        this.setValue(constants_1.ApimPluginConfigKeys.publisherName, value);
    }
    getValue(key, namingRule) {
        const value = this.config.getString ? this.config.getString(key) : this.config[key];
        if (namingRule && value) {
            const message = namingRules_1.NamingRules.validate(value, namingRule);
            if (message) {
                throw error_1.BuildError(error_1.InvalidConfigValue, constants_1.TeamsToolkitComponentV3.ApimPlugin, key, message);
            }
        }
        return value;
    }
    setValue(key, value) {
        this.config.set ? this.config.set(key, value) : (this.config[key] = value);
    }
    checkAndGet(key) {
        const value = error_1.AssertConfigNotEmpty(constants_1.TeamsToolkitComponentV3.ApimPlugin, key, this.getValue(key), this.envName);
        return value;
    }
}
exports.ApimPluginConfig = ApimPluginConfig;
class FunctionPluginConfig {
    constructor(envInfo) {
        this.configOfOtherPlugins = envInfo.state;
        this.envName = envInfo.envName;
    }
    get functionEndpoint() {
        return this.checkAndGet(constants_1.FunctionPluginConfigKeys.functionEndpoint);
    }
    checkAndGet(key) {
        return checkAndGetOtherPluginConfig(this.configOfOtherPlugins, constants_1.TeamsToolkitComponentV3.FunctionPlugin, key, this.envName);
    }
}
exports.FunctionPluginConfig = FunctionPluginConfig;
class AadPluginConfig {
    constructor(envInfo) {
        this.configOfOtherPlugins = envInfo.state;
        this.envName = envInfo.envName;
    }
    get objectId() {
        return this.checkAndGet(constants_1.AadPluginConfigKeys.objectId);
    }
    get clientId() {
        return this.checkAndGet(constants_1.AadPluginConfigKeys.clientId);
    }
    get oauth2PermissionScopeId() {
        return this.checkAndGet(constants_1.AadPluginConfigKeys.oauth2PermissionScopeId);
    }
    get applicationIdUris() {
        return this.checkAndGet(constants_1.AadPluginConfigKeys.applicationIdUris);
    }
    checkAndGet(key) {
        return checkAndGetOtherPluginConfig(this.configOfOtherPlugins, constants_1.TeamsToolkitComponentV3.AadPlugin, key, this.envName);
    }
}
exports.AadPluginConfig = AadPluginConfig;
class SolutionConfig {
    constructor(envInfo) {
        this.configOfOtherPlugins = envInfo.state;
        this.envName = envInfo.envName;
    }
    get resourceNameSuffix() {
        return this.checkAndGet(constants_1.SolutionConfigKeys.resourceNameSuffix);
    }
    get teamsAppTenantId() {
        return this.checkAndGet(constants_1.SolutionConfigKeys.teamsAppTenantId);
    }
    get resourceGroupName() {
        return this.checkAndGet(constants_1.SolutionConfigKeys.resourceGroupName);
    }
    get location() {
        return this.checkAndGet(constants_1.SolutionConfigKeys.location);
    }
    get subscriptionId() {
        return this.checkAndGet(constants_1.SolutionConfigKeys.subscriptionId);
    }
    checkAndGet(key) {
        return checkAndGetOtherPluginConfig(this.configOfOtherPlugins, constants_1.TeamsToolkitComponent.Solution, key, this.envName);
    }
}
exports.SolutionConfig = SolutionConfig;
function checkAndGetOtherPluginConfig(configOfOtherPlugins, component, key, envName) {
    const pluginConfig = configOfOtherPlugins.get
        ? configOfOtherPlugins.get(component)
        : configOfOtherPlugins[component];
    if (!pluginConfig) {
        throw error_1.BuildError(error_1.NoPluginConfig, component, constants_1.ComponentRetryOperations[component]);
    }
    const rawValue = pluginConfig.get ? pluginConfig.get(key) : pluginConfig[key];
    const value = error_1.AssertConfigNotEmpty(component, key, rawValue, envName);
    if (typeof value !== "string") {
        throw error_1.BuildError(error_1.InvalidPropertyType, key, "string");
    }
    return value;
}
//# sourceMappingURL=config.js.map