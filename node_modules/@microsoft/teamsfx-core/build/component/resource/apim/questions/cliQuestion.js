"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiVersionQuestion = exports.ApiIdQuestion = exports.ApiPrefixQuestion = exports.OpenApiDocumentQuestion = void 0;
const constants_1 = require("../constants");
const namingRules_1 = require("../utils/namingRules");
const question_1 = require("./question");
class OpenApiDocumentQuestion extends question_1.BaseQuestionService {
    constructor(telemetryReporter, logger) {
        super(telemetryReporter, logger);
    }
    getQuestion() {
        return {
            type: "text",
            name: constants_1.QuestionConstants.CLI.OpenApiDocument.questionName,
            title: constants_1.QuestionConstants.CLI.OpenApiDocument.description,
            // TODO: Validate OpenAPI document after CLI support remote validation func
        };
    }
}
exports.OpenApiDocumentQuestion = OpenApiDocumentQuestion;
class ApiPrefixQuestion extends question_1.BaseQuestionService {
    constructor(telemetryReporter, logger) {
        super(telemetryReporter, logger);
    }
    getQuestion() {
        return {
            type: "text",
            name: constants_1.QuestionConstants.CLI.ApiPrefix.questionName,
            title: constants_1.QuestionConstants.CLI.ApiPrefix.description,
            // TODO: Validate API prefix after CLI support remote validation func
            validation: {
                validFunc: (input, previousInputs) => namingRules_1.NamingRules.validate(input, namingRules_1.NamingRules.apiPrefix),
            },
        };
    }
}
exports.ApiPrefixQuestion = ApiPrefixQuestion;
// TODO: Enable Api Id question after enable validation
class ApiIdQuestion extends question_1.BaseQuestionService {
    constructor(telemetryReporter, logger) {
        super(telemetryReporter, logger);
    }
    getQuestion() {
        return {
            type: "text",
            name: constants_1.QuestionConstants.CLI.ApiId.questionName,
            title: constants_1.QuestionConstants.CLI.ApiId.description,
            // TODO: Validate API id after CLI support remote validation func
            validation: {
                validFunc: (input, previousInputs) => namingRules_1.NamingRules.validate(input, namingRules_1.NamingRules.apiId),
            },
        };
    }
}
exports.ApiIdQuestion = ApiIdQuestion;
class ApiVersionQuestion extends question_1.BaseQuestionService {
    constructor(telemetryReporter, logger) {
        super(telemetryReporter, logger);
    }
    getQuestion() {
        return {
            type: "text",
            name: constants_1.QuestionConstants.CLI.ApiVersion.questionName,
            title: constants_1.QuestionConstants.CLI.ApiVersion.description,
            validation: {
                validFunc: (input, previousInputs) => namingRules_1.NamingRules.validate(input, namingRules_1.NamingRules.versionIdentity),
                required: true,
            },
        };
    }
}
exports.ApiVersionQuestion = ApiVersionQuestion;
//# sourceMappingURL=cliQuestion.js.map