import { EnvInfo, FuncQuestion, Json, LogProvider, PluginConfig, SingleSelectQuestion, TelemetryReporter, TextInputQuestion, v3, ValidationSchema } from "@microsoft/teamsfx-api";
import { ApimService } from "../services/apimService";
import { Lazy } from "../utils/commonUtils";
import { OpenApiProcessor } from "../utils/openApiProcessor";
import { BaseQuestionService, IQuestionService } from "./question";
export declare class OpenApiDocumentQuestion extends BaseQuestionService {
    private readonly openApiProcessor;
    constructor(openApiProcessor: OpenApiProcessor, telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    getQuestion(projectPath: string): SingleSelectQuestion;
    private getDynamicOptions;
}
export declare class ExistingOpenApiDocumentFunc extends BaseQuestionService {
    private readonly openApiProcessor;
    constructor(openApiProcessor: OpenApiProcessor, telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    getQuestion(projectPath: string, envName: string, apimState: PluginConfig | Json): FuncQuestion;
}
export declare class ApiPrefixQuestion extends BaseQuestionService implements IQuestionService {
    constructor(telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    getQuestion(): TextInputQuestion;
}
export declare class ApiVersionQuestion extends BaseQuestionService {
    private readonly lazyApimService;
    constructor(lazyApimService: Lazy<ApimService>, telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    getQuestion(envInfo: EnvInfo | v3.EnvInfoV3): SingleSelectQuestion;
    private getDynamicOptions;
}
export declare class NewApiVersionQuestion extends BaseQuestionService implements IQuestionService {
    constructor(telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    condition(): {
        target?: string;
    } & ValidationSchema;
    getQuestion(): TextInputQuestion;
}
//# sourceMappingURL=vscodeQuestion.d.ts.map