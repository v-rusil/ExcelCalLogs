"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApimManager = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const constants_1 = require("../constants");
const error_1 = require("../error");
const tools_1 = require("../../../../common/tools");
const commonUtils_1 = require("../utils/commonUtils");
const namingRules_1 = require("../utils/namingRules");
class ApimManager {
    constructor(lazyApimService, openApiProcessor, telemetryReporter, logger) {
        this.lazyApimService = lazyApimService;
        this.openApiProcessor = openApiProcessor;
        this.logger = logger;
        this.telemetryReporter = telemetryReporter;
    }
    async provision(apimConfig) {
        const apimService = await this.lazyApimService.getValue();
        const currentUserId = await apimService.getUserId();
        const apimServiceResource = apimConfig.serviceResourceId
            ? await apimService.getService(tools_1.getResourceGroupNameFromResourceId(apimConfig.serviceResourceId), commonUtils_1.getApimServiceNameFromResourceId(apimConfig.serviceResourceId))
            : undefined;
        apimConfig.publisherEmail = (apimServiceResource === null || apimServiceResource === void 0 ? void 0 : apimServiceResource.publisherEmail)
            ? apimServiceResource.publisherEmail
            : currentUserId;
        apimConfig.publisherName = (apimServiceResource === null || apimServiceResource === void 0 ? void 0 : apimServiceResource.publisherName)
            ? apimServiceResource.publisherName
            : currentUserId;
    }
    async deploy(apimConfig, solutionConfig, functionConfig, answer, projectRootPath) {
        var _a, _b, _c;
        const apimService = await this.lazyApimService.getValue();
        const apimServiceResourceId = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.serviceResourceId);
        const apimProductResourceId = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.productResourceId);
        const authServerResourceId = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.authServerResourceId);
        const resourceGroupName = tools_1.getResourceGroupNameFromResourceId(apimServiceResourceId);
        const apimServiceName = commonUtils_1.getApimServiceNameFromResourceId(apimServiceResourceId);
        const authServerId = commonUtils_1.getAuthServiceNameFromResourceId(authServerResourceId);
        const productId = commonUtils_1.getProductNameFromResourceId(apimProductResourceId);
        const apiPrefix = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.apiPrefix);
        const apiDocumentPath = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.apiDocumentPath);
        const versionIdentity = error_1.AssertNotEmpty("versionAnswer.versionIdentity", answer.versionIdentity);
        const apiId = (_a = answer.apiId) !== null && _a !== void 0 ? _a : namingRules_1.NamingRules.apiId.sanitize(apiPrefix, versionIdentity, solutionConfig.resourceNameSuffix);
        const versionSetId = (_b = apimConfig.versionSetId) !== null && _b !== void 0 ? _b : namingRules_1.NamingRules.versionSetId.sanitize(apiPrefix, solutionConfig.resourceNameSuffix);
        const apiPath = (_c = apimConfig.apiPath) !== null && _c !== void 0 ? _c : namingRules_1.NamingRules.apiPath.sanitize(apiPrefix, solutionConfig.resourceNameSuffix);
        const openApiDocument = await this.openApiProcessor.loadOpenApiDocument(apiDocumentPath, projectRootPath);
        const spec = this.openApiProcessor.patchOpenApiDocument(openApiDocument.spec, openApiDocument.schemaVersion, functionConfig.functionEndpoint, constants_1.ApimDefaultValues.functionBasePath);
        const versionSetDisplayName = namingRules_1.NamingRules.versionSetDisplayName.sanitize(openApiDocument.spec.info.title);
        await apimService.createVersionSet(resourceGroupName, apimServiceName, versionSetId, versionSetDisplayName);
        apimConfig.versionSetId = versionSetId;
        await apimService.importApi(resourceGroupName, apimServiceName, apiId, apiPath, versionIdentity, versionSetId, authServerId, openApiDocument.schemaVersion, spec);
        apimConfig.apiPath = apiPath;
        await apimService.addApiToProduct(resourceGroupName, apimServiceName, productId, apiId);
    }
}
exports.ApimManager = ApimManager;
//# sourceMappingURL=apimManager.js.map