"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadManager = void 0;
const constants_1 = require("../constants");
const error_1 = require("../error");
const namingRules_1 = require("../utils/namingRules");
class AadManager {
    constructor(lazyAadService, telemetryReporter, logger) {
        this.logger = logger;
        this.telemetryReporter = telemetryReporter;
        this.lazyAadService = lazyAadService;
    }
    async provision(apimPluginConfig, appName) {
        const aadService = await this.lazyAadService.getValue();
        if (!apimPluginConfig.apimClientAADObjectId) {
            const aadInfo = await aadService.createAad(namingRules_1.NamingRules.aadDisplayName.sanitize(appName));
            apimPluginConfig.apimClientAADObjectId = error_1.AssertNotEmpty("id", aadInfo.id);
            apimPluginConfig.apimClientAADClientId = error_1.AssertNotEmpty("appId", aadInfo.appId);
            const secretResult = await aadService.addSecret(apimPluginConfig.apimClientAADObjectId, namingRules_1.NamingRules.aadSecretDisplayName.sanitize(appName));
            apimPluginConfig.apimClientAADClientSecret = error_1.AssertNotEmpty("secretText", secretResult.secretText);
        }
        else {
            const existingAadInfo = await aadService.getAad(apimPluginConfig.apimClientAADObjectId);
            if (!existingAadInfo) {
                throw error_1.BuildError(error_1.InvalidAadObjectId, apimPluginConfig.apimClientAADObjectId);
            }
            apimPluginConfig.apimClientAADClientId = error_1.AssertNotEmpty("appId", existingAadInfo.appId);
            if (!apimPluginConfig.apimClientAADClientSecret) {
                const secretResult = await aadService.addSecret(apimPluginConfig.apimClientAADObjectId, namingRules_1.NamingRules.aadSecretDisplayName.sanitize(appName));
                apimPluginConfig.apimClientAADClientSecret = error_1.AssertNotEmpty("secretText", secretResult.secretText);
            }
        }
    }
    async postProvision(apimPluginConfig, aadPluginConfig, redirectUris) {
        var _a, _b, _c;
        const aadService = await this.lazyAadService.getValue();
        const objectId = apimPluginConfig.checkAndGet(constants_1.ApimPluginConfigKeys.apimClientAADObjectId);
        let existingAadInfo = await aadService.getAad(objectId);
        existingAadInfo = error_1.AssertNotEmpty("existingAadInfo", existingAadInfo);
        let data;
        data = this.refreshRedirectUri((_a = existingAadInfo.web) === null || _a === void 0 ? void 0 : _a.redirectUris, redirectUris, data);
        data = this.refreshEnableIdTokenIssuance((_c = (_b = existingAadInfo.web) === null || _b === void 0 ? void 0 : _b.implicitGrantSettings) === null || _c === void 0 ? void 0 : _c.enableIdTokenIssuance, data);
        data = this.refreshRequiredResourceAccess(existingAadInfo.requiredResourceAccess, aadPluginConfig.clientId, aadPluginConfig.oauth2PermissionScopeId, data);
        if (data) {
            await aadService.updateAad(objectId, data);
        }
    }
    refreshEnableIdTokenIssuance(existing, data) {
        var _a;
        if (existing !== true) {
            data = data !== null && data !== void 0 ? data : {};
            data.web = (_a = data.web) !== null && _a !== void 0 ? _a : {};
            data.web.implicitGrantSettings = { enableIdTokenIssuance: true };
        }
        return data;
    }
    refreshRedirectUri(existingRedirectUris, redirectUris, data) {
        var _a;
        existingRedirectUris = existingRedirectUris !== null && existingRedirectUris !== void 0 ? existingRedirectUris : [];
        const originLength = existingRedirectUris.length;
        for (const redirectUri of redirectUris) {
            if (!existingRedirectUris.find((uri) => uri === redirectUri)) {
                existingRedirectUris.push(redirectUri);
            }
        }
        if (originLength !== existingRedirectUris.length) {
            data = data !== null && data !== void 0 ? data : {};
            data.web = (_a = data.web) !== null && _a !== void 0 ? _a : {};
            data.web.redirectUris = existingRedirectUris;
        }
        return data;
    }
    refreshRequiredResourceAccess(existingRequiredResourceAccessList, resourceClientId, scopeId, data) {
        var _a, _b;
        existingRequiredResourceAccessList = existingRequiredResourceAccessList !== null && existingRequiredResourceAccessList !== void 0 ? existingRequiredResourceAccessList : [];
        let requiredResourceAccess = existingRequiredResourceAccessList.find((o) => o.resourceAppId === resourceClientId);
        if (!requiredResourceAccess) {
            requiredResourceAccess = { resourceAppId: resourceClientId };
            existingRequiredResourceAccessList.push(requiredResourceAccess);
        }
        const resourceAccess = (_a = requiredResourceAccess.resourceAccess) === null || _a === void 0 ? void 0 : _a.find((resourceAccess) => resourceAccess.id === scopeId && resourceAccess.type === "Scope");
        if (!resourceAccess) {
            requiredResourceAccess.resourceAccess = ((_b = requiredResourceAccess.resourceAccess) !== null && _b !== void 0 ? _b : []).concat({
                id: scopeId,
                type: "Scope",
            });
            data = data !== null && data !== void 0 ? data : {};
            data.requiredResourceAccess = existingRequiredResourceAccessList;
        }
        return data;
    }
}
exports.AadManager = AadManager;
//# sourceMappingURL=aadManager.js.map