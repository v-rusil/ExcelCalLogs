"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliQuestionManager = exports.VscQuestionManager = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const migrate_1 = require("../../../../component/migrate");
const constants_1 = require("../../../constants");
const error_1 = require("../error");
class VscQuestionManager {
    constructor(openApiDocumentQuestion, apiPrefixQuestion, apiVersionQuestion, newApiVersionQuestion, existingOpenApiDocumentFunc) {
        this.openApiDocumentQuestion = openApiDocumentQuestion;
        this.apiPrefixQuestion = apiPrefixQuestion;
        this.apiVersionQuestion = apiVersionQuestion;
        this.newApiVersionQuestion = newApiVersionQuestion;
        this.existingOpenApiDocumentFunc = existingOpenApiDocumentFunc;
        Object.setPrototypeOf(this, new.target.prototype);
    }
    async callFunc(func, ctx) {
        throw error_1.BuildError(error_1.NotImplemented);
    }
    async deploy(projectPath, envInfo, apimConfig) {
        const rootNode = new teamsfx_api_1.QTreeNode({
            type: "group",
        });
        let documentNode;
        if (!apimConfig.apiDocumentPath) {
            const documentPathQuestion = this.openApiDocumentQuestion.getQuestion(projectPath);
            documentNode = new teamsfx_api_1.QTreeNode(documentPathQuestion);
        }
        else {
            const apimState = envInfo.state.get
                ? envInfo.state.get(constants_1.BuiltInFeaturePluginNames.apim)
                : envInfo.state[migrate_1.APIM_STATE_KEY];
            const documentPathFunc = this.existingOpenApiDocumentFunc.getQuestion(projectPath, envInfo.envName, apimState);
            documentNode = new teamsfx_api_1.QTreeNode(documentPathFunc);
        }
        rootNode.addChild(documentNode);
        if (!apimConfig.apiPrefix) {
            const apiPrefixQuestion = this.apiPrefixQuestion.getQuestion();
            const apiPrefixQuestionNode = new teamsfx_api_1.QTreeNode(apiPrefixQuestion);
            documentNode.addChild(apiPrefixQuestionNode);
        }
        const versionQuestion = this.apiVersionQuestion.getQuestion(envInfo);
        const versionQuestionNode = new teamsfx_api_1.QTreeNode(versionQuestion);
        documentNode.addChild(versionQuestionNode);
        const newVersionQuestion = this.newApiVersionQuestion.getQuestion();
        const newVersionQuestionNode = new teamsfx_api_1.QTreeNode(newVersionQuestion);
        newVersionQuestionNode.condition = this.newApiVersionQuestion.condition();
        versionQuestionNode.addChild(newVersionQuestionNode);
        return rootNode;
    }
}
exports.VscQuestionManager = VscQuestionManager;
class CliQuestionManager {
    constructor(openApiDocumentQuestion, apiPrefixQuestion, apiVersionQuestion) {
        this.openApiDocumentQuestion = openApiDocumentQuestion;
        this.apiPrefixQuestion = apiPrefixQuestion;
        this.apiVersionQuestion = apiVersionQuestion;
        Object.setPrototypeOf(this, new.target.prototype);
    }
    async callFunc(func, ctx) {
        throw error_1.BuildError(error_1.NotImplemented);
    }
    async deploy(projectPath, envInfo, apimConfig) {
        const rootNode = new teamsfx_api_1.QTreeNode({
            type: "group",
        });
        if (!(apimConfig === null || apimConfig === void 0 ? void 0 : apimConfig.apiDocumentPath)) {
            const openApiDocumentQuestion = this.openApiDocumentQuestion.getQuestion();
            rootNode.addChild(new teamsfx_api_1.QTreeNode(openApiDocumentQuestion));
        }
        if (!(apimConfig === null || apimConfig === void 0 ? void 0 : apimConfig.apiPrefix)) {
            const apiPrefixQuestion = this.apiPrefixQuestion.getQuestion();
            rootNode.addChild(new teamsfx_api_1.QTreeNode(apiPrefixQuestion));
        }
        const apiVersionQuestion = this.apiVersionQuestion.getQuestion();
        rootNode.addChild(new teamsfx_api_1.QTreeNode(apiVersionQuestion));
        return rootNode;
    }
}
exports.CliQuestionManager = CliQuestionManager;
//# sourceMappingURL=questionManager.js.map