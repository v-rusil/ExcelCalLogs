import { EnvInfo, Func, PluginContext, QTreeNode, v3 } from "@microsoft/teamsfx-api";
import { IApimPluginConfig } from "../config";
import * as CLI from "../questions/cliQuestion";
import * as VSCode from "../questions/vscodeQuestion";
export interface IQuestionManager {
    callFunc(func: Func, ctx: PluginContext): Promise<any>;
    deploy(projectPath?: string, envInfo?: EnvInfo | v3.EnvInfoV3, apimConfig?: IApimPluginConfig): Promise<QTreeNode>;
}
export declare class VscQuestionManager implements IQuestionManager {
    private readonly openApiDocumentQuestion;
    private readonly existingOpenApiDocumentFunc;
    private readonly apiPrefixQuestion;
    private readonly apiVersionQuestion;
    private readonly newApiVersionQuestion;
    constructor(openApiDocumentQuestion: VSCode.OpenApiDocumentQuestion, apiPrefixQuestion: VSCode.ApiPrefixQuestion, apiVersionQuestion: VSCode.ApiVersionQuestion, newApiVersionQuestion: VSCode.NewApiVersionQuestion, existingOpenApiDocumentFunc: VSCode.ExistingOpenApiDocumentFunc);
    callFunc(func: Func, ctx: PluginContext): Promise<any>;
    deploy(projectPath?: string, envInfo?: EnvInfo | v3.EnvInfoV3, apimConfig?: IApimPluginConfig): Promise<QTreeNode>;
}
export declare class CliQuestionManager implements IQuestionManager {
    private readonly openApiDocumentQuestion;
    private readonly apiPrefixQuestion;
    private readonly apiVersionQuestion;
    constructor(openApiDocumentQuestion: CLI.OpenApiDocumentQuestion, apiPrefixQuestion: CLI.ApiPrefixQuestion, apiVersionQuestion: CLI.ApiVersionQuestion);
    callFunc(func: Func, ctx: PluginContext): Promise<any>;
    deploy(projectPath?: string, envInfo?: EnvInfo | v3.EnvInfoV3, apimConfig?: IApimPluginConfig): Promise<QTreeNode>;
}
//# sourceMappingURL=questionManager.d.ts.map