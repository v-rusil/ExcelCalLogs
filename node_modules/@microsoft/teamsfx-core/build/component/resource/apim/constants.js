"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApimOutputBicepSnippet = exports.UserTask = exports.OpenApiSchemaVersion = exports.ErrorHandlerResult = exports.Operation = exports.AzureResource = exports.OperationStatus = exports.ProgressMessages = exports.PluginLifeCycleToProgressStep = exports.ProgressStep = exports.PluginLifeCycle = exports.ConfigRetryOperations = exports.ComponentRetryOperations = exports.RetryOperation = exports.TeamsToolkitComponentV3 = exports.TeamsToolkitComponent = exports.SolutionConfigKeys = exports.AadPluginConfigKeys = exports.FunctionPluginConfigKeys = exports.ApimPluginConfigKeys = exports.ApimPathInfo = exports.ValidationConstants = exports.QuestionConstants = exports.AadDefaultValues = exports.ApimDefaultValues = exports.ProjectConstants = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const localizeUtils_1 = require("../../../common/localizeUtils");
class ProjectConstants {
}
exports.ProjectConstants = ProjectConstants;
ProjectConstants.pluginShortName = "APIM";
ProjectConstants.pluginName = "fx-resource-apim";
ProjectConstants.pluginDisplayName = "API Management";
ProjectConstants.configFilePathArmSupported = (envName) => `state.${envName}.json`;
ProjectConstants.configFilePath = "env.default.json";
ProjectConstants.workingDir = "openapi";
ProjectConstants.openApiDocumentFileName = "openapi.json";
ProjectConstants.readMeFileName = "README.md";
ProjectConstants.maxRetries = 15;
ProjectConstants.retryTimeInterval = 1000;
ProjectConstants.helpLink = "https://aka.ms/teamsfx-apim-help";
ProjectConstants.apimResourceProvider = "Microsoft.ApiManagement";
class ApimDefaultValues {
}
exports.ApimDefaultValues = ApimDefaultValues;
ApimDefaultValues.functionBasePath = "/api";
ApimDefaultValues.productDescription = "Created by TeamsFx.";
ApimDefaultValues.oAuthServerDescription = "Created by TeamsFx.";
ApimDefaultValues.enableScopeName = ".default";
ApimDefaultValues.userId = "sample@microsoft.com";
ApimDefaultValues.apiPrefix = "api-title";
ApimDefaultValues.apiVersion = "v1";
class AadDefaultValues {
}
exports.AadDefaultValues = AadDefaultValues;
AadDefaultValues.graphApiBasePath = "https://graph.microsoft.com/v1.0";
AadDefaultValues.redirectUris = [];
class QuestionConstants {
}
exports.QuestionConstants = QuestionConstants;
QuestionConstants.namespace = "fx-solution-azure/fx-resource-apim";
QuestionConstants.VSCode = (_a = class {
    },
    _a.OpenApiDocument = (_b = class {
        },
        _b.questionName = "vsc-open-api-document",
        _b.funcName = "open-api-document-option",
        _b.description = localizeUtils_1.getLocalizedString("plugins.apim.QuestionConstants.VSCode.OpenApiDocument.description"),
        _b.excludeFolders = ["node_modules"],
        _b.openApiDocumentFileExtensions = ["json", "yaml"],
        _b),
    _a.ExistingOpenApiDocument = (_c = class {
        },
        // Same to OpenApiDocument.questionName
        _c.questionName = "vsc-open-api-document",
        _c),
    _a.ApiPrefix = (_d = class {
        },
        _d.questionName = "vsc-api-prefix",
        _d.description = localizeUtils_1.getLocalizedString("plugins.apim.QuestionConstants.VSCode.ApiPrefix.description"),
        _d.prompt = localizeUtils_1.getLocalizedString("plugins.apim.QuestionConstants.VSCode.ApiPrefix.prompt"),
        _d),
    _a.ApiVersion = (_e = class {
        },
        _e.questionName = "vsc-api-version",
        _e.description = localizeUtils_1.getLocalizedString("plugins.apim.QuestionConstants.VSCode.ApiVersion.description"),
        _e.createNewApiVersionOption = localizeUtils_1.getLocalizedString("plugins.apim.QuestionConstants.VSCode.ApiVersion.createNewApiVersionOption"),
        _e),
    _a.NewApiVersion = (_f = class {
        },
        _f.questionName = "vsc-new-api-version",
        _f.description = localizeUtils_1.getLocalizedString("plugins.apim.QuestionConstants.VSCode.NewApiVersion.description"),
        _f),
    _a);
QuestionConstants.CLI = (_g = class {
    },
    _g.OpenApiDocument = (_h = class {
        },
        _h.questionName = "open-api-document",
        _h.description = localizeUtils_1.getLocalizedString("plugins.apim.QuestionConstants.CLI.OpenApiDocument.description"),
        _h),
    _g.ApiPrefix = (_j = class {
        },
        _j.questionName = "api-prefix",
        _j.description = localizeUtils_1.getLocalizedString("plugins.apim.QuestionConstants.CLI.ApiPrefix.description"),
        _j),
    _g.ApiId = (_k = class {
        },
        // The api id is displayed as api name in the Azure Portal
        _k.questionName = "api-name",
        _k.description = localizeUtils_1.getLocalizedString("plugins.apim.QuestionConstants.CLI.ApiId.description"),
        _k),
    _g.ApiVersion = (_l = class {
        },
        _l.questionName = "api-version",
        _l.description = localizeUtils_1.getLocalizedString("plugins.apim.QuestionConstants.CLI.ApiVersion.description"),
        _l),
    _g);
class ValidationConstants {
}
exports.ValidationConstants = ValidationConstants;
ValidationConstants.defaultMinLength = 1;
ValidationConstants.defaultMaxLength = 256;
ValidationConstants.resourceIdValidPattern = {
    regex: /^[0-9a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$/,
    message: localizeUtils_1.getLocalizedString("plugins.apim.ValidationConstants.resourceIdValidPattern.message"),
};
ValidationConstants.defaultValidPattern = {
    regex: /^[^*#&+:<>?]+$/,
    message: localizeUtils_1.getLocalizedString("plugins.apim.ValidationConstants.defaultValidPattern.message"),
};
ValidationConstants.guidValidPattern = {
    regex: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
    message: localizeUtils_1.getLocalizedString("plugins.apim.ValidationConstants.guidValidPattern.message"),
};
ValidationConstants.CLI = {
    invalidOptionMessage: (optionName) => localizeUtils_1.getLocalizedString("plugins.apim.ValidationConstants.CLI.invalidOptionMessage", optionName),
    emptyOptionMessage: (optionName) => localizeUtils_1.getLocalizedString("plugins.apim.ValidationConstants.CLI.emptyOptionMessage", optionName, optionName),
    overrideOptionMessage: (optionName) => localizeUtils_1.getLocalizedString("plugins.apim.ValidationConstants.CLI.overrideOptionMessage", optionName, optionName),
};
class ApimPathInfo {
}
exports.ApimPathInfo = ApimPathInfo;
ApimPathInfo.BicepTemplateRelativeDir = path_1.default.join("plugins", "resource", "apim", "bicep");
ApimPathInfo.ProvisionModuleFileName = "apimProvision.bicep";
ApimPathInfo.ConfigurationModuleFileName = "apimConfiguration.bicep";
class ApimPluginConfigKeys {
}
exports.ApimPluginConfigKeys = ApimPluginConfigKeys;
ApimPluginConfigKeys.apimClientAADObjectId = "apimClientAADObjectId";
ApimPluginConfigKeys.apimClientAADClientId = "apimClientAADClientId";
ApimPluginConfigKeys.apimClientAADClientSecret = "apimClientAADClientSecret";
ApimPluginConfigKeys.apiPrefix = "apiPrefix";
ApimPluginConfigKeys.versionSetId = "versionSetId";
ApimPluginConfigKeys.apiPath = "apiPath";
ApimPluginConfigKeys.apiDocumentPath = "apiDocumentPath";
ApimPluginConfigKeys.serviceResourceId = "serviceResourceId";
ApimPluginConfigKeys.productResourceId = "productResourceId";
ApimPluginConfigKeys.authServerResourceId = "authServerResourceId";
ApimPluginConfigKeys.publisherEmail = "publisherEmail";
ApimPluginConfigKeys.publisherName = "publisherName";
class FunctionPluginConfigKeys {
}
exports.FunctionPluginConfigKeys = FunctionPluginConfigKeys;
FunctionPluginConfigKeys.functionEndpoint = "functionEndpoint";
class AadPluginConfigKeys {
}
exports.AadPluginConfigKeys = AadPluginConfigKeys;
AadPluginConfigKeys.objectId = "objectId";
AadPluginConfigKeys.clientId = "clientId";
AadPluginConfigKeys.oauth2PermissionScopeId = "oauth2PermissionScopeId";
AadPluginConfigKeys.applicationIdUris = "applicationIdUris";
class SolutionConfigKeys {
}
exports.SolutionConfigKeys = SolutionConfigKeys;
SolutionConfigKeys.resourceNameSuffix = "resourceNameSuffix";
SolutionConfigKeys.teamsAppTenantId = "teamsAppTenantId";
SolutionConfigKeys.resourceGroupName = "resourceGroupName";
SolutionConfigKeys.location = "location";
SolutionConfigKeys.remoteTeamsAppId = "remoteTeamsAppId";
SolutionConfigKeys.subscriptionId = "subscriptionId";
var TeamsToolkitComponent;
(function (TeamsToolkitComponent) {
    TeamsToolkitComponent["FunctionPlugin"] = "fx-resource-function";
    TeamsToolkitComponent["AadPlugin"] = "fx-resource-aad-app-for-teams";
    TeamsToolkitComponent["Solution"] = "solution";
    TeamsToolkitComponent["ApimPlugin"] = "fx-resource-apim";
})(TeamsToolkitComponent = exports.TeamsToolkitComponent || (exports.TeamsToolkitComponent = {}));
var TeamsToolkitComponentV3;
(function (TeamsToolkitComponentV3) {
    TeamsToolkitComponentV3["FunctionPlugin"] = "teams-api";
    TeamsToolkitComponentV3["AadPlugin"] = "aad-app";
    TeamsToolkitComponentV3["Solution"] = "solution";
    TeamsToolkitComponentV3["ApimPlugin"] = "apim";
})(TeamsToolkitComponentV3 = exports.TeamsToolkitComponentV3 || (exports.TeamsToolkitComponentV3 = {}));
exports.RetryOperation = Object.freeze({
    Create: localizeUtils_1.getLocalizedString("plugins.apim.RetryOperation.Create"),
    Update: localizeUtils_1.getLocalizedString("plugins.apim.RetryOperation.Update"),
    Provision: localizeUtils_1.getLocalizedString("plugins.apim.RetryOperation.Provision"),
    Deploy: localizeUtils_1.getLocalizedString("plugins.apim.RetryOperation.Deploy"),
    Login: localizeUtils_1.getLocalizedString("plugins.apim.RetryOperation.Login"),
});
exports.ComponentRetryOperations = Object.freeze({
    [TeamsToolkitComponent.FunctionPlugin]: exports.RetryOperation.Update,
    [TeamsToolkitComponent.AadPlugin]: exports.RetryOperation.Create,
    [TeamsToolkitComponent.Solution]: exports.RetryOperation.Create,
    [TeamsToolkitComponent.ApimPlugin]: exports.RetryOperation.Update,
    [TeamsToolkitComponentV3.FunctionPlugin]: exports.RetryOperation.Update,
    [TeamsToolkitComponentV3.AadPlugin]: exports.RetryOperation.Create,
    [TeamsToolkitComponentV3.Solution]: exports.RetryOperation.Create,
    [TeamsToolkitComponentV3.ApimPlugin]: exports.RetryOperation.Update,
});
exports.ConfigRetryOperations = {
    [TeamsToolkitComponent.FunctionPlugin]: {
        [FunctionPluginConfigKeys.functionEndpoint]: exports.RetryOperation.Provision,
    },
    [TeamsToolkitComponentV3.FunctionPlugin]: {
        [FunctionPluginConfigKeys.functionEndpoint]: exports.RetryOperation.Provision,
    },
    [TeamsToolkitComponent.AadPlugin]: {
        [AadPluginConfigKeys.objectId]: exports.RetryOperation.Provision,
        [AadPluginConfigKeys.clientId]: exports.RetryOperation.Provision,
        [AadPluginConfigKeys.oauth2PermissionScopeId]: exports.RetryOperation.Provision,
        [AadPluginConfigKeys.applicationIdUris]: exports.RetryOperation.Provision,
    },
    [TeamsToolkitComponentV3.AadPlugin]: {
        [AadPluginConfigKeys.objectId]: exports.RetryOperation.Provision,
        [AadPluginConfigKeys.clientId]: exports.RetryOperation.Provision,
        [AadPluginConfigKeys.oauth2PermissionScopeId]: exports.RetryOperation.Provision,
        [AadPluginConfigKeys.applicationIdUris]: exports.RetryOperation.Provision,
    },
    [TeamsToolkitComponent.Solution]: {
        [SolutionConfigKeys.resourceNameSuffix]: exports.RetryOperation.Create,
        [SolutionConfigKeys.teamsAppTenantId]: exports.RetryOperation.Provision,
        [SolutionConfigKeys.resourceGroupName]: exports.RetryOperation.Provision,
        [SolutionConfigKeys.location]: exports.RetryOperation.Provision,
    },
    [TeamsToolkitComponent.ApimPlugin]: {
        [ApimPluginConfigKeys.apimClientAADObjectId]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.apimClientAADClientId]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.apimClientAADClientSecret]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.serviceResourceId]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.productResourceId]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.authServerResourceId]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.publisherEmail]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.publisherName]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.apiPrefix]: exports.RetryOperation.Deploy,
        [ApimPluginConfigKeys.versionSetId]: exports.RetryOperation.Deploy,
        [ApimPluginConfigKeys.apiPath]: exports.RetryOperation.Deploy,
        [ApimPluginConfigKeys.apiDocumentPath]: exports.RetryOperation.Deploy,
    },
    [TeamsToolkitComponentV3.ApimPlugin]: {
        [ApimPluginConfigKeys.apimClientAADObjectId]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.apimClientAADClientId]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.apimClientAADClientSecret]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.serviceResourceId]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.productResourceId]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.authServerResourceId]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.publisherEmail]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.publisherName]: exports.RetryOperation.Provision,
        [ApimPluginConfigKeys.apiPrefix]: exports.RetryOperation.Deploy,
        [ApimPluginConfigKeys.versionSetId]: exports.RetryOperation.Deploy,
        [ApimPluginConfigKeys.apiPath]: exports.RetryOperation.Deploy,
        [ApimPluginConfigKeys.apiDocumentPath]: exports.RetryOperation.Deploy,
    },
};
var PluginLifeCycle;
(function (PluginLifeCycle) {
    PluginLifeCycle["CallFunc"] = "call-func";
    PluginLifeCycle["GetQuestions"] = "get-questions";
    PluginLifeCycle["Scaffold"] = "scaffold";
    PluginLifeCycle["Provision"] = "provision";
    PluginLifeCycle["GenerateArmTemplates"] = "generate-arm-templates";
    PluginLifeCycle["UpdateArmTemplates"] = "update-arm-templates";
    PluginLifeCycle["PostProvision"] = "post-provision";
    PluginLifeCycle["Deploy"] = "deploy";
})(PluginLifeCycle = exports.PluginLifeCycle || (exports.PluginLifeCycle = {}));
var ProgressStep;
(function (ProgressStep) {
    ProgressStep["None"] = "";
    ProgressStep["Scaffold"] = "Scaffolding OpenAPI document";
    ProgressStep["Provision"] = "Provisioning API Management";
    ProgressStep["PostProvision"] = "Configuring API Management";
    ProgressStep["Deploy"] = "Importing API to API Management";
})(ProgressStep = exports.ProgressStep || (exports.ProgressStep = {}));
exports.PluginLifeCycleToProgressStep = {
    [PluginLifeCycle.CallFunc]: ProgressStep.None,
    [PluginLifeCycle.GetQuestions]: ProgressStep.None,
    [PluginLifeCycle.Scaffold]: ProgressStep.Scaffold,
    [PluginLifeCycle.Provision]: ProgressStep.Provision,
    [PluginLifeCycle.GenerateArmTemplates]: ProgressStep.None,
    [PluginLifeCycle.UpdateArmTemplates]: ProgressStep.None,
    [PluginLifeCycle.PostProvision]: ProgressStep.PostProvision,
    [PluginLifeCycle.Deploy]: ProgressStep.Deploy,
};
exports.ProgressMessages = {
    [ProgressStep.None]: {},
    [ProgressStep.Scaffold]: {
        Scaffold: localizeUtils_1.getLocalizedString("plugins.apim.ProgressMessages.Scaffold.Scaffold"),
    },
    [ProgressStep.Provision]: {
        CreateApim: localizeUtils_1.getLocalizedString("plugins.apim.ProgressMessages.Provision.CreateApim"),
        CreateAad: localizeUtils_1.getLocalizedString("plugins.apim.ProgressMessages.Provision.CreateAad"),
    },
    [ProgressStep.PostProvision]: {
        ConfigClientAad: localizeUtils_1.getLocalizedString("plugins.apim.ProgressMessages.PostProvision.ConfigClientAad"),
        ConfigAppAad: localizeUtils_1.getLocalizedString("plugins.apim.ProgressMessages.PostProvision.ConfigAppAad"),
    },
    [ProgressStep.Deploy]: {
        ImportApi: localizeUtils_1.getLocalizedString("plugins.apim.ProgressMessages.Deploy.ImportApi"),
    },
};
var OperationStatus;
(function (OperationStatus) {
    OperationStatus["Started"] = "started";
    OperationStatus["Failed"] = "failed";
    OperationStatus["Succeeded"] = "succeeded";
})(OperationStatus = exports.OperationStatus || (exports.OperationStatus = {}));
class AzureResource {
}
exports.AzureResource = AzureResource;
AzureResource.ResourceGroup = {
    shortName: "resource-group",
    displayName: "Resource Group",
};
AzureResource.APIM = {
    shortName: "apim",
    displayName: "API Management Service",
};
AzureResource.Product = {
    shortName: "apim-product",
    displayName: "API Management product",
};
AzureResource.OAuthServer = {
    shortName: "apim-oauth-server",
    displayName: "API Management OAuth server",
};
AzureResource.VersionSet = {
    shortName: "apim-version-set",
    displayName: "API Management version set",
};
AzureResource.API = {
    shortName: "apim-api",
    displayName: "API Management API",
};
AzureResource.ProductAPI = {
    shortName: "apim-product-api",
    displayName: "API Management product and API relationship",
};
AzureResource.Aad = {
    shortName: "aad",
    displayName: "Azure Active Directory application",
};
AzureResource.AadSecret = {
    shortName: "aad-secret",
    displayName: "Azure Active Directory client secret",
};
AzureResource.ServicePrincipal = {
    shortName: "service-principal",
    displayName: "Service Principal",
};
AzureResource.ResourceProvider = {
    shortName: "resource-provider",
    displayName: "Resource Provider",
};
class Operation {
}
exports.Operation = Operation;
Operation.Create = {
    shortName: "create",
    displayName: "create",
};
Operation.Update = {
    shortName: "update",
    displayName: "update",
};
Operation.Get = {
    shortName: "get",
    displayName: "get",
};
Operation.List = {
    shortName: "list",
    displayName: "list",
};
Operation.ListNextPage = {
    shortName: "list-next",
    displayName: "list (pagination)",
};
Operation.Import = {
    shortName: "import",
    displayName: "import",
};
Operation.Register = {
    shortName: "register",
    displayName: "register",
};
var ErrorHandlerResult;
(function (ErrorHandlerResult) {
    ErrorHandlerResult["Continue"] = "Continue";
    ErrorHandlerResult["Return"] = "Return";
})(ErrorHandlerResult = exports.ErrorHandlerResult || (exports.ErrorHandlerResult = {}));
var OpenApiSchemaVersion;
(function (OpenApiSchemaVersion) {
    OpenApiSchemaVersion["V2"] = "v2";
    OpenApiSchemaVersion["V3"] = "v3";
})(OpenApiSchemaVersion = exports.OpenApiSchemaVersion || (exports.OpenApiSchemaVersion = {}));
class UserTask {
}
exports.UserTask = UserTask;
UserTask.addResourceFuncName = "addResource";
UserTask.addFeatureFuncName = "addFeature";
class ApimOutputBicepSnippet {
}
exports.ApimOutputBicepSnippet = ApimOutputBicepSnippet;
ApimOutputBicepSnippet.ServiceResourceId = "provisionOutputs.apimOutput.value.serviceResourceId";
//# sourceMappingURL=constants.js.map