"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeConcurrently = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../../common/constants");
const constants_2 = require("../constants");
async function executeConcurrently(namedThunks, logger, concurrent = true) {
    let results;
    if (concurrent) {
        results = await Promise.all(namedThunks.map(async (namedThunk) => {
            logger.info(`Running ${namedThunk.pluginName} concurrently`);
            try {
                return namedThunk.thunk();
            }
            catch (e) {
                if (e instanceof teamsfx_api_1.UserError || e instanceof teamsfx_api_1.SystemError) {
                    return teamsfx_api_1.err(e);
                }
                return teamsfx_api_1.err(new teamsfx_api_1.SystemError(constants_2.SolutionSource, "UnknownError", `[SolutionV2.executeConcurrently] unknown error, plugin: ${namedThunk.pluginName}, taskName: ${namedThunk.taskName}, error: ${JSON.stringify(e)}`));
            }
        }));
    }
    else {
        results = [];
        for (const namedThunk of namedThunks) {
            logger.info(`Running ${namedThunk.pluginName} concurrently`);
            let res;
            try {
                res = await namedThunk.thunk();
            }
            catch (e) {
                if (e instanceof teamsfx_api_1.UserError || e instanceof teamsfx_api_1.SystemError) {
                    res = teamsfx_api_1.err(e);
                }
                else {
                    res = teamsfx_api_1.err(new teamsfx_api_1.SystemError(constants_2.SolutionSource, "UnknownError", `[SolutionV2.executeConcurrently] unknown error, plugin: ${namedThunk.pluginName}, taskName: ${namedThunk.taskName}, error: ${JSON.stringify(e)}`));
                }
            }
            results.push(res);
        }
    }
    logger === null || logger === void 0 ? void 0 : logger.info(`${`[${constants_1.PluginDisplayName.Solution}] Execute Task summary`.padEnd(64, "-")}`);
    let failed = false;
    const ret = [];
    const errors = [];
    for (let i = 0; i < results.length; ++i) {
        const name = `${namedThunks[i].pluginName}:${namedThunks[i].taskName}`;
        const result = results[i];
        logger.info(`${name.padEnd(60, ".")} ${result.isOk() ? "[ok]" : "[failed]"}`);
        if (result.isErr()) {
            failed = true;
            errors.push(result.error);
        }
        else {
            ret.push({ name: `${namedThunks[i].pluginName}`, result: result.value });
        }
    }
    if (logger)
        logger === null || logger === void 0 ? void 0 : logger.info(`${`[${constants_1.PluginDisplayName.Solution}] Task overall result`.padEnd(60, ".")}${failed ? "[failed]" : "[ok]"}`);
    if (failed) {
        if (ret.length === 0) {
            return new teamsfx_api_1.v2.FxFailure(mergeFxErrors(errors));
        }
        else {
            return new teamsfx_api_1.v2.FxPartialSuccess(ret, mergeFxErrors(errors));
        }
    }
    return new teamsfx_api_1.v2.FxSuccess(ret);
}
exports.executeConcurrently = executeConcurrently;
function mergeFxErrors(errors) {
    if (errors.length === 1) {
        return errors[0];
    }
    let hasSystemError = false;
    const errMsgs = [];
    for (const err of errors) {
        if (err instanceof teamsfx_api_1.SystemError) {
            hasSystemError = true;
        }
        errMsgs.push(`${err.name}:${err.message}`);
    }
    return hasSystemError
        ? new teamsfx_api_1.SystemError(constants_2.SolutionSource, constants_2.SolutionError.FailedToExecuteTasks, errMsgs.join(";"))
        : new teamsfx_api_1.UserError(constants_2.SolutionSource, constants_2.SolutionError.FailedToExecuteTasks, errMsgs.join(";"));
}
//# sourceMappingURL=executor.js.map