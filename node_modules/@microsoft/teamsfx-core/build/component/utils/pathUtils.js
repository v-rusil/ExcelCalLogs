"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pathUtils = exports.PathUtils = exports.LocalYmlFileNameOld = exports.YmlFileNameOld = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const path = tslib_1.__importStar(require("path"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const parser_1 = require("../configManager/parser");
const versionMetadata_1 = require("../../common/versionMetadata");
exports.YmlFileNameOld = "app.yml";
exports.LocalYmlFileNameOld = "app.local.yml";
class PathUtils {
    getYmlFilePath(projectPath, env) {
        const envName = env || process.env.TEAMSFX_ENV;
        if (!envName)
            throw new teamsfx_api_1.InvalidInputError("util", "env", "env is undefined");
        let ymlPath = path.join(projectPath, envName === "local" ? versionMetadata_1.MetadataV3.localConfigFile : versionMetadata_1.MetadataV3.configFile);
        if (fs_extra_1.default.pathExistsSync(ymlPath)) {
            return ymlPath;
        }
        ymlPath = path.join(projectPath, teamsfx_api_1.SettingsFolderName, envName === "local" ? exports.LocalYmlFileNameOld : exports.YmlFileNameOld);
        return ymlPath;
    }
    async getEnvFolderPath(projectPath) {
        const ymlFilePath = this.getYmlFilePath(projectPath, "dev");
        const parseRes = await parser_1.yamlParser.parse(ymlFilePath);
        if (parseRes.isErr())
            return teamsfx_api_1.err(parseRes.error);
        const projectModel = parseRes.value;
        if (!projectModel.environmentFolderPath)
            return teamsfx_api_1.ok(undefined); //err(new InvalidEnvFolderPath("missing field: environmentFolderPath"));
        const envFolderPath = path.isAbsolute(projectModel.environmentFolderPath)
            ? projectModel.environmentFolderPath
            : path.join(projectPath, projectModel.environmentFolderPath);
        if (!(await fs_extra_1.default.pathExists(envFolderPath)))
            return teamsfx_api_1.ok(undefined); //err(new InvalidEnvFolderPath("environment folder not exist: " + envFolderPath));
        return teamsfx_api_1.ok(envFolderPath);
    }
    async getEnvFilePath(projectPath, env) {
        const envFolderPathRes = await this.getEnvFolderPath(projectPath);
        if (envFolderPathRes.isErr())
            return teamsfx_api_1.err(envFolderPathRes.error);
        const folderPath = envFolderPathRes.value;
        if (!folderPath)
            return teamsfx_api_1.ok(undefined);
        const envFilePath = path.join(folderPath, `.env.${env}`);
        return teamsfx_api_1.ok(envFilePath);
    }
}
exports.PathUtils = PathUtils;
exports.pathUtils = new PathUtils();
//# sourceMappingURL=pathUtils.js.map