"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBlobServiceClient = exports.getBlobUri = exports.generateSasToken = exports.createBlobServiceClient = exports.getAzureAccountCredential = exports.parseAzureResourceId = void 0;
const componentError_1 = require("../error/componentError");
const storage_blob_1 = require("@azure/storage-blob");
const arm_storage_1 = require("@azure/arm-storage");
const deployConstant_1 = require("../constant/deployConstant");
/**
 * parse Azure resource id into subscriptionId, resourceGroupName and resourceName
 * @param resourceId Azure resource id
 * @param pattern the pattern that used to parse resource id and extract info from it
 */
function parseAzureResourceId(resourceId, pattern) {
    const result = resourceId.trim().match(pattern);
    if (!result || result.length != 4) {
        throw componentError_1.PrerequisiteError.somethingIllegal("Deploy", "resourceId", "plugins.bot.InvalidValue", [
            "resourceId",
            resourceId,
        ]);
    }
    return {
        subscriptionId: result[1].trim(),
        resourceGroupName: result[2].trim(),
        instanceId: result[3].trim(),
    };
}
exports.parseAzureResourceId = parseAzureResourceId;
/**
 * get Azure credential from Azure account provider
 * @param tokenProvider Azure account provider
 */
async function getAzureAccountCredential(tokenProvider) {
    let credential;
    try {
        credential = await tokenProvider.getIdentityCredentialAsync();
    }
    catch (e) {
        throw componentError_1.ExternalApiCallError.getAzureCredentialError(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, e);
    }
    if (!credential) {
        throw componentError_1.PrerequisiteError.somethingIllegal("Deploy", "azureCredential", "plugin.hosting.FailRetrieveAzureCredentials", undefined, "plugin.hosting.LoginToAzure");
    }
    return credential;
}
exports.getAzureAccountCredential = getAzureAccountCredential;
/**
 * create Azure Storage Blob Service Client
 * @param azureResource azure resource info
 * @param azureCredential azure user credential
 */
async function createBlobServiceClient(azureResource, azureCredential) {
    const storageAccountClient = new arm_storage_1.StorageManagementClient(azureCredential, azureResource.subscriptionId).storageAccounts;
    const sasToken = await generateSasToken(storageAccountClient, azureResource.resourceGroupName, azureResource.instanceId);
    const blobUri = getBlobUri(azureResource.instanceId);
    return await getBlobServiceClient(blobUri, sasToken);
}
exports.createBlobServiceClient = createBlobServiceClient;
async function generateSasToken(client, resourceGroupName, storageName) {
    const accountSasParameters = {
        services: "bf",
        resourceTypes: "sco",
        permissions: "rwld",
        sharedAccessStartTime: new Date(Date.now() - deployConstant_1.DeployConstant.SAS_TOKEN_LIFE_TIME_PADDING),
        sharedAccessExpiryTime: new Date(Date.now() + deployConstant_1.DeployConstant.SAS_TOKEN_LIFE_TIME),
    };
    let token;
    try {
        token = (await client.listAccountSAS(resourceGroupName, storageName, accountSasParameters))
            .accountSasToken;
    }
    catch (e) {
        throw componentError_1.ExternalApiCallError.getSasTokenError(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE, JSON.stringify(e));
    }
    if (!token) {
        throw componentError_1.ExternalApiCallError.getSasTokenError(deployConstant_1.DeployConstant.DEPLOY_ERROR_TYPE);
    }
    return token;
}
exports.generateSasToken = generateSasToken;
function getBlobUri(storageName) {
    return `https://${storageName}.blob.core.windows.net`;
}
exports.getBlobUri = getBlobUri;
async function getBlobServiceClient(blobUri, sasToken) {
    const connectionString = `BlobEndpoint=${blobUri};SharedAccessSignature=${sasToken}`;
    return storage_blob_1.BlobServiceClient.fromConnectionString(connectionString);
}
exports.getBlobServiceClient = getBlobServiceClient;
//# sourceMappingURL=azureResourceOperation.js.map