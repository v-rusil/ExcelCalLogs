"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsFxTelemetryReporter = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const tools_1 = require("../../common/tools");
const constants_1 = require("../constants");
class TeamsFxTelemetryReporter {
    constructor(telemetryReporter, defaultConfig) {
        this.telemetryReporter = telemetryReporter;
        this.defaultConfig = defaultConfig;
    }
    // Will auto append `-start` to eventName
    sendStartEvent(config) {
        try {
            const actualConfig = this.mergeConfig(config, this.defaultConfig);
            if (actualConfig.componentName) {
                actualConfig.properties = Object.assign({ [constants_1.TelemetryConstants.properties.component]: actualConfig.componentName }, actualConfig.properties);
            }
            this.telemetryReporter.sendTelemetryEvent(actualConfig.eventName + constants_1.TelemetryConstants.eventPrefix, actualConfig.properties, actualConfig.measurements);
        }
        catch (_a) {
            // ignore errors in telemetry reporter
        }
    }
    // If error is undefined, then treat operation as success. Otherwise treat operation as failed.
    sendEndEvent(config, error) {
        try {
            const actualConfig = this.mergeConfig(config, this.defaultConfig);
            if (actualConfig.componentName) {
                actualConfig.properties = Object.assign({ [constants_1.TelemetryConstants.properties.component]: actualConfig.componentName }, actualConfig.properties);
            }
            if (error) {
                // sendTelemetryErrorEvent
                const errorCode = error.source + "." + error.name;
                const errorType = error instanceof teamsfx_api_1.SystemError
                    ? constants_1.TelemetryConstants.values.systemError
                    : constants_1.TelemetryConstants.values.userError;
                actualConfig.properties = Object.assign({ [constants_1.TelemetryConstants.properties.success]: constants_1.TelemetryConstants.values.no, [constants_1.TelemetryConstants.properties.errorCode]: errorCode, [constants_1.TelemetryConstants.properties.errorType]: errorType, [constants_1.TelemetryConstants.properties.errorMessage]: error.message }, actualConfig.properties);
                if (!actualConfig.errorProps) {
                    actualConfig.errorProps = [];
                }
                actualConfig.errorProps = actualConfig.errorProps.concat([
                    constants_1.TelemetryConstants.properties.errorMessage,
                ]);
                this.telemetryReporter.sendTelemetryErrorEvent(actualConfig.eventName, actualConfig.properties, actualConfig.measurements, actualConfig.errorProps);
            }
            else {
                // sendTelemetryEvent
                actualConfig.properties = Object.assign({ [constants_1.TelemetryConstants.properties.success]: constants_1.TelemetryConstants.values.yes }, actualConfig.properties);
                this.telemetryReporter.sendTelemetryEvent(actualConfig.eventName, actualConfig.properties, actualConfig.measurements);
            }
        }
        catch (_a) {
            // ignore errors in telemetry reporter
        }
    }
    mergeConfig(config, defaultConfig) {
        const result = tools_1.deepCopy(config);
        if (defaultConfig) {
            if (defaultConfig.baseEventName) {
                result.eventName = defaultConfig.baseEventName + result.eventName;
            }
            if (!result.componentName && defaultConfig.componentName) {
                result.componentName = defaultConfig.componentName;
            }
        }
        return result;
    }
}
exports.TeamsFxTelemetryReporter = TeamsFxTelemetryReporter;
//# sourceMappingURL=teamsFxTelemetryReporter.js.map