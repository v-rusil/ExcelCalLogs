import { ResourceManagementClient } from "@azure/arm-resources";
import { Middleware } from "@feathersjs/hooks";
import { AzureAccountProvider, FxError, Inputs, QTreeNode, Result, UserError, v2 } from "@microsoft/teamsfx-api";
export declare type AzureSubscription = {
    displayName: string;
    subscriptionId: string;
};
export declare const DefaultResourceGroupLocation = "East US";
export declare type ResourceGroupInfo = {
    createNewResourceGroup: boolean;
    name: string;
    location: string;
};
export declare function ResourceGroupErrorHandlerMW(operation: string): Middleware;
export declare class ResourceGroupApiError extends UserError {
    constructor(operation: string, resourceGroupName?: string, error?: any);
}
export declare class ResourceGroupHelper {
    createNewResourceGroup(resourceGroupName: string, azureAccountProvider: AzureAccountProvider, subscriptionId: string, location: string): Promise<Result<string, FxError>>;
    checkResourceGroupExistence(resourceGroupName: string, rmClient: ResourceManagementClient): Promise<Result<boolean, FxError>>;
    getResourceGroupInfo(resourceGroupName: string, rmClient: ResourceManagementClient): Promise<Result<ResourceGroupInfo | undefined, FxError>>;
    listResourceGroups(rmClient: ResourceManagementClient): Promise<Result<[string, string][], FxError>>;
    getLocations(azureAccountProvider: AzureAccountProvider, rmClient: ResourceManagementClient): Promise<Result<string[], FxError>>;
    getQuestionsForResourceGroup(defaultResourceGroupName: string, existingResourceGroupNameLocations: [string, string][], availableLocations: string[], rmClient: ResourceManagementClient): Promise<QTreeNode | undefined>;
    /**
     * Ask user to create a new resource group or use an existing resource group
     */
    askResourceGroupInfo(ctx: v2.Context, inputs: Inputs, azureAccountProvider: AzureAccountProvider, rmClient: ResourceManagementClient, defaultResourceGroupName: string): Promise<Result<ResourceGroupInfo, FxError>>;
    /**
     * Ask user to create a new resource group or use an existing resource group  V3
     */
    askResourceGroupInfoV3(azureAccountProvider: AzureAccountProvider, rmClient: ResourceManagementClient, defaultResourceGroupName: string): Promise<Result<ResourceGroupInfo, FxError>>;
}
export declare const resourceGroupHelper: ResourceGroupHelper;
//# sourceMappingURL=ResourceGroupHelper.d.ts.map