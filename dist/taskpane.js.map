{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane/./src/taskpane/jsonConfigUtils.ts","webpack://office-addin-taskpane/./src/taskpane/taskpane.ts","webpack://office-addin-taskpane/./src/taskpane/taskpane.html","webpack://office-addin-taskpane/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane/webpack/bootstrap","webpack://office-addin-taskpane/webpack/runtime/compat get default export","webpack://office-addin-taskpane/webpack/runtime/define property getters","webpack://office-addin-taskpane/webpack/runtime/global","webpack://office-addin-taskpane/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane/webpack/runtime/publicPath","webpack://office-addin-taskpane/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane/webpack/startup"],"sourcesContent":["import { ColumnDefinition, EnumColumnHorizontalAlignment, EnumColumnVerticalAlignment } from './columnDefinitions';\r\n\r\n\r\nexport class JsonConfigUtils \r\n{\r\n  private columns: ColumnDefinition[] = [];\r\n  private json: string;\r\n  \r\n  constructor() {\r\n    // this.json = value;\r\n  }\r\n  \r\n  getValue(): string {\r\n    return this.json;\r\n  }\r\n\r\n  addColumn(col: ColumnDefinition): ColumnDefinition {\r\n    this.columns.push(col);\r\n    return col;\r\n  }\r\n\r\n  addColumnByName( columnName: string,isMandatory: boolean, horizontalAlignment?: string, verticalAlignment?: EnumColumnVerticalAlignment,\r\n                    columnWidth?: number, indentLevel?: number, style?: string, numberFormat?: string, visible: boolean = true, autosizeColumn: boolean = false\r\n                 ): ColumnDefinition {\r\n\r\n    const col: ColumnDefinition = {\r\n                                    columnName,\r\n                                    isMandatory,\r\n                                    horizontalAlignment,\r\n                                    verticalAlignment,\r\n                                    columnWidth,\r\n                                    indentLevel,\r\n                                    style,\r\n                                    numberFormat,\r\n                                    visible,\r\n                                    autosizeColumn\r\n                                };\r\n    this.columns.push(col);\r\n    return col;\r\n  }\r\n\r\n  convertColumnDefinitionsToJson(): string {\r\n    // Convert the array of ColumnDefinition objects to a JSON string\r\n    const json: string = JSON.stringify(this.columns);\r\n    return json;\r\n  }\r\n\r\n\r\n\r\n//#region Horizontal and Vertical Alignment converters\r\n\r\nconvertToHorizontalAlignment(value: string, range:Excel.Range)\r\n{\r\n  switch (value) {\r\n    case \"Center\":\r\n      range.format.horizontalAlignment = Excel.HorizontalAlignment.center;\r\n      break;\r\n    case \"Left\":\r\n      range.format.horizontalAlignment = Excel.HorizontalAlignment.left;\r\n      break;\r\n    case \"Right\":\r\n      range.format.horizontalAlignment = Excel.HorizontalAlignment.right;\r\n      break;\r\n    case \"Justify\":\r\n      range.format.horizontalAlignment = Excel.HorizontalAlignment.justify\r\n      break;\r\n    case\"General\":\r\n      range.format.horizontalAlignment = Excel.HorizontalAlignment.general\r\n      break;\r\n    default:\r\n      range.format.horizontalAlignment = Excel.HorizontalAlignment.general\r\n      break;\r\n  }\r\n}\r\n\r\nconverttoverticalalignment(value: string): Excel.VerticalAlignment {\r\n  switch (value) {\r\n    case \"center\":\r\n      return Excel.VerticalAlignment.bottom;\r\n    case \"left\":\r\n      return Excel.VerticalAlignment.center;\r\n    case \"right\":\r\n      return Excel.VerticalAlignment.distributed;\r\n    case \"justify\":\r\n      return Excel.VerticalAlignment.justify;\r\n    case\"general\":\r\n        return Excel.VerticalAlignment.top;\r\n    default:\r\n      return Excel.VerticalAlignment.top;\r\n  }\r\n}\r\n\r\n//#endregion\r\n\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\nimport { ColumnDefinition, EnumColumnHorizontalAlignment, EnumColumnVerticalAlignment } from \"./columnDefinitions\";\r\nimport { JsonConfigUtils } from './jsonConfigUtils';\r\n\r\n/* global console, document, Excel, Office */\r\n\r\nvar ctx:Excel.RequestContext\r\n\r\nvar tbl:Excel.Table;\r\nvar sheet:Excel.Worksheet;\r\nvar tblRange:Excel.Range;\r\nvar jsonConfigUtils:JsonConfigUtils;\r\n\r\n\r\n//#region JSON properties of Callog\r\nvar jsonLog:string = `\r\n  [  \r\n    {    \r\n      \"columnName\": \"ModifiedDate\",   \r\n      \"isMandatory\": \"true\", \r\n      \"horizontalAlignment\": \"Center\",    \r\n      \"verticalAlignment\": \"Bottom\",    \r\n      \"columnWidth\": 180,    \r\n      \"indentLevel\": 1,    \r\n      \"style\": \"Neutral\",\r\n      \"numberFormat\": \"MM/dd/yyyy HH:mm:ss\"  \r\n    },  \r\n    {    \r\n      \"columnName\": \"Age\",  \r\n      \"isMandatory\": \"false\",  \r\n      \"horizontalAlignment\": \"center\",    \r\n      \"verticalAlignment\": \"middle\",    \r\n      \"columnWidth\": 80,    \r\n      \"indentLevel\": 1,    \r\n      \"style\": \"italic\",  \r\n      \"numberFormat\": \"MM/dd/yyyy HH:mm:ss\"  \r\n    }\r\n  ]`\r\n\r\n//#endregion\r\n\r\n\r\n//#region Properties\r\nvar _totalTblRows: number = -1;\r\nasync function totalTblRows(): Promise<number>\r\n{\r\n  if (_totalTblRows <= 0) {\r\n    tblRange.load([\"rowCount\"]);\r\n    await ctx.sync();\r\n    \r\n    _totalTblRows = tblRange.rowCount;\r\n      \r\n  }\r\n  return _totalTblRows;\r\n}\r\n\r\n// dropdown Type of CDL log\r\nfunction typeCDL(): string {\r\n  const selectElement = document.getElementById('typeCDL') as HTMLSelectElement;\r\n  return selectElement.value;\r\n}\r\n\r\n// Organizer table styles and checkbox\r\nvar organizerTableStyle:string = \"TableStyleLight10\";\r\nvar attendeeTableStyle:string = \"TableStyleLight13\";\r\nasync function isOrganizer():Promise<boolean>\r\n{\r\n  const checkbox = document.getElementById(\"isOrganizer\") as HTMLInputElement;\r\n  return checkbox.checked;\r\n}\r\n\r\n\r\nasync function warn1KRows():Promise<boolean>\r\n{\r\n  const checkbox = document.getElementById(\"warn1KRows\") as HTMLInputElement;\r\n  return checkbox.checked;\r\n}\r\n\r\nasync function hideLessRelevants():Promise<boolean>\r\n{\r\n  const checkbox = document.getElementById(\"hideLessRelevants\") as HTMLInputElement;\r\n  return checkbox.checked;\r\n}\r\n\r\n//#endregion\r\n\r\n//#region Helper methods\r\nasync function showSpinner(show:boolean)\r\n{\r\n  var element = document.getElementById(\"spinner\");\r\n  if (show) {\r\n    element.classList.remove(\"invisible\");\r\n  } else {\r\n    element.classList.add(\"invisible\");\r\n  }\r\n}\r\n\r\nfunction AddMessage(message: string) {\r\n  const p = document.getElementById(\"statusMessage\");\r\n  p.textContent = message;\r\n}\r\n\r\nenum enumTypeAnalysis\r\n{\r\n  Warning, \r\n  Action, \r\n  Danger, \r\n  Success\r\n}\r\nasync function addAnalysisInfo(title:string, badge:number, message:string, smallfooter:string, typeanalysis:enumTypeAnalysis)\r\n{\r\n  // <a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-warning\">\r\n  //    <div class=\"d-flex w-100 justify-content-between\">\r\n  //      <h5 class=\"mb-1\">Row limit</h5>\r\n  //      <span class=\"badge badge-primary badge-pill\">1002</span>\r\n  //    </div>\r\n  //    <p class=\"mb-1\">If rows returned are close to 1K</p>\r\n  //    <small>Get-CalendarDiagnosticObjects</small>\r\n  // </a>\r\n    const analysisDiv = document.getElementById(\"analysisInfo\");\r\n  \r\n    // Create the <a> element with the appropriate class based on the enum value\r\n    const aElement = document.createElement(\"a\");\r\n    switch (typeanalysis) {\r\n      case enumTypeAnalysis.Warning:\r\n        aElement.classList.add(\"list-group-item\", \"list-group-item-action\", \"list-group-item-warning\");\r\n        break;\r\n      case enumTypeAnalysis.Action:\r\n        aElement.classList.add(\"list-group-item\", \"list-group-item-action\");\r\n        break;\r\n      case enumTypeAnalysis.Danger:\r\n        aElement.classList.add(\"list-group-item\", \"list-group-item-action\", \"list-group-item-danger\");\r\n        break;\r\n      case enumTypeAnalysis.Success:\r\n        aElement.classList.add(\"list-group-item\", \"list-group-item-action\", \"list-group-item-success\");\r\n        break;\r\n    }\r\n  \r\n    // Create the <div> element with the appropriate classes and contents\r\n    const divElement = document.createElement(\"div\");\r\n    divElement.classList.add(\"d-flex\", \"w-100\", \"justify-content-between\");\r\n    const h5Element = document.createElement(\"h5\");\r\n    h5Element.classList.add(\"mb-1\");\r\n    h5Element.innerText = title;\r\n    const spanElement = document.createElement(\"span\");\r\n    spanElement.classList.add(\"badge\", \"badge-primary\", \"badge-pill\");\r\n    if (badge == 0) {\r\n      spanElement.classList.add(\"invisible\");\r\n    }\r\n    spanElement.innerText = badge.toString();\r\n    divElement.appendChild(h5Element);\r\n    divElement.appendChild(spanElement);\r\n  \r\n    // Create the <p> element with the message\r\n    const pElement = document.createElement(\"p\");\r\n    pElement.classList.add(\"mb-1\");\r\n    pElement.innerText = message;\r\n  \r\n    // Create the <small> element with the footer text\r\n    const smallElement = document.createElement(\"small\");\r\n    smallElement.innerText = smallfooter;\r\n  \r\n    // Add the child elements to the <a> element\r\n    aElement.appendChild(divElement);\r\n    aElement.appendChild(pElement);\r\n    aElement.appendChild(smallElement);\r\n  \r\n    // Add the <a> element to the analysis div\r\n    analysisDiv.appendChild(aElement);\r\n  \r\n  }\r\n\r\n  async function resetAnalysisInfo()\r\n  {\r\n    const analysisInfoDiv = document.getElementById('analysisInfo');\r\n    analysisInfoDiv.innerHTML = '';\r\n  }\r\n//#endregion\r\n\r\n\r\n\r\n//#region Init OfficeJS\r\nOffice.onReady((info) => {\r\n  if (info.host === Office.HostType.Excel) {\r\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\r\n    \r\n    document.getElementById(\"run\").onclick = run;\r\n    document.getElementById(\"createConfig\").onclick = createConfig;\r\n    document.getElementById(\"testConfig\").onclick = testConfig;\r\n    document.getElementById(\"testJsonFile\").onclick = testJsonFile;\r\n    \r\n    $(function () {\r\n      $('[data-toggle=\"tooltip\"]').tooltip()\r\n    });\r\n\r\n    resetAnalysisInfo();\r\n  }\r\n});\r\n\r\n//#endregion\r\n\r\nasync function CreateTable(context, keepFormats:boolean=false) {\r\n  try {\r\n\r\n    // Define the range of cells you want to select\r\n    const range = sheet.getUsedRange();\r\n    range.load(\"address\");\r\n    \r\n    // Create a table from the selected range\r\n    let tbl = sheet.tables.getItemOrNullObject(\"CDL\");\r\n    let tblRange = tbl.getRange();\r\n    await context.sync().catch((error)=>{\r\n      addAnalysisInfo(\"error\",0,error,\"create table\", enumTypeAnalysis.Danger);\r\n      console.log(error);\r\n    }) ;\r\n\r\n    if (tbl.isNullObject) {\r\n      tbl = sheet.tables.add(range, true /* hasHeaders */); \r\n      tbl.name = \"CDL\"; \r\n      tblRange=tbl.getRange();\r\n      await context.sync();\r\n    }\r\n\r\n    if (keepFormats) return; //just create table and leave\r\n\r\n    tblRange.clear(\"Formats\");\r\n    await context.sync();\r\n\r\n    var _isOrganizer = await isOrganizer();\r\n    if (_isOrganizer) {\r\n      tbl.style = organizerTableStyle;  \r\n    }\r\n    else{\r\n      tbl.style = attendeeTableStyle;  \r\n    }\r\n    \r\n    tbl.load('tableStyle');\r\n    tbl.columns.load();\r\n    tblRange = tbl.getRange();\r\n    await context.sync();\r\n    \r\n  } catch (error) {\r\n    addAnalysisInfo(\"create Table\", 0, `Error creating table ${error}`, \"Create Table\", enumTypeAnalysis.Danger );\r\n    console.error(error);\r\n    AddMessage(error);\r\n  }\r\n}\r\n\r\n\r\nasync function FilterIgnorable(value:string) {\r\n  tbl.columns.load();\r\n  await ctx.sync();\r\n  let ignorableFilter = tbl.columns.getItemOrNullObject(\"Ignorable\").filter;\r\n  await ctx.sync();\r\n  ignorableFilter.apply({\r\n    filterOn: Excel.FilterOn.values,\r\n    values: [value]\r\n  });\r\nawait ctx.sync();\r\nconsole.log(\"Cells filtered. \");\r\n}\r\n\r\nasync function FormatDateColumn( context, columnName:string){\r\n  const col:Excel.TableColumn = tbl.columns.getItemOrNullObject(columnName);\r\n  const colRange:Excel.Range = col.getDataBodyRange();\r\n  await context.sync();\r\n\r\n  const criteria: Excel.ReplaceCriteria = {\r\n    completeMatch: false, /* Use a complete match to skip cells that already say \"okay\". */\r\n    matchCase: true /* Ignore case when comparing strings. */\r\n  };\r\n  colRange.replaceAll(\"Z\", \"\", criteria);\r\n\r\n  await context.sync();\r\n\r\n  // Apply horizontal alignment as \"center\", vertical alignment as \"bottom\" and wrap text as \"false\"\r\n  colRange.format.horizontalAlignment = \"Center\";\r\n  colRange.format.verticalAlignment = \"Bottom\";\r\n  colRange.format.wrapText = false;\r\n  // colRange.format.columnWidth=19;\r\n  \r\n  const rangeWidth:Excel.Range = colRange.getEntireColumn();\r\n  rangeWidth.load(\"format\"); await context.sync();\r\n  rangeWidth.format.autofitColumns();\r\n \r\n  await context.sync();\r\n\r\n}\r\n\r\nasync function HighlightIgnorable(){\r\n\r\n  const colRange:Excel.Range = tbl.columns.getItemOrNullObject(\"Ignorable\").getDataBodyRange();\r\n\r\n  const conditionalFormat = colRange.conditionalFormats.add(\r\n    Excel.ConditionalFormatType.containsText\r\n  );\r\n\r\n  conditionalFormat.textComparison.format.font.color = \"blue\";\r\n  conditionalFormat.textComparison.format.fill.color=\"#ADD8E6\";\r\n  \r\n  conditionalFormat.textComparison.rule = {\r\n    operator: Excel.ConditionalTextOperator.contains,\r\n    text: \"TRUE\"\r\n  };\r\n  await ctx.sync();\r\n\r\n  return await CountFilterOccurrences(conditionalFormat.getRange());\r\n  \r\n}\r\n\r\nasync function HighlightApptSequence(context){\r\n    const col = tbl.columns.getItemOrNullObject(\"ApptSequence\");\r\n    \r\n    const range = col.getDataBodyRange();\r\n    await ctx.sync();\r\n    const conditionalFormat = range.conditionalFormats\r\n        .add(Excel.ConditionalFormatType.colorScale);\r\n    const criteria = {\r\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"white\" },\r\n        // midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\r\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"green\" }\r\n    };\r\n    conditionalFormat.colorScale.criteria = criteria;\r\n\r\n    await context.sync();\r\n}\r\n\r\n\r\nasync function CountFilterOccurrences( filterRange:Excel.Range ):Promise<number>\r\n{\r\n  await ctx.sync();\r\n  // Get the range of cells affected by the conditional format\r\n  const affectedRange = await filterRange.getIntersectionOrNullObject(tbl.getRange());\r\n  affectedRange.load([\"rowCount\"]); await ctx.sync();\r\n  // Get the number of rows affected by the conditional format\r\n  const rowCount = affectedRange ? affectedRange.rowCount : 0;\r\n  return rowCount;\r\n}\r\n\r\nasync function HighlightCRA(context):Promise<number>\r\n{\r\n\r\n    const colRange:Excel.Range = tbl.columns.getItemOrNullObject(\"Client\").getRange();\r\n\r\n    const conditionalFormat = colRange.conditionalFormats.add(\r\n      Excel.ConditionalFormatType.containsText\r\n    );\r\n\r\n    // Color the font of every cell containing \"Delayed\".\r\n    conditionalFormat.textComparison.format.font.color = \"red\";\r\n    conditionalFormat.textComparison.rule = {\r\n      operator: Excel.ConditionalTextOperator.contains,\r\n      text: \"CRA:CalendarRepairAssistant\"\r\n    };\r\n    await context.sync();\r\n\r\n    return await CountFilterOccurrences(conditionalFormat.getRange());\r\n  \r\n}\r\n\r\nasync function HighLightCreates(context):Promise<number>\r\n{\r\n  const colRange:Excel.Range = tbl.columns.getItemOrNullObject(\"Trigger\").getRange();\r\n\r\n  const conditionalFormat = colRange.conditionalFormats.add(\r\n    Excel.ConditionalFormatType.containsText\r\n  );\r\n\r\n  // Color the font of every cell containing \"Delayed\".\r\n  conditionalFormat.textComparison.format.fill.color = \"Green\";\r\n  conditionalFormat.textComparison.rule = {\r\n    operator: Excel.ConditionalTextOperator.contains,\r\n    text: \"Create\"\r\n  };\r\n\r\n  await context.sync();\r\n\r\n  return await CountFilterOccurrences(conditionalFormat.getRange());\r\n\r\n}\r\n\r\n\r\n\r\nfunction isJSONString(str: any): boolean {\r\n  try {\r\n    const jsonObj = JSON.parse(str);\r\n    return typeof jsonObj === \"object\" && jsonObj !== null;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function validateCDLStructure(json: any, hideLessRelevants:boolean=false): Promise<boolean> {\r\n  \r\n  var jsonArray;\r\n  \r\n  if (typeof json === \"string\") {\r\n    if (!isJSONString(json)) {\r\n      throw new Error(\"Invalid JSON string\");\r\n    }\r\n    jsonArray = JSON.parse(json);\r\n  } else if (typeof json === \"object\") {\r\n    jsonArray = json;\r\n  } else {\r\n    throw new Error(\"Parameter must be a string or an object\");\r\n  }\r\n  \r\n  if (!Array.isArray(jsonArray)) \r\n  {\r\n        throw new Error(\"Input JSON is not an array.\");\r\n  }\r\n\r\n  try \r\n  {\r\n    \r\n    // tbl.columns.load();\r\n    // await ctx.sync();\r\n\r\n    for (const element of jsonArray) \r\n    {\r\n        var tblCol:Excel.TableColumn;\r\n        var tblColRange:Excel.Range;\r\n        if (element.columnName == undefined || element.columnName == \"\") \r\n        {\r\n          console.log(\"Skipping json element as it is undefined ColumnName\");\r\n          continue;\r\n        }\r\n\r\n        tblCol = tbl.columns.getItemOrNullObject(element.columnName);\r\n        tblColRange = tblCol.getDataBodyRange();\r\n        ctx.trackedObjects.add([tblCol, tblColRange]);;\r\n        await ctx.sync();\r\n\r\n        if (tblCol.isNullObject) \r\n        {\r\n          if (element.isMandatory !== undefined && element.isMandatory !== \"\" && element.isMandatory == \"false\") {\r\n            console.log(`isMandatory: ${element.isMandatory}`);\r\n            continue;\r\n          }\r\n          console.log(`Column Name does not exist: ${element.columnName}`);\r\n          addAnalysisInfo(\"columnName\",0,`Column Name does not exist: ${element.columnName}`, \"ValidateJSONStruct\", enumTypeAnalysis.Danger);\r\n          return false;\r\n        }\r\n\r\n\r\n        console.log(`Column Name: ${element.columnName}`);\r\n\r\n        if (element.horizontalAlignment !== undefined && element.horizontalAlignment !== \"\") {\r\n          console.log(`Horizontal Alignment: ${element.horizontalAlignment}`);\r\n          // jsonConfigUtils.convertToHorizontalAlignment(element.horizontalAlignment, tblColRange);\r\n          var value:string = element.horizontalAlignment;\r\n          switch (value) {\r\n            case \"Center\":\r\n              tblColRange.format.horizontalAlignment = Excel.HorizontalAlignment.center;\r\n              break;\r\n            case \"Left\":\r\n              tblColRange.format.horizontalAlignment = Excel.HorizontalAlignment.left;\r\n              break;\r\n            case \"Right\":\r\n              tblColRange.format.horizontalAlignment = Excel.HorizontalAlignment.right;\r\n              break;\r\n            case \"Justify\":\r\n              tblColRange.format.horizontalAlignment = Excel.HorizontalAlignment.justify\r\n              break;\r\n            case\"General\":\r\n            tblColRange.format.horizontalAlignment = Excel.HorizontalAlignment.general\r\n              break;\r\n            default:\r\n              tblColRange.format.horizontalAlignment = Excel.HorizontalAlignment.general\r\n              break;\r\n          }\r\n          await ctx.sync();\r\n        }\r\n  \r\n        if (element.verticalAlignment !== undefined && element.verticalAlignment !== \"\") {\r\n            console.log(`Vertical Alignment: ${element.verticalAlignment}`);\r\n            // tblColRange.format.verticalAlignment = jsonConfigUtils.convertToVerticalAlignment(element.verticalAlignment);\r\n            await ctx.sync();\r\n        }\r\n  \r\n        if (element.columnWidth !== undefined && element.columnWidth !== null) {\r\n          console.log(`Column Width: ${element.columnWidth}`);\r\n          tblColRange.format.columnWidth = element.columnWidth;\r\n          await ctx.sync();\r\n        }\r\n  \r\n        if (element.indentLevel !== undefined && element.indentLevel !== null) {\r\n          console.log(`Ident Level: ${element.indentLevel}`);\r\n          tblColRange.format.indentLevel = element.indentLevel;\r\n          await ctx.sync();\r\n        }\r\n  \r\n        if (element.style !== undefined && element.style !== \"\") {\r\n          console.log(`Style: ${element.style}`);\r\n          tblColRange.style = element.style;\r\n          await ctx.sync();\r\n        }\r\n\r\n        if (element.numberFormat !== undefined && element.numberFormat !== \"\") {\r\n          console.log(`Style: ${element.numberFormat}`);\r\n          tblColRange.numberFormat = element.numberFormat;\r\n          await ctx.sync();\r\n        }\r\n\r\n        if (element.visible !== undefined && element.visible !== null) {\r\n          console.log(`Visible: ${element.visible}`);\r\n          if (!element.visible && hideLessRelevants)  tblColRange.columnHidden = true;\r\n          await ctx.sync();\r\n        }\r\n\r\n        if (element.autosizeColumn !== undefined && element.autosizeColumn !== null) {\r\n          console.log(`autosizeColumn: ${element.autosizeColumn}`);\r\n          if (element.autosizeColumn===\"true\")  tblColRange.format.autofitColumns();\r\n          await ctx.sync();\r\n        }\r\n\r\n        await ctx.sync();\r\n        console.log(`removing tracked objects for ${element.columnName}`);\r\n        ctx.trackedObjects.remove([tblCol, tblColRange]);;               \r\n    }\r\n\r\n    return true;\r\n\r\n  } catch (error) {\r\n    addAnalysisInfo(\"columnName\",0,`Error traversing JSON array: ${error}`, \"ValidateJSONStruct\", enumTypeAnalysis.Danger);\r\n    console.error(`Error traversing JSON array: ${error}`);\r\n    return false;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nasync function createColumnDefinitionsFromTable(): Promise<JsonConfigUtils> \r\n{\r\n  var colDefinitions:JsonConfigUtils = new JsonConfigUtils();\r\n\r\n  // Get the table object from the global variable 'tbl'\r\n  // Load all columns and their format properties\r\n  const columns = tbl.columns.load([\r\n    'name',\r\n    'values/format',\r\n    'values/horizontalAlignment',\r\n    'values/verticalAlignment',\r\n    'values/columnWidth',\r\n    'values/indentLevel',\r\n    'values/style',\r\n    'values/numberFormat',\r\n    'values/autosizeColumn'\r\n  ]);\r\n\r\n  // Synchronize with the document\r\n  await ctx.sync();\r\n\r\n   // Iterate through the columns\r\n   for (const column of columns.items) \r\n   {\r\n      const headerCell:Excel.Range = column.getRange().getCell(0, 0);\r\n      headerCell.load([\"columnHidden\"]);\r\n      await ctx.sync();\r\n      const isVisible = headerCell.columnHidden;\r\n\r\n      var r: Excel.Range = column.getDataBodyRange();\r\n      r.load(['style', 'numberFormat'])\r\n      r.format.load(['format','horizontalAlignment', 'verticalAlignment', 'columnWidth', 'indentLevel', 'style', 'numberFormat']);\r\n      await ctx.sync();\r\n       // Access the loaded properties\r\n       const name = column.name;\r\n       const format = r.format;\r\n       const horizontalAlignment = r.format.horizontalAlignment;\r\n       const verticalAlignment = r.format.verticalAlignment;\r\n       const columnWidth = r.format.columnWidth;\r\n       const indentLevel = r.format.indentLevel;\r\n       const style = r.style;\r\n       const numberFormat = r.numberFormat[0].toString(); //numberFormat is an array of all the cells format, we'll check just the first row\r\n       const autosizeColumn = false;\r\n       const visible:boolean = true;\r\n       \r\n       // Create a column definition object and add it to your array\r\n       const colDef: ColumnDefinition = {\r\n         columnName: name,\r\n         isMandatory: true, // Set this to whatever your default is\r\n         horizontalAlignment:horizontalAlignment,\r\n         verticalAlignment:verticalAlignment,\r\n         columnWidth:columnWidth,\r\n         indentLevel:indentLevel,\r\n         style:style,\r\n         numberFormat:numberFormat,\r\n         visible: visible, // Set this to whatever your default is\r\n         autosizeColumn:false\r\n       };\r\n       colDefinitions.addColumn(colDef);\r\n   }\r\n\r\n  return colDefinitions;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nasync function PerformAnalysis(context) {\r\n  await resetAnalysisInfo();\r\n  await CheckNumberOfRows();\r\n  await context.sync();\r\n}\r\n\r\nasync function CheckNumberOfRows() {\r\n  \r\n  if (!CheckNumberOfRows) return; \r\n\r\n  const rowCount = await totalTblRows();\r\n  \r\n  if (rowCount >= 950) {\r\n    addAnalysisInfo(\"Row count number\", rowCount, \"Number of rows is very close(or above) the Diag Limit of 1000Rows\", \"CheckNumberOfRows\", enumTypeAnalysis.Warning);\r\n    AddMessage(\"Number of rows is very close to the Diag Limit of 1000Rows returned($tblRange.rowCount)\");\r\n  }   \r\n  await ctx.sync();\r\n}\r\n\r\n\r\nasync function freezeColumns(columnName: string)\r\n{\r\n    const column = tbl.columns.getItem(columnName);\r\n    sheet.freezePanes.freezeRows(1);\r\n    sheet.freezePanes.freezeColumns(3);\r\n    await ctx.sync();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nasync function getJsonData(): Promise<any> {\r\n  const response = await fetch(\"./RaveCDLconfig.json\");\r\n  const jsonData = await response.json();\r\n  return jsonData;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//#region Config section\r\nexport async function createConfig()\r\n{\r\n  await Excel.run(async (context) => {\r\n    ctx = context;\r\n    sheet = context.workbook.worksheets.getActiveWorksheet();\r\n    tbl = sheet.tables.getItemOrNullObject(\"CDL\");\r\n    tblRange = tbl.getRange();\r\n    \r\n    await context.sync() ;\r\n\r\n    await  CreateTable(context, true); //keep formatting for json creation\r\n\r\n    var colDefs:JsonConfigUtils =  await createColumnDefinitionsFromTable();\r\n    document.getElementById(\"jsonConfig\").textContent = colDefs.convertColumnDefinitionsToJson();\r\n  });\r\n  \r\n}\r\n\r\n\r\nexport async function testJsonFile()\r\n{\r\n  var tempJson = await getJsonData();\r\n  document.getElementById(\"jsonConfig\").textContent = JSON.stringify(tempJson);\r\n  var isTableValid:boolean = await validateCDLStructure(tempJson);\r\n}\r\n\r\nexport async function testConfig()\r\n{\r\n  var tempJson = document.getElementById(\"jsonConfig\").textContent;\r\n  var isTableValid:boolean = await validateCDLStructure(tempJson);\r\n}\r\n//#endregion\r\n\r\n//Main Function\r\nexport async function run() {\r\n  try {\r\n    await Excel.run(async (context) => {\r\n      /**\r\n       * Insert your Excel code here\r\n       */\r\n      \r\n      await showSpinner(true);\r\n      await resetAnalysisInfo();\r\n      await AddMessage(\"Starting Processing\");\r\n      \r\n\r\n      ctx = context;\r\n      sheet = context.workbook.worksheets.getActiveWorksheet();\r\n      tbl = sheet.tables.getItemOrNullObject(\"CDL\");\r\n      tblRange = tbl.getRange();\r\n      jsonConfigUtils = new JsonConfigUtils();\r\n\r\n      sheet.getRange().clear(\"Formats\");\r\n      sheet.getRange().conditionalFormats.clearAll();\r\n      tbl.clearFilters();\r\n      sheet.freezePanes.unfreeze();\r\n      await context.sync();\r\n\r\n\r\n      await  CreateTable(context).then(()=>{AddMessage(\"Create Table Done\")});\r\n      \r\n\r\n      jsonLog = await getJsonData();\r\n      var isTableValid:boolean = await validateCDLStructure(jsonLog);\r\n      if (!isTableValid) {\r\n        addAnalysisInfo(\"CDL Invalid\", 0, \"CDL Structure is invalid (check previous exceptions)\", \"CDLInvalid\", enumTypeAnalysis.Danger);\r\n        showSpinner(false);\r\n        return;\r\n      }\r\n\r\n      //format section\r\n      await freezeColumns(\"Ignorable\");\r\n      // await FormatCells(context).then(()=>{AddMessage(\"Format cells Done\")});\r\n      // await FormatRawFrom(context).then(()=>{AddMessage(\"Format raw from Done\")});\r\n      // await FormatDateColumn(context, \"ModifiedDate\").then(()=>{AddMessage(\"Format ModifiedDate Done\")}); //ModifiedDate\r\n      // await FormatDateColumn(context, \"StartTime\").then(()=>{AddMessage(\"Create StartTime Done\")}); //StartTime\r\n      // await FormatDateColumn(context, \"EndTime\").then(()=>{AddMessage(\"Create End Done\")}); //EndTime\r\n\r\n      //highlight section\r\n      await HighlightIgnorable().then(()=>{AddMessage(\"Highlight Ignorable Done\")});\r\n      await HighlightApptSequence(context).then(()=>{AddMessage(\"Highlight  Done\")});\r\n      await HighlightCRA(context).then(()=>{AddMessage(\"Highlight CRA Done\")});\r\n      \r\n      //await addAnalysisInfo(\"CRA Found\", rowCount, \"CRA Events were found, meaning calendar state was not 100%\",\"HighlightCRA\",enumTypeAnalysis.Warning);\r\n      await HighLightCreates(context).then(()=>{AddMessage(\"Highlight Create Done\")});\r\n\r\n      //Filters section\r\n      await FilterIgnorable(\"FALSE\").then(()=>{AddMessage(\"Filter Ignorable Done\")});\r\n\r\n      await context.sync();\r\n      \r\n      await PerformAnalysis(context).then(()=>{AddMessage(\"Perform Analysis Done\")});\r\n      console.log(`Processing done.`);\r\n      \r\n      AddMessage(\"Done!\");\r\n      showSpinner(false);\r\n      \r\n      const urlCDLVideo:string = \"https://msit.microsoftstream.com/video/4221a4ff-0400-9fb2-4805-f1eb0f28f09b\";\r\n      addAnalysisInfo(\"Success\", 0,`Process executed successfully, check the video on CDL analysis ${urlCDLVideo} `, \"success\", enumTypeAnalysis.Success)\r\n    });\r\n  } \r\n  catch (error) \r\n  {\r\n    showSpinner(false);\r\n    console.error(error);\r\n    AddMessage(error);\r\n    addAnalysisInfo(\"Error\",0,error, \"Run/Catch\", enumTypeAnalysis.Danger);\r\n  }\r\n  \r\n  \r\n}\r\n\r\n\r\n","// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\"> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://code.jquery.com/jquery-3.5.1.slim.min.js\\\" integrity=\\\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\\\" crossorigin=\\\"anonymous\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.4/font/bootstrap-icons.css\\\"> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"bg-dark\\\"> <div class=\\\"offcanvas offcanvas-start\\\" id=\\\"console\\\"> <div class=\\\"offcanvas-header\\\"> <h2 class=\\\"offcanvas-title\\\">Console</h2> <button type=\\\"button\\\" class=\\\"btn-close text-reset\\\" data-bs-dismiss=\\\"offcanvas\\\">.</button> </div> <div class=\\\"offcanvas-body\\\"> <div class=\\\"form-group container\\\"> <div class=\\\"form-group\\\"> <table class=\\\"table table-striped\\\"> <thead> <tr> <th scope=\\\"col\\\">#</th> <th scope=\\\"col\\\">First</th> </tr> </thead> <tbody> <tr> <th scope=\\\"row\\\">1</th> <td>Mark</td> </tr> <tr> <th scope=\\\"row\\\">2</th> <td>Jacob</td> </tr> <tr> <th scope=\\\"row\\\">3</th> <td>Larry</td> </tr> </tbody> </table> </div> </div> </div> </div> <div class=\\\"offcanvas offcanvas-start\\\" id=\\\"demo\\\"> <div class=\\\"offcanvas-header\\\"> <h2 class=\\\"offcanvas-title\\\">JSON Config</h2> <button type=\\\"button\\\" class=\\\"btn-close text-reset\\\" data-bs-dismiss=\\\"offcanvas\\\">.</button> </div> <div class=\\\"offcanvas-body\\\"> <div class=\\\"form-group container\\\"> <div class=\\\"form-group\\\"> <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" id=\\\"createConfig\\\" data-toggle=\\\"tooltip\\\" data-placement=\\\"top\\\" title=\\\"Create JSON from table\\\"><i class=\\\"bi bi-arrow-bar-down\\\"></i></button> <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" id=\\\"testConfig\\\" data-toggle=\\\"tooltip\\\" data-placement=\\\"top\\\" title=\\\"Test json Format on current table\\\"><i class=\\\"bi bi-arrow-bar-up\\\"></i></button> <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" id=\\\"testJsonFile\\\" data-toggle=\\\"tooltip\\\" data-placement=\\\"top\\\" title=\\\"test json file against current table\\\"><i class=\\\"bi bi-file-arrow-down\\\"></i></button> </div> <div class=\\\"form-group\\\"> <textarea class=\\\"form-control\\\" rows=\\\"15\\\" placeholder=\\\"Json Config\\\" id=\\\"jsonConfig\\\"></textarea> </div> </div> </div> </div> <div class=\\\"offcanvas offcanvas-start\\\" id=\\\"video\\\"> <div class=\\\"offcanvas-header\\\"> <h2 class=\\\"offcanvas-title\\\">Video Troubleshoot Help(POC)</h2> <button type=\\\"button\\\" class=\\\"btn-close text-reset\\\" data-bs-dismiss=\\\"offcanvas\\\"></button> </div> <div class=\\\"offcanvas-body\\\"> <div class=\\\"container\\\"> <div class=\\\"card-header\\\"> Video Sharing Calendars </div> <div class=\\\"card-body\\\"> <div class=\\\"embed-responsive embed-responsive-21by9\\\"> <iframe class=\\\"embed-responsive-item\\\" width=\\\"560\\\" height=\\\"315\\\" src=\\\"https://www.youtube.com/embed/7C38muJjnyc\\\" title=\\\"YouTube video player\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\\" allowfullscreen></iframe> </div> </div> </div> </div> </div> <div class=\\\"bg-light rounded p-3 card\\\"> <div class=\\\"card-header\\\"> CDL Check provides compreehensive formatting of CDL logs as well as basic troubleshooting help </div> <div class=\\\"card-body\\\"> <form> <div class=\\\"form-group\\\" id=\\\"sideload-msg\\\"> <H2>officeJS is not loaded, Addin will not run!</H2> </div> <div class=\\\"form-group\\\"> </div> <div class=\\\"form-group\\\"> <label for=\\\"typeCDL\\\">Choose Type of CDL Log</label> <select class=\\\"form-control\\\" id=\\\"typeCDL\\\"> <option value=\\\"rave-diag-log\\\">RAVE Diag Log (Default)</option> <option value=\\\"raw-cdl\\\">RAW CDL from Get-CalendarDiagnosticObjects</option> <option value=\\\"onprem-exchange-cdl\\\">ONPrem Exchange CDL (future development)</option> </select> </div> <div class=\\\"form-group\\\"> </div> <div class=\\\"form-group\\\"> <div class=\\\"form-check form-switch\\\"> <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" role=\\\"switch\\\" id=\\\"isOrganizer\\\"> <label class=\\\"form-check-label\\\" for=\\\"isOrganizer\\\">This is an Organizer CDL</label> </div> </div> <div class=\\\"form-group form-switch\\\"> <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" role=\\\"switch\\\" id=\\\"warn1KRows\\\"> <label class=\\\"form-check-label\\\" for=\\\"warn1KRows\\\">Warn if Rows are close to 1K</label> </div> <div class=\\\"form-group form-switch\\\"> <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" role=\\\"switch\\\" id=\\\"hideLessRelevants\\\"> <label class=\\\"form-check-label\\\" for=\\\"hideLessRelevants\\\">Hide less relevant columns</label> </div> <div class=\\\"form-group\\\"> <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" id=\\\"run\\\"><i class=\\\"bi bi-calendar-week\\\"></i></button> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" data-bs-toggle=\\\"offcanvas\\\" data-bs-target=\\\"#demo\\\"><i class=\\\"bi bi-filetype-json\\\"></i></button> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" data-bs-toggle=\\\"offcanvas\\\" data-bs-target=\\\"#video\\\"><i class=\\\"bi bi-film\\\"></i></button> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" data-bs-toggle=\\\"offcanvas\\\" data-bs-target=\\\"#console\\\"><i class=\\\"bi bi-list-check\\\"></i></button> <div class=\\\"spinner-border text-primary invisible\\\" role=\\\"status\\\" id=\\\"spinner\\\"> </div> </div> <div class=\\\"form-group\\\"> <p class=\\\"mb-1 small\\\" id=\\\"statusMessage\\\">Status Message</p> </div> <div class=\\\"list-group\\\" id=\\\"analysisInfo\\\"> </div> </form> </div> <div class=\\\"card-footer\\\"> <small>Exchange Calendaring team</small> </div> </div> </body> </html> \";\n// Exports\nexport default code;","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = String(url.__esModule ? url.default : url);\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t41: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(88555);\nvar __webpack_exports__ = __webpack_require__(93823);\n"],"names":["JsonConfigUtils","columns","prototype","getValue","this","json","addColumn","col","push","addColumnByName","columnName","isMandatory","horizontalAlignment","verticalAlignment","columnWidth","indentLevel","style","numberFormat","visible","autosizeColumn","convertColumnDefinitionsToJson","JSON","stringify","convertToHorizontalAlignment","value","range","format","Excel","HorizontalAlignment","center","left","right","justify","general","converttoverticalalignment","VerticalAlignment","bottom","distributed","top","exports","ctx","tbl","sheet","tblRange","jsonConfigUtils_1","require","_totalTblRows","totalTblRows","load","sync","_a","sent","rowCount","enumTypeAnalysis","organizerTableStyle","attendeeTableStyle","isOrganizer","document","getElementById","checked","showSpinner","show","element","classList","remove","add","AddMessage","message","textContent","addAnalysisInfo","title","badge","smallfooter","typeanalysis","analysisDiv","aElement","createElement","Warning","Action","Danger","Success","divElement","h5Element","innerText","spanElement","toString","appendChild","pElement","smallElement","resetAnalysisInfo","innerHTML","CreateTable","context","keepFormats","getUsedRange","tbl_1","tables","getItemOrNullObject","tblRange_1","getRange","catch","error","console","log","isNullObject","name","clear","_isOrganizer","concat","error_1","FilterIgnorable","ignorableFilter","filter","apply","filterOn","FilterOn","values","HighlightIgnorable","colRange","getDataBodyRange","conditionalFormat","conditionalFormats","ConditionalFormatType","containsText","textComparison","font","color","fill","rule","operator","ConditionalTextOperator","contains","text","CountFilterOccurrences","HighlightApptSequence","colorScale","criteria","minimum","formula","type","ConditionalFormatColorCriterionType","lowestValue","maximum","highestValue","filterRange","getIntersectionOrNullObject","affectedRange","HighlightCRA","HighLightCreates","validateCDLStructure","hideLessRelevants","str","jsonObj","parse","e","isJSONString","Error","jsonArray","Array","isArray","jsonArray_1","_i","length","undefined","tblCol","tblColRange","trackedObjects","columnHidden","autofitColumns","error_2","createColumnDefinitionsFromTable","colDefinitions","_b","items","column","headerCell","getCell","r","name_1","colDef","PerformAnalysis","CheckNumberOfRows","freezeColumns","getItem","freezePanes","freezeRows","getJsonData","fetch","createConfig","run","__awaiter","_this","workbook","worksheets","getActiveWorksheet","colDefs","testJsonFile","tempJson","testConfig","clearAll","clearFilters","unfreeze","then","error_3","Office","onReady","info","host","HostType","display","onclick","$","tooltip","___HTML_LOADER_IMPORT_0___","URL","module","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","window","obj","prop","hasOwnProperty","scriptUrl","importScripts","location","currentScript","src","scripts","getElementsByTagName","replace","p","b","baseURI","self","href"],"sourceRoot":""}